/*
 * generated by Xtext 2.12.0
 */
package org.xtext.roqmemapping.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.roqmemapping.ide.contentassist.antlr.internal.InternalRoQMEMappingParser;
import org.xtext.roqmemapping.services.RoQMEMappingGrammarAccess;

public class RoQMEMappingParser extends AbstractContentAssistParser {

	@Inject
	private RoQMEMappingGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRoQMEMappingParser createParser() {
		InternalRoQMEMappingParser result = new InternalRoQMEMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPeriodAccess().getUnitAlternatives_3_0(), "rule__Period__UnitAlternatives_3_0");
					put(grammarAccess.getMinTimeBtwUpdatesAccess().getUnitAlternatives_3_0(), "rule__MinTimeBtwUpdates__UnitAlternatives_3_0");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMappingModelAccess().getGroup(), "rule__MappingModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getMonitorAccess().getGroup(), "rule__Monitor__Group__0");
					put(grammarAccess.getMonitorAccess().getGroup_4_0(), "rule__Monitor__Group_4_0__0");
					put(grammarAccess.getMonitorAccess().getGroup_4_1(), "rule__Monitor__Group_4_1__0");
					put(grammarAccess.getPeriodAccess().getGroup(), "rule__Period__Group__0");
					put(grammarAccess.getMinTimeBtwUpdatesAccess().getGroup(), "rule__MinTimeBtwUpdates__Group__0");
					put(grammarAccess.getMinDiffBtwUpdatesAccess().getGroup(), "rule__MinDiffBtwUpdates__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_2(), "rule__EDouble__Group_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getMappingModelAccess().getImportsAssignment_0(), "rule__MappingModel__ImportsAssignment_0");
					put(grammarAccess.getMappingModelAccess().getMonitorsAssignment_1(), "rule__MappingModel__MonitorsAssignment_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getMonitorAccess().getContextAssignment_1(), "rule__Monitor__ContextAssignment_1");
					put(grammarAccess.getMonitorAccess().getSourceAssignment_4_0_2(), "rule__Monitor__SourceAssignment_4_0_2");
					put(grammarAccess.getMonitorAccess().getSourceTypeAssignment_4_0_4(), "rule__Monitor__SourceTypeAssignment_4_0_4");
					put(grammarAccess.getMonitorAccess().getServiceAssignment_4_1_2(), "rule__Monitor__ServiceAssignment_4_1_2");
					put(grammarAccess.getMonitorAccess().getOptsAssignment_4_2(), "rule__Monitor__OptsAssignment_4_2");
					put(grammarAccess.getMonitorAccess().getOptsAssignment_4_3(), "rule__Monitor__OptsAssignment_4_3");
					put(grammarAccess.getMonitorAccess().getOptsAssignment_4_4(), "rule__Monitor__OptsAssignment_4_4");
					put(grammarAccess.getPeriodAccess().getValueAssignment_2(), "rule__Period__ValueAssignment_2");
					put(grammarAccess.getPeriodAccess().getUnitAssignment_3(), "rule__Period__UnitAssignment_3");
					put(grammarAccess.getMinTimeBtwUpdatesAccess().getValueAssignment_2(), "rule__MinTimeBtwUpdates__ValueAssignment_2");
					put(grammarAccess.getMinTimeBtwUpdatesAccess().getUnitAssignment_3(), "rule__MinTimeBtwUpdates__UnitAssignment_3");
					put(grammarAccess.getMinDiffBtwUpdatesAccess().getValueAssignment_2(), "rule__MinDiffBtwUpdates__ValueAssignment_2");
					put(grammarAccess.getMonitorAccess().getUnorderedGroup_4(), "rule__Monitor__UnorderedGroup_4");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RoQMEMappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RoQMEMappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
