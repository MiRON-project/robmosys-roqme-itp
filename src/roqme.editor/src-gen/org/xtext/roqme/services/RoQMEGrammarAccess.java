/*
 * generated by Xtext 2.12.0
 */
package org.xtext.roqme.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RoQMEGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RoqmeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.RoqmeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0_0 = (RuleCall)cDescriptionAssignment_0_0.eContents().get(0);
		private final Keyword cRoqmeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNamespaceAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNamespaceEStringParserRuleCall_0_2_0 = (RuleCall)cNamespaceAssignment_0_2.eContents().get(0);
		private final Assignment cSentencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentencesImportParserRuleCall_1_0 = (RuleCall)cSentencesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDataTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDataTypesDataTypeDefinitionParserRuleCall_2_0_0 = (RuleCall)cDataTypesAssignment_2_0.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVariablesTypedVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Assignment cSentencesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cSentencesSentenceParserRuleCall_2_2_0 = (RuleCall)cSentencesAssignment_2_2.eContents().get(0);
		
		//RoqmeModel datatypes::RoqmeModel:
		//	(description=ElementDescription? 'roqme' namespace=EString)?
		//	sentences+=Import* (dataTypes+=DataTypeDefinition
		//	| variables+=TypedVariable
		//	| sentences+=Sentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(description=ElementDescription? 'roqme' namespace=EString)? sentences+=Import* (dataTypes+=DataTypeDefinition |
		//variables+=TypedVariable | sentences+=Sentence)*
		public Group getGroup() { return cGroup; }
		
		//(description=ElementDescription? 'roqme' namespace=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0_0() { return cDescriptionAssignment_0_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0_0; }
		
		//'roqme'
		public Keyword getRoqmeKeyword_0_1() { return cRoqmeKeyword_0_1; }
		
		//namespace=EString
		public Assignment getNamespaceAssignment_0_2() { return cNamespaceAssignment_0_2; }
		
		//EString
		public RuleCall getNamespaceEStringParserRuleCall_0_2_0() { return cNamespaceEStringParserRuleCall_0_2_0; }
		
		//sentences+=Import*
		public Assignment getSentencesAssignment_1() { return cSentencesAssignment_1; }
		
		//Import
		public RuleCall getSentencesImportParserRuleCall_1_0() { return cSentencesImportParserRuleCall_1_0; }
		
		//(dataTypes+=DataTypeDefinition | variables+=TypedVariable | sentences+=Sentence)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//dataTypes+=DataTypeDefinition
		public Assignment getDataTypesAssignment_2_0() { return cDataTypesAssignment_2_0; }
		
		//DataTypeDefinition
		public RuleCall getDataTypesDataTypeDefinitionParserRuleCall_2_0_0() { return cDataTypesDataTypeDefinitionParserRuleCall_2_0_0; }
		
		//variables+=TypedVariable
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//TypedVariable
		public RuleCall getVariablesTypedVariableParserRuleCall_2_1_0() { return cVariablesTypedVariableParserRuleCall_2_1_0; }
		
		//sentences+=Sentence
		public Assignment getSentencesAssignment_2_2() { return cSentencesAssignment_2_2; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_2_2_0() { return cSentencesSentenceParserRuleCall_2_2_0; }
	}
	public class TypedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TypedVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGeneralPurposeVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBeliefVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* *********************************
		// * KERNEL EPACKAGE
		// * *********************************/ /*
		// * Variables
		// */ TypedVariable datatypes::TypedVariable:
		//	Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//Timer
		public RuleCall getTimerParserRuleCall_1() { return cTimerParserRuleCall_1; }
		
		//GeneralPurposeVariable
		public RuleCall getGeneralPurposeVariableParserRuleCall_2() { return cGeneralPurposeVariableParserRuleCall_2; }
		
		//Context
		public RuleCall getContextParserRuleCall_3() { return cContextParserRuleCall_3; }
		
		//BeliefVariable
		public RuleCall getBeliefVariableParserRuleCall_4() { return cBeliefVariableParserRuleCall_4; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Context");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDerivedContextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Context kernel::Context:
		//	DerivedContext | PrimitiveContext;
		@Override public ParserRule getRule() { return rule; }
		
		//DerivedContext | PrimitiveContext
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DerivedContext
		public RuleCall getDerivedContextParserRuleCall_0() { return cDerivedContextParserRuleCall_0; }
		
		//PrimitiveContext
		public RuleCall getPrimitiveContextParserRuleCall_1() { return cPrimitiveContextParserRuleCall_1; }
	}
	public class PrimitiveContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.PrimitiveContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cContextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationDataTypeDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationAssignment_4.eContents().get(0);
		
		//PrimitiveContext kernel::PrimitiveContext:
		//	description=ElementDescription?
		//	'context' name=ID ':' declaration=DataTypeDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//description=ElementDescription? 'context' name=ID ':' declaration=DataTypeDeclaration
		public Group getGroup() { return cGroup; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0; }
		
		//'context'
		public Keyword getContextKeyword_1() { return cContextKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//declaration=DataTypeDeclaration
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }
		
		//DataTypeDeclaration
		public RuleCall getDeclarationDataTypeDeclarationParserRuleCall_4_0() { return cDeclarationDataTypeDeclarationParserRuleCall_4_0; }
	}
	public class DerivedContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.DerivedContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cContextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationDataTypeDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationAssignment_4.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefinitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefinitionContextPatternParserRuleCall_6_0 = (RuleCall)cDefinitionAssignment_6.eContents().get(0);
		
		//DerivedContext kernel::DerivedContext:
		//	description=ElementDescription?
		//	'context' name=ID ':' declaration=DataTypeDeclaration
		//	':=' definition=ContextPattern;
		@Override public ParserRule getRule() { return rule; }
		
		//description=ElementDescription? 'context' name=ID ':' declaration=DataTypeDeclaration ':=' definition=ContextPattern
		public Group getGroup() { return cGroup; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0; }
		
		//'context'
		public Keyword getContextKeyword_1() { return cContextKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//declaration=DataTypeDeclaration
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }
		
		//DataTypeDeclaration
		public RuleCall getDeclarationDataTypeDeclarationParserRuleCall_4_0() { return cDeclarationDataTypeDeclarationParserRuleCall_4_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_5() { return cColonEqualsSignKeyword_5; }
		
		//definition=ContextPattern
		public Assignment getDefinitionAssignment_6() { return cDefinitionAssignment_6; }
		
		//ContextPattern
		public RuleCall getDefinitionContextPatternParserRuleCall_6_0() { return cDefinitionContextPatternParserRuleCall_6_0; }
	}
	public class GeneralPurposeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.GeneralPurposeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationDataTypeDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefinitionGeneralExpressionParserRuleCall_4_1_0 = (RuleCall)cDefinitionAssignment_4_1.eContents().get(0);
		
		//GeneralPurposeVariable kernel::GeneralPurposeVariable:
		//	'var' name=ID ':' declaration=DataTypeDeclaration (':=' definition=GeneralExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' declaration=DataTypeDeclaration (':=' definition=GeneralExpression)
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//declaration=DataTypeDeclaration
		public Assignment getDeclarationAssignment_3() { return cDeclarationAssignment_3; }
		
		//DataTypeDeclaration
		public RuleCall getDeclarationDataTypeDeclarationParserRuleCall_3_0() { return cDeclarationDataTypeDeclarationParserRuleCall_3_0; }
		
		//':=' definition=GeneralExpression
		public Group getGroup_4() { return cGroup_4; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }
		
		//definition=GeneralExpression
		public Assignment getDefinitionAssignment_4_1() { return cDefinitionAssignment_4_1; }
		
		//GeneralExpression
		public RuleCall getDefinitionGeneralExpressionParserRuleCall_4_1_0() { return cDefinitionGeneralExpressionParserRuleCall_4_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationDataTypeDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitializedToAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitializedToTypedValueParserRuleCall_5_1_0 = (RuleCall)cInitializedToAssignment_5_1.eContents().get(0);
		
		//Parameter kernel::Parameter:
		//	description=ElementDescription?
		//	'param' name=ID ':' declaration=DataTypeDeclaration ('default' initializedTo=TypedValue)?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=ElementDescription? 'param' name=ID ':' declaration=DataTypeDeclaration ('default'
		//initializedTo=TypedValue)?
		public Group getGroup() { return cGroup; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0; }
		
		//'param'
		public Keyword getParamKeyword_1() { return cParamKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//declaration=DataTypeDeclaration
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }
		
		//DataTypeDeclaration
		public RuleCall getDeclarationDataTypeDeclarationParserRuleCall_4_0() { return cDeclarationDataTypeDeclarationParserRuleCall_4_0; }
		
		//('default' initializedTo=TypedValue)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'default'
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }
		
		//initializedTo=TypedValue
		public Assignment getInitializedToAssignment_5_1() { return cInitializedToAssignment_5_1; }
		
		//TypedValue
		public RuleCall getInitializedToTypedValueParserRuleCall_5_1_0() { return cInitializedToTypedValueParserRuleCall_5_1_0; }
	}
	public class TimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Timer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationInbuiltDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cOffsetKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOffsetAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOffsetTimeValueParserRuleCall_3_0_1_0 = (RuleCall)cOffsetAssignment_3_0_1.eContents().get(0);
		private final Assignment cOnceAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cOnceOnetimeKeyword_3_1_0 = (Keyword)cOnceAssignment_3_1.eContents().get(0);
		private final Assignment cPausedAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cPausedPausedKeyword_3_2_0 = (Keyword)cPausedAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cDefinitionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cDefinitionGeneralExpressionParserRuleCall_3_3_1_0 = (RuleCall)cDefinitionAssignment_3_3_1.eContents().get(0);
		
		//Timer kernel::Timer:
		//	'timer' name=ID declaration=InbuiltDeclaration (('offset' offset=TimeValue)?
		//	& once?='onetime'?
		//	& paused?='paused'?
		//	& ':=' definition=GeneralExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//'timer' name=ID declaration=InbuiltDeclaration (('offset' offset=TimeValue)? & once?='onetime'? & paused?='paused'? &
		//':=' definition=GeneralExpression)
		public Group getGroup() { return cGroup; }
		
		//'timer'
		public Keyword getTimerKeyword_0() { return cTimerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declaration=InbuiltDeclaration
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//InbuiltDeclaration
		public RuleCall getDeclarationInbuiltDeclarationParserRuleCall_2_0() { return cDeclarationInbuiltDeclarationParserRuleCall_2_0; }
		
		//('offset' offset=TimeValue)? & once?='onetime'? & paused?='paused'? & ':=' definition=GeneralExpression
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('offset' offset=TimeValue)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'offset'
		public Keyword getOffsetKeyword_3_0_0() { return cOffsetKeyword_3_0_0; }
		
		//offset=TimeValue
		public Assignment getOffsetAssignment_3_0_1() { return cOffsetAssignment_3_0_1; }
		
		//TimeValue
		public RuleCall getOffsetTimeValueParserRuleCall_3_0_1_0() { return cOffsetTimeValueParserRuleCall_3_0_1_0; }
		
		//once?='onetime'?
		public Assignment getOnceAssignment_3_1() { return cOnceAssignment_3_1; }
		
		//'onetime'
		public Keyword getOnceOnetimeKeyword_3_1_0() { return cOnceOnetimeKeyword_3_1_0; }
		
		//paused?='paused'?
		public Assignment getPausedAssignment_3_2() { return cPausedAssignment_3_2; }
		
		//'paused'
		public Keyword getPausedPausedKeyword_3_2_0() { return cPausedPausedKeyword_3_2_0; }
		
		//':=' definition=GeneralExpression
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3_3_0() { return cColonEqualsSignKeyword_3_3_0; }
		
		//definition=GeneralExpression
		public Assignment getDefinitionAssignment_3_3_1() { return cDefinitionAssignment_3_3_1; }
		
		//GeneralExpression
		public RuleCall getDefinitionGeneralExpressionParserRuleCall_3_3_1_0() { return cDefinitionGeneralExpressionParserRuleCall_3_3_1_0; }
	}
	public class BeliefVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.BeliefVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBeliefVariableImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BeliefVariable kernel::BeliefVariable:
		//	BeliefVariableImpl | Property;
		@Override public ParserRule getRule() { return rule; }
		
		//BeliefVariableImpl | Property
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BeliefVariableImpl
		public RuleCall getBeliefVariableImplParserRuleCall_0() { return cBeliefVariableImplParserRuleCall_0; }
		
		//Property
		public RuleCall getPropertyParserRuleCall_1() { return cPropertyParserRuleCall_1; }
	}
	public class BeliefVariableImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.BeliefVariableImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cBeliefvarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationInbuiltDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationAssignment_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cReferenceKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cReferenceAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cReferenceEDoubleParserRuleCall_4_0_1_0 = (RuleCall)cReferenceAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cSurvivalKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSurvivalAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSurvivalTimeValueParserRuleCall_4_1_1_0 = (RuleCall)cSurvivalAssignment_4_1_1.eContents().get(0);
		
		//BeliefVariableImpl kernel::BeliefVariable:
		//	description=ElementDescription?
		//	'beliefvar' name=ID declaration=InbuiltDeclaration (('reference' reference=EDouble)? & ('survival'
		//	survival=TimeValue)?);
		@Override public ParserRule getRule() { return rule; }
		
		//description=ElementDescription? 'beliefvar' name=ID declaration=InbuiltDeclaration (('reference' reference=EDouble)? &
		//('survival' survival=TimeValue)?)
		public Group getGroup() { return cGroup; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0; }
		
		//'beliefvar'
		public Keyword getBeliefvarKeyword_1() { return cBeliefvarKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//declaration=InbuiltDeclaration
		public Assignment getDeclarationAssignment_3() { return cDeclarationAssignment_3; }
		
		//InbuiltDeclaration
		public RuleCall getDeclarationInbuiltDeclarationParserRuleCall_3_0() { return cDeclarationInbuiltDeclarationParserRuleCall_3_0; }
		
		//('reference' reference=EDouble)? & ('survival' survival=TimeValue)?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//('reference' reference=EDouble)?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'reference'
		public Keyword getReferenceKeyword_4_0_0() { return cReferenceKeyword_4_0_0; }
		
		//reference=EDouble
		public Assignment getReferenceAssignment_4_0_1() { return cReferenceAssignment_4_0_1; }
		
		//EDouble
		public RuleCall getReferenceEDoubleParserRuleCall_4_0_1_0() { return cReferenceEDoubleParserRuleCall_4_0_1_0; }
		
		//('survival' survival=TimeValue)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'survival'
		public Keyword getSurvivalKeyword_4_1_0() { return cSurvivalKeyword_4_1_0; }
		
		//survival=TimeValue
		public Assignment getSurvivalAssignment_4_1_1() { return cSurvivalAssignment_4_1_1; }
		
		//TimeValue
		public RuleCall getSurvivalTimeValueParserRuleCall_4_1_1_0() { return cSurvivalTimeValueParserRuleCall_4_1_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDeclarationDataTypeDeclarationParserRuleCall_3_0_1_0 = (RuleCall)cDeclarationAssignment_3_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cTransformationAssignment_3_0_3 = (Assignment)cGroup_3_0.eContents().get(3);
		private final RuleCall cTransformationOutputTransformationParserRuleCall_3_0_3_0 = (RuleCall)cTransformationAssignment_3_0_3.eContents().get(0);
		private final Assignment cDeclarationAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDeclarationInbuiltDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationAssignment_3_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cReferenceKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cReferenceAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cReferenceEDoubleParserRuleCall_4_0_1_0 = (RuleCall)cReferenceAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cSurvivalKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSurvivalAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSurvivalTimeValueParserRuleCall_4_1_1_0 = (RuleCall)cSurvivalAssignment_4_1_1.eContents().get(0);
		
		//Property kernel::Property:
		//	description=ElementDescription?
		//	'property' name=ID (':' declaration=DataTypeDeclaration ':=' transformation=OutputTransformation |
		//	declaration=InbuiltDeclaration) (('reference' reference=EDouble)?
		//	& ('survival' survival=TimeValue)?);
		@Override public ParserRule getRule() { return rule; }
		
		//description=ElementDescription? 'property' name=ID (':' declaration=DataTypeDeclaration ':='
		//transformation=OutputTransformation | declaration=InbuiltDeclaration) (('reference' reference=EDouble)? & ('survival'
		//survival=TimeValue)?)
		public Group getGroup() { return cGroup; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0; }
		
		//'property'
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':' declaration=DataTypeDeclaration ':=' transformation=OutputTransformation | declaration=InbuiltDeclaration
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//':' declaration=DataTypeDeclaration ':=' transformation=OutputTransformation
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//declaration=DataTypeDeclaration
		public Assignment getDeclarationAssignment_3_0_1() { return cDeclarationAssignment_3_0_1; }
		
		//DataTypeDeclaration
		public RuleCall getDeclarationDataTypeDeclarationParserRuleCall_3_0_1_0() { return cDeclarationDataTypeDeclarationParserRuleCall_3_0_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3_0_2() { return cColonEqualsSignKeyword_3_0_2; }
		
		//transformation=OutputTransformation
		public Assignment getTransformationAssignment_3_0_3() { return cTransformationAssignment_3_0_3; }
		
		//OutputTransformation
		public RuleCall getTransformationOutputTransformationParserRuleCall_3_0_3_0() { return cTransformationOutputTransformationParserRuleCall_3_0_3_0; }
		
		//declaration=InbuiltDeclaration
		public Assignment getDeclarationAssignment_3_1() { return cDeclarationAssignment_3_1; }
		
		//InbuiltDeclaration
		public RuleCall getDeclarationInbuiltDeclarationParserRuleCall_3_1_0() { return cDeclarationInbuiltDeclarationParserRuleCall_3_1_0; }
		
		//('reference' reference=EDouble)? & ('survival' survival=TimeValue)?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//('reference' reference=EDouble)?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'reference'
		public Keyword getReferenceKeyword_4_0_0() { return cReferenceKeyword_4_0_0; }
		
		//reference=EDouble
		public Assignment getReferenceAssignment_4_0_1() { return cReferenceAssignment_4_0_1; }
		
		//EDouble
		public RuleCall getReferenceEDoubleParserRuleCall_4_0_1_0() { return cReferenceEDoubleParserRuleCall_4_0_1_0; }
		
		//('survival' survival=TimeValue)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'survival'
		public Keyword getSurvivalKeyword_4_1_0() { return cSurvivalKeyword_4_1_0; }
		
		//survival=TimeValue
		public Assignment getSurvivalAssignment_4_1_1() { return cSurvivalAssignment_4_1_1; }
		
		//TimeValue
		public RuleCall getSurvivalTimeValueParserRuleCall_4_1_1_0() { return cSurvivalTimeValueParserRuleCall_4_1_1_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Sentence");
		private final RuleCall cObservationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*
		// * Sentencies
		// */ Sentence datatypes::Sentence:
		//	Observation;
		@Override public ParserRule getRule() { return rule; }
		
		//Observation
		public RuleCall getObservationParserRuleCall() { return cObservationParserRuleCall; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import kernel::Import:
		//	'import' importURI=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=EString
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }
	}
	public class ObservationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Observation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cObservationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternContextPatternParserRuleCall_4_0 = (RuleCall)cPatternAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cActionsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_5_0_0 = (RuleCall)cActionsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cActionsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_1_1_0 = (RuleCall)cActionsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		
		//Observation kernel::Observation:
		//	description=ElementDescription?
		//	'observation' name=ID ':' pattern=ContextPattern (actions+=Action | '{' actions+=Action+ '}');
		@Override public ParserRule getRule() { return rule; }
		
		//description=ElementDescription? 'observation' name=ID ':' pattern=ContextPattern (actions+=Action | '{' actions+=Action+
		//'}')
		public Group getGroup() { return cGroup; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0; }
		
		//'observation'
		public Keyword getObservationKeyword_1() { return cObservationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//pattern=ContextPattern
		public Assignment getPatternAssignment_4() { return cPatternAssignment_4; }
		
		//ContextPattern
		public RuleCall getPatternContextPatternParserRuleCall_4_0() { return cPatternContextPatternParserRuleCall_4_0; }
		
		//actions+=Action | '{' actions+=Action+ '}'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//actions+=Action
		public Assignment getActionsAssignment_5_0() { return cActionsAssignment_5_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0_0() { return cActionsActionParserRuleCall_5_0_0; }
		
		//'{' actions+=Action+ '}'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_5_1_1() { return cActionsAssignment_5_1_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_1_1_0() { return cActionsActionParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_2() { return cRightCurlyBracketKeyword_5_1_2; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClearEvidenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetEvidenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimerActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action kernel::Action:
		//	SetVariable | ClearEvidence | SetEvidence | TimerAction;
		@Override public ParserRule getRule() { return rule; }
		
		//SetVariable | ClearEvidence | SetEvidence | TimerAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SetVariable
		public RuleCall getSetVariableParserRuleCall_0() { return cSetVariableParserRuleCall_0; }
		
		//ClearEvidence
		public RuleCall getClearEvidenceParserRuleCall_1() { return cClearEvidenceParserRuleCall_1; }
		
		//SetEvidence
		public RuleCall getSetEvidenceParserRuleCall_2() { return cSetEvidenceParserRuleCall_2; }
		
		//TimerAction
		public RuleCall getTimerActionParserRuleCall_3() { return cTimerActionParserRuleCall_3; }
	}
	public class TimerActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TimerAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartTimerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStopTimerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cResumeTimerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TimerAction kernel::TimerAction:
		//	StartTimer | StopTimer | ResumeTimer;
		@Override public ParserRule getRule() { return rule; }
		
		//StartTimer | StopTimer | ResumeTimer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartTimer
		public RuleCall getStartTimerParserRuleCall_0() { return cStartTimerParserRuleCall_0; }
		
		//StopTimer
		public RuleCall getStopTimerParserRuleCall_1() { return cStopTimerParserRuleCall_1; }
		
		//ResumeTimer
		public RuleCall getResumeTimerParserRuleCall_2() { return cResumeTimerParserRuleCall_2; }
	}
	public class SetVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.SetVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableTypedVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableTypedVariableQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cVariableTypedVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionGeneralExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//SetVariable kernel::SetVariable:
		//	'sets' variable=[datatypes::TypedVariable|QualifiedName]
		//	':=' expression=GeneralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'sets' variable=[datatypes::TypedVariable|QualifiedName] ':=' expression=GeneralExpression
		public Group getGroup() { return cGroup; }
		
		//'sets'
		public Keyword getSetsKeyword_0() { return cSetsKeyword_0; }
		
		//variable=[datatypes::TypedVariable|QualifiedName]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[datatypes::TypedVariable|QualifiedName]
		public CrossReference getVariableTypedVariableCrossReference_1_0() { return cVariableTypedVariableCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getVariableTypedVariableQualifiedNameParserRuleCall_1_0_1() { return cVariableTypedVariableQualifiedNameParserRuleCall_1_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//expression=GeneralExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//GeneralExpression
		public RuleCall getExpressionGeneralExpressionParserRuleCall_3_0() { return cExpressionGeneralExpressionParserRuleCall_3_0; }
	}
	public class ClearEvidenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ClearEvidence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClearsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetBeliefVariableCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetBeliefVariableQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetBeliefVariableCrossReference_1_0.eContents().get(1);
		
		//ClearEvidence kernel::ClearEvidence:
		//	'clears' target=[kernel::BeliefVariable|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'clears' target=[kernel::BeliefVariable|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'clears'
		public Keyword getClearsKeyword_0() { return cClearsKeyword_0; }
		
		//target=[kernel::BeliefVariable|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[kernel::BeliefVariable|QualifiedName]
		public CrossReference getTargetBeliefVariableCrossReference_1_0() { return cTargetBeliefVariableCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTargetBeliefVariableQualifiedNameParserRuleCall_1_0_1() { return cTargetBeliefVariableQualifiedNameParserRuleCall_1_0_1; }
	}
	public class SetEvidenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.SetEvidence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInfluenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInfluenceInfluenceEnumEnumRuleCall_0_0 = (RuleCall)cInfluenceAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetBeliefVariableCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetBeliefVariableQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetBeliefVariableCrossReference_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cStrengthAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cStrengthStrengthEnumEnumRuleCall_2_0_0 = (RuleCall)cStrengthAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cSurvivalKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSurvivalAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSurvivalTimeValueParserRuleCall_2_1_1_0 = (RuleCall)cSurvivalAssignment_2_1_1.eContents().get(0);
		
		//SetEvidence kernel::SetEvidence:
		//	influence=InfluenceEnum
		//	target=[kernel::BeliefVariable|QualifiedName] (strength=StrengthEnum? & ('survival' survival=TimeValue)?);
		@Override public ParserRule getRule() { return rule; }
		
		//influence=InfluenceEnum target=[kernel::BeliefVariable|QualifiedName] (strength=StrengthEnum? & ('survival'
		//survival=TimeValue)?)
		public Group getGroup() { return cGroup; }
		
		//influence=InfluenceEnum
		public Assignment getInfluenceAssignment_0() { return cInfluenceAssignment_0; }
		
		//InfluenceEnum
		public RuleCall getInfluenceInfluenceEnumEnumRuleCall_0_0() { return cInfluenceInfluenceEnumEnumRuleCall_0_0; }
		
		//target=[kernel::BeliefVariable|QualifiedName]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[kernel::BeliefVariable|QualifiedName]
		public CrossReference getTargetBeliefVariableCrossReference_1_0() { return cTargetBeliefVariableCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTargetBeliefVariableQualifiedNameParserRuleCall_1_0_1() { return cTargetBeliefVariableQualifiedNameParserRuleCall_1_0_1; }
		
		//strength=StrengthEnum? & ('survival' survival=TimeValue)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//strength=StrengthEnum?
		public Assignment getStrengthAssignment_2_0() { return cStrengthAssignment_2_0; }
		
		//StrengthEnum
		public RuleCall getStrengthStrengthEnumEnumRuleCall_2_0_0() { return cStrengthStrengthEnumEnumRuleCall_2_0_0; }
		
		//('survival' survival=TimeValue)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'survival'
		public Keyword getSurvivalKeyword_2_1_0() { return cSurvivalKeyword_2_1_0; }
		
		//survival=TimeValue
		public Assignment getSurvivalAssignment_2_1_1() { return cSurvivalAssignment_2_1_1; }
		
		//TimeValue
		public RuleCall getSurvivalTimeValueParserRuleCall_2_1_1_0() { return cSurvivalTimeValueParserRuleCall_2_1_1_0; }
	}
	public class StartTimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.StartTimer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTimerTimerCrossReference_1_0 = (CrossReference)cTimerAssignment_1.eContents().get(0);
		private final RuleCall cTimerTimerQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTimerTimerCrossReference_1_0.eContents().get(1);
		
		//StartTimer kernel::StartTimer:
		//	'starts' timer=[kernel::Timer|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'starts' timer=[kernel::Timer|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'starts'
		public Keyword getStartsKeyword_0() { return cStartsKeyword_0; }
		
		//timer=[kernel::Timer|QualifiedName]
		public Assignment getTimerAssignment_1() { return cTimerAssignment_1; }
		
		//[kernel::Timer|QualifiedName]
		public CrossReference getTimerTimerCrossReference_1_0() { return cTimerTimerCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTimerTimerQualifiedNameParserRuleCall_1_0_1() { return cTimerTimerQualifiedNameParserRuleCall_1_0_1; }
	}
	public class StopTimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.StopTimer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTimerTimerCrossReference_1_0 = (CrossReference)cTimerAssignment_1.eContents().get(0);
		private final RuleCall cTimerTimerQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTimerTimerCrossReference_1_0.eContents().get(1);
		
		//StopTimer kernel::StopTimer:
		//	'stops' timer=[kernel::Timer|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'stops' timer=[kernel::Timer|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'stops'
		public Keyword getStopsKeyword_0() { return cStopsKeyword_0; }
		
		//timer=[kernel::Timer|QualifiedName]
		public Assignment getTimerAssignment_1() { return cTimerAssignment_1; }
		
		//[kernel::Timer|QualifiedName]
		public CrossReference getTimerTimerCrossReference_1_0() { return cTimerTimerCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTimerTimerQualifiedNameParserRuleCall_1_0_1() { return cTimerTimerQualifiedNameParserRuleCall_1_0_1; }
	}
	public class ResumeTimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ResumeTimer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResumesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTimerTimerCrossReference_1_0 = (CrossReference)cTimerAssignment_1.eContents().get(0);
		private final RuleCall cTimerTimerQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTimerTimerCrossReference_1_0.eContents().get(1);
		
		//ResumeTimer kernel::ResumeTimer:
		//	'resumes' timer=[kernel::Timer|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'resumes' timer=[kernel::Timer|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'resumes'
		public Keyword getResumesKeyword_0() { return cResumesKeyword_0; }
		
		//timer=[kernel::Timer|QualifiedName]
		public Assignment getTimerAssignment_1() { return cTimerAssignment_1; }
		
		//[kernel::Timer|QualifiedName]
		public CrossReference getTimerTimerCrossReference_1_0() { return cTimerTimerCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTimerTimerQualifiedNameParserRuleCall_1_0_1() { return cTimerTimerQualifiedNameParserRuleCall_1_0_1; }
	}
	public class DataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.DataTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataTypeDataTypeParserRuleCall_3_0 = (RuleCall)cDataTypeAssignment_3.eContents().get(0);
		
		///* *********************************
		// * DATATYPE EPACKAGE
		// * *********************************
		//
		///* 
		// * Data type definitions
		// */ DataTypeDefinition datatypes::DataTypeDefinition:
		//	'type' name=EString ':' dataType=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=EString ':' dataType=DataType
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//dataType=DataType
		public Assignment getDataTypeAssignment_3() { return cDataTypeAssignment_3; }
		
		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_3_0() { return cDataTypeDataTypeParserRuleCall_3_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumericTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnitMeasuredTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//DataType datatypes::DataType:
		//	BooleanType | EnumType | EventType | NumericType | UnitMeasuredType | TimeType;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanType | EnumType | EventType | NumericType | UnitMeasuredType | TimeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_0() { return cBooleanTypeParserRuleCall_0; }
		
		//EnumType
		public RuleCall getEnumTypeParserRuleCall_1() { return cEnumTypeParserRuleCall_1; }
		
		//EventType
		public RuleCall getEventTypeParserRuleCall_2() { return cEventTypeParserRuleCall_2; }
		
		//NumericType
		public RuleCall getNumericTypeParserRuleCall_3() { return cNumericTypeParserRuleCall_3; }
		
		//UnitMeasuredType
		public RuleCall getUnitMeasuredTypeParserRuleCall_4() { return cUnitMeasuredTypeParserRuleCall_4; }
		
		//TimeType
		public RuleCall getTimeTypeParserRuleCall_5() { return cTimeTypeParserRuleCall_5; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_1_0 = (RuleCall)cCardinalityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//BooleanType datatypes::BooleanType:
		//	{datatypes::BooleanType}
		//	'boolean' ('[' cardinality=INT ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::BooleanType} 'boolean' ('[' cardinality=INT ']')?
		public Group getGroup() { return cGroup; }
		
		//{datatypes::BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2_1() { return cCardinalityAssignment_2_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_1_0() { return cCardinalityINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_1_1_0 = (RuleCall)cCardinalityAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_4_1_0 = (RuleCall)cLiteralsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumType datatypes::EnumType:
		//	'enum' ('[' cardinality=INT ']')?
		//	'{'
		//	literals+=EnumLiteral (',' literals+=EnumLiteral)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' ('[' cardinality=INT ']')? '{' literals+=EnumLiteral (',' literals+=EnumLiteral)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_1_1() { return cCardinalityAssignment_1_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_1_1_0() { return cCardinalityINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//literals+=EnumLiteral
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }
		
		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_3_0() { return cLiteralsEnumLiteralParserRuleCall_3_0; }
		
		//(',' literals+=EnumLiteral)+
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//literals+=EnumLiteral
		public Assignment getLiteralsAssignment_4_1() { return cLiteralsAssignment_4_1; }
		
		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_4_1_0() { return cLiteralsEnumLiteralParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumLiteral datatypes::EnumLiteral:
		//	{datatypes::EnumLiteral} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::EnumLiteral} name=ID
		public Group getGroup() { return cGroup; }
		
		//{datatypes::EnumLiteral}
		public Action getEnumLiteralAction_0() { return cEnumLiteralAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EventTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EventType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventtypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_1_0 = (RuleCall)cCardinalityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EventType datatypes::EventType:
		//	{datatypes::EventType}
		//	'eventtype' ('[' cardinality=INT ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::EventType} 'eventtype' ('[' cardinality=INT ']')?
		public Group getGroup() { return cGroup; }
		
		//{datatypes::EventType}
		public Action getEventTypeAction_0() { return cEventTypeAction_0; }
		
		//'eventtype'
		public Keyword getEventtypeKeyword_1() { return cEventtypeKeyword_1; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2_1() { return cCardinalityAssignment_2_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_1_0() { return cCardinalityINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NumericType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumericTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_1_0 = (RuleCall)cCardinalityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsNumericTypeConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		
		//NumericType datatypes::NumericType:
		//	{datatypes::NumericType}
		//	'number' ('[' cardinality=INT ']')?
		//	constraints+=NumericTypeConstraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::NumericType} 'number' ('[' cardinality=INT ']')? constraints+=NumericTypeConstraint*
		public Group getGroup() { return cGroup; }
		
		//{datatypes::NumericType}
		public Action getNumericTypeAction_0() { return cNumericTypeAction_0; }
		
		//'number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2_1() { return cCardinalityAssignment_2_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_1_0() { return cCardinalityINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//constraints+=NumericTypeConstraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//NumericTypeConstraint
		public RuleCall getConstraintsNumericTypeConstraintParserRuleCall_3_0() { return cConstraintsNumericTypeConstraintParserRuleCall_3_0; }
	}
	public class NumericTypeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NumericTypeConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLowerBoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpperBoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericTypeConstraint datatypes::NumericTypeConstraint:
		//	LowerBound | UpperBound;
		@Override public ParserRule getRule() { return rule; }
		
		//LowerBound | UpperBound
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LowerBound
		public RuleCall getLowerBoundParserRuleCall_0() { return cLowerBoundParserRuleCall_0; }
		
		//UpperBound
		public RuleCall getUpperBoundParserRuleCall_1() { return cUpperBoundParserRuleCall_1; }
	}
	public class LowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.LowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLowerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LowerBound datatypes::LowerBound:
		//	'lower' value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'lower' value=EDouble
		public Group getGroup() { return cGroup; }
		
		//'lower'
		public Keyword getLowerKeyword_0() { return cLowerKeyword_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}
	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.UpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UpperBound datatypes::UpperBound:
		//	'upper' value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'upper' value=EDouble
		public Group getGroup() { return cGroup; }
		
		//'upper'
		public Keyword getUpperKeyword_0() { return cUpperKeyword_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}
	public class UnitMeasuredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.UnitMeasuredType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitMeasuredTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_1_0 = (RuleCall)cCardinalityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsNumericTypeConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		private final Keyword cUnitKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUnitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitEStringParserRuleCall_5_0 = (RuleCall)cUnitAssignment_5.eContents().get(0);
		private final Assignment cConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintsNumericTypeConstraintParserRuleCall_6_0 = (RuleCall)cConstraintsAssignment_6.eContents().get(0);
		
		//UnitMeasuredType datatypes::UnitMeasuredType:
		//	{datatypes::UnitMeasuredType}
		//	'number' ('[' cardinality=INT ']')?
		//	constraints+=NumericTypeConstraint*
		//	'unit' unit=EString
		//	constraints+=NumericTypeConstraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::UnitMeasuredType} 'number' ('[' cardinality=INT ']')? constraints+=NumericTypeConstraint* 'unit'
		//unit=EString constraints+=NumericTypeConstraint*
		public Group getGroup() { return cGroup; }
		
		//{datatypes::UnitMeasuredType}
		public Action getUnitMeasuredTypeAction_0() { return cUnitMeasuredTypeAction_0; }
		
		//'number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2_1() { return cCardinalityAssignment_2_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_1_0() { return cCardinalityINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//constraints+=NumericTypeConstraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//NumericTypeConstraint
		public RuleCall getConstraintsNumericTypeConstraintParserRuleCall_3_0() { return cConstraintsNumericTypeConstraintParserRuleCall_3_0; }
		
		//'unit'
		public Keyword getUnitKeyword_4() { return cUnitKeyword_4; }
		
		//unit=EString
		public Assignment getUnitAssignment_5() { return cUnitAssignment_5; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_5_0() { return cUnitEStringParserRuleCall_5_0; }
		
		//constraints+=NumericTypeConstraint*
		public Assignment getConstraintsAssignment_6() { return cConstraintsAssignment_6; }
		
		//NumericTypeConstraint
		public RuleCall getConstraintsNumericTypeConstraintParserRuleCall_6_0() { return cConstraintsNumericTypeConstraintParserRuleCall_6_0; }
	}
	public class TimeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TimeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_2_1_0 = (RuleCall)cCardinalityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//TimeType datatypes::TimeType:
		//	{datatypes::TimeType}
		//	'time' ('[' cardinality=INT ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::TimeType} 'time' ('[' cardinality=INT ']')?
		public Group getGroup() { return cGroup; }
		
		//{datatypes::TimeType}
		public Action getTimeTypeAction_0() { return cTimeTypeAction_0; }
		
		//'time'
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_2_1() { return cCardinalityAssignment_2_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_2_1_0() { return cCardinalityINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class TypedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TypedValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Typed Values
		// */ TypedValue datatypes::TypedValue:
		//	SingleValue | ArrayValue;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleValue | ArrayValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleValue
		public RuleCall getSingleValueParserRuleCall_0() { return cSingleValueParserRuleCall_0; }
		
		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_1() { return cArrayValueParserRuleCall_1; }
	}
	public class SingleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.SingleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEventValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SingleValue datatypes::SingleValue:
		//	BooleanValue | EnumValue | NumericValue | EventValue;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanValue | EnumValue | NumericValue | EventValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }
		
		//EnumValue
		public RuleCall getEnumValueParserRuleCall_1() { return cEnumValueParserRuleCall_1; }
		
		//NumericValue
		public RuleCall getNumericValueParserRuleCall_2() { return cNumericValueParserRuleCall_2; }
		
		//EventValue
		public RuleCall getEventValueParserRuleCall_3() { return cEventValueParserRuleCall_3; }
	}
	public class EventValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EventValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EventValue datatypes::EventValue:
		//	{datatypes::EventValue}
		//	'event';
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::EventValue} 'event'
		public Group getGroup() { return cGroup; }
		
		//{datatypes::EventValue}
		public Action getEventValueAction_0() { return cEventValueAction_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BooleanValue datatypes::BooleanValue:
		//	{datatypes::BooleanValue} value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::BooleanValue} value=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{datatypes::BooleanValue}
		public Action getBooleanValueAction_0() { return cBooleanValueAction_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_0() { return cValueEBooleanParserRuleCall_1_0; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueEnumLiteralCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueEnumLiteralLiteralQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cValueEnumLiteralCrossReference_1_0.eContents().get(1);
		
		//EnumValue datatypes::EnumValue:
		//	{datatypes::EnumValue} value=[datatypes::EnumLiteral|LiteralQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::EnumValue} value=[datatypes::EnumLiteral|LiteralQualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{datatypes::EnumValue}
		public Action getEnumValueAction_0() { return cEnumValueAction_0; }
		
		//value=[datatypes::EnumLiteral|LiteralQualifiedName]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[datatypes::EnumLiteral|LiteralQualifiedName]
		public CrossReference getValueEnumLiteralCrossReference_1_0() { return cValueEnumLiteralCrossReference_1_0; }
		
		//LiteralQualifiedName
		public RuleCall getValueEnumLiteralLiteralQualifiedNameParserRuleCall_1_0_1() { return cValueEnumLiteralLiteralQualifiedNameParserRuleCall_1_0_1; }
	}
	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NumericValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitMeasuredValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericValue datatypes::NumericValue:
		//	NumericValue_Impl | UnitMeasuredValue;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericValue_Impl | UnitMeasuredValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericValue_Impl
		public RuleCall getNumericValue_ImplParserRuleCall_0() { return cNumericValue_ImplParserRuleCall_0; }
		
		//UnitMeasuredValue
		public RuleCall getUnitMeasuredValueParserRuleCall_1() { return cUnitMeasuredValueParserRuleCall_1; }
	}
	public class UnitMeasuredValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.UnitMeasuredValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitMeasuredValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitMeasuredValue datatypes::UnitMeasuredValue:
		//	UnitMeasuredValue_Impl | TimeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitMeasuredValue_Impl | TimeValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnitMeasuredValue_Impl
		public RuleCall getUnitMeasuredValue_ImplParserRuleCall_0() { return cUnitMeasuredValue_ImplParserRuleCall_0; }
		
		//TimeValue
		public RuleCall getTimeValueParserRuleCall_1() { return cTimeValueParserRuleCall_1; }
	}
	public class NumericValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NumericValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumericValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumericValue_Impl datatypes::NumericValue:
		//	{datatypes::NumericValue} value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::NumericValue} value=EDouble
		public Group getGroup() { return cGroup; }
		
		//{datatypes::NumericValue}
		public Action getNumericValueAction_0() { return cNumericValueAction_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}
	public class UnitMeasuredValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.UnitMeasuredValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitMeasuredValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitEStringParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//UnitMeasuredValue_Impl datatypes::UnitMeasuredValue:
		//	{datatypes::UnitMeasuredValue} value=EDouble unit=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::UnitMeasuredValue} value=EDouble unit=EString
		public Group getGroup() { return cGroup; }
		
		//{datatypes::UnitMeasuredValue}
		public Action getUnitMeasuredValueAction_0() { return cUnitMeasuredValueAction_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_2_0() { return cUnitEStringParserRuleCall_2_0; }
	}
	public class TimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitEnumParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//TimeValue datatypes::TimeValue:
		//	{datatypes::TimeValue} value=EDouble unit=TimeUnitEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::TimeValue} value=EDouble unit=TimeUnitEnum
		public Group getGroup() { return cGroup; }
		
		//{datatypes::TimeValue}
		public Action getTimeValueAction_0() { return cTimeValueAction_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
		
		//unit=TimeUnitEnum
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//TimeUnitEnum
		public RuleCall getUnitTimeUnitEnumParserRuleCall_2_0() { return cUnitTimeUnitEnumParserRuleCall_2_0; }
	}
	public class TimeUnitEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TimeUnitEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMillisecondsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSecondsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinutesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHoursKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDaysKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMillisecondKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSecondKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMinuteKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cHourKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDayKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//TimeUnitEnum:
		//	'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days'
		//	| 'millisecond' | 'second' | 'minute' | 'hour' | 'day';
		@Override public ParserRule getRule() { return rule; }
		
		//'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days' | 'millisecond' | 'second' | 'minute' | 'hour' | 'day'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_0() { return cMillisecondsKeyword_0; }
		
		//'seconds'
		public Keyword getSecondsKeyword_1() { return cSecondsKeyword_1; }
		
		//'minutes'
		public Keyword getMinutesKeyword_2() { return cMinutesKeyword_2; }
		
		//'hours'
		public Keyword getHoursKeyword_3() { return cHoursKeyword_3; }
		
		//'days'
		public Keyword getDaysKeyword_4() { return cDaysKeyword_4; }
		
		//'millisecond'
		public Keyword getMillisecondKeyword_5() { return cMillisecondKeyword_5; }
		
		//'second'
		public Keyword getSecondKeyword_6() { return cSecondKeyword_6; }
		
		//'minute'
		public Keyword getMinuteKeyword_7() { return cMinuteKeyword_7; }
		
		//'hour'
		public Keyword getHourKeyword_8() { return cHourKeyword_8; }
		
		//'day'
		public Keyword getDayKeyword_9() { return cDayKeyword_9; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ArrayValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericArrayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArrayValue datatypes::ArrayValue:
		//	NumericArray | BooleanArray | EnumArray;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericArray | BooleanArray | EnumArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericArray
		public RuleCall getNumericArrayParserRuleCall_0() { return cNumericArrayParserRuleCall_0; }
		
		//BooleanArray
		public RuleCall getBooleanArrayParserRuleCall_1() { return cBooleanArrayParserRuleCall_1; }
		
		//EnumArray
		public RuleCall getEnumArrayParserRuleCall_2() { return cEnumArrayParserRuleCall_2; }
	}
	public class BooleanArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.BooleanArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesBooleanValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesBooleanValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BooleanArray datatypes::ArrayValue:
		//	'[' values+=BooleanValue (',' values+=BooleanValue)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=BooleanValue (',' values+=BooleanValue)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=BooleanValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//BooleanValue
		public RuleCall getValuesBooleanValueParserRuleCall_1_0() { return cValuesBooleanValueParserRuleCall_1_0; }
		
		//(',' values+=BooleanValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=BooleanValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//BooleanValue
		public RuleCall getValuesBooleanValueParserRuleCall_2_1_0() { return cValuesBooleanValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EnumArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EnumArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesEnumValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesEnumValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumArray datatypes::ArrayValue:
		//	'[' values+=EnumValue (',' values+=EnumValue)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=EnumValue (',' values+=EnumValue)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=EnumValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_1_0() { return cValuesEnumValueParserRuleCall_1_0; }
		
		//(',' values+=EnumValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=EnumValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_2_1_0() { return cValuesEnumValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NumericArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NumericArray");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericArray_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitMeasuredArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericArray datatypes::ArrayValue:
		//	NumericArray_Impl | UnitMeasuredArray;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericArray_Impl | UnitMeasuredArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericArray_Impl
		public RuleCall getNumericArray_ImplParserRuleCall_0() { return cNumericArray_ImplParserRuleCall_0; }
		
		//UnitMeasuredArray
		public RuleCall getUnitMeasuredArrayParserRuleCall_1() { return cUnitMeasuredArrayParserRuleCall_1; }
	}
	public class UnitMeasuredArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.UnitMeasuredArray");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitMeasuredArray_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitMeasuredArray datatypes::ArrayValue:
		//	UnitMeasuredArray_Impl | TimeArray;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitMeasuredArray_Impl | TimeArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnitMeasuredArray_Impl
		public RuleCall getUnitMeasuredArray_ImplParserRuleCall_0() { return cUnitMeasuredArray_ImplParserRuleCall_0; }
		
		//TimeArray
		public RuleCall getTimeArrayParserRuleCall_1() { return cTimeArrayParserRuleCall_1; }
	}
	public class NumericArray_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NumericArray_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesNumericValue_ImplParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesNumericValue_ImplParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NumericArray_Impl datatypes::ArrayValue:
		//	'[' values+=NumericValue_Impl (',' values+=NumericValue_Impl)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=NumericValue_Impl (',' values+=NumericValue_Impl)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=NumericValue_Impl
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//NumericValue_Impl
		public RuleCall getValuesNumericValue_ImplParserRuleCall_1_0() { return cValuesNumericValue_ImplParserRuleCall_1_0; }
		
		//(',' values+=NumericValue_Impl)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=NumericValue_Impl
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//NumericValue_Impl
		public RuleCall getValuesNumericValue_ImplParserRuleCall_2_1_0() { return cValuesNumericValue_ImplParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class UnitMeasuredArray_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.UnitMeasuredArray_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesUnitMeasuredValue_ImplParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesUnitMeasuredValue_ImplParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnitMeasuredArray_Impl datatypes::ArrayValue:
		//	'[' values+=UnitMeasuredValue_Impl (',' values+=UnitMeasuredValue_Impl)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=UnitMeasuredValue_Impl (',' values+=UnitMeasuredValue_Impl)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=UnitMeasuredValue_Impl
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//UnitMeasuredValue_Impl
		public RuleCall getValuesUnitMeasuredValue_ImplParserRuleCall_1_0() { return cValuesUnitMeasuredValue_ImplParserRuleCall_1_0; }
		
		//(',' values+=UnitMeasuredValue_Impl)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=UnitMeasuredValue_Impl
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//UnitMeasuredValue_Impl
		public RuleCall getValuesUnitMeasuredValue_ImplParserRuleCall_2_1_0() { return cValuesUnitMeasuredValue_ImplParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class TimeArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.TimeArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesTimeValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesTimeValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TimeArray datatypes::ArrayValue:
		//	'[' values+=TimeValue (',' values+=TimeValue)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=TimeValue (',' values+=TimeValue)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=TimeValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//TimeValue
		public RuleCall getValuesTimeValueParserRuleCall_1_0() { return cValuesTimeValueParserRuleCall_1_0; }
		
		//(',' values+=TimeValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=TimeValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//TimeValue
		public RuleCall getValuesTimeValueParserRuleCall_2_1_0() { return cValuesTimeValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class DataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.DataTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInbuiltDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferencedDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContainedDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * Typed Variables
		// */ DataTypeDeclaration datatypes::DataTypeDeclaration:
		//	InbuiltDeclaration | ReferencedDeclaration | ContainedDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//InbuiltDeclaration | ReferencedDeclaration | ContainedDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InbuiltDeclaration
		public RuleCall getInbuiltDeclarationParserRuleCall_0() { return cInbuiltDeclarationParserRuleCall_0; }
		
		//ReferencedDeclaration
		public RuleCall getReferencedDeclarationParserRuleCall_1() { return cReferencedDeclarationParserRuleCall_1; }
		
		//ContainedDeclaration
		public RuleCall getContainedDeclarationParserRuleCall_2() { return cContainedDeclarationParserRuleCall_2; }
	}
	public class ContainedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ContainedDeclaration");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ContainedDeclaration datatypes::ContainedDeclaration:
		//	type=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0() { return cTypeDataTypeParserRuleCall_0; }
	}
	public class InbuiltDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.InbuiltDeclaration");
		private final Action cInbuiltDeclarationAction = (Action)rule.eContents().get(1);
		
		//InbuiltDeclaration datatypes::InbuiltDeclaration:
		//	{datatypes::InbuiltDeclaration};
		@Override public ParserRule getRule() { return rule; }
		
		//{datatypes::InbuiltDeclaration}
		public Action getInbuiltDeclarationAction() { return cInbuiltDeclarationAction; }
	}
	public class ReferencedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ReferencedDeclaration");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeDataTypeDefinitionCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeDataTypeDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cTypeDataTypeDefinitionCrossReference_0.eContents().get(1);
		
		//ReferencedDeclaration datatypes::ReferencedDeclaration:
		//	type=[datatypes::DataTypeDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[datatypes::DataTypeDefinition]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[datatypes::DataTypeDefinition]
		public CrossReference getTypeDataTypeDefinitionCrossReference_0() { return cTypeDataTypeDefinitionCrossReference_0; }
		
		//ID
		public RuleCall getTypeDataTypeDefinitionIDTerminalRuleCall_0_1() { return cTypeDataTypeDefinitionIDTerminalRuleCall_0_1; }
	}
	public class GeneralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.GeneralExpression");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		///* *********************************
		// * EXPRESSIONS EPACKAGE
		// * *********************************/ GeneralExpression expressions::GeneralExpression:
		//	term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}
	public class OutputTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.OutputTransformation");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//OutputTransformation expressions::OutputTransformation:
		//	term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}
	public class ContextPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ContextPattern");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//ContextPattern expressions::ContextPattern:
		//	term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnceTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Term expressions::Term:
		//	OnceTerm | WhileTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//OnceTerm | WhileTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OnceTerm
		public RuleCall getOnceTermParserRuleCall_0() { return cOnceTermParserRuleCall_0; }
		
		//WhileTerm
		public RuleCall getWhileTermParserRuleCall_1() { return cWhileTermParserRuleCall_1; }
	}
	public class OnceTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.OnceTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermWhileTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		///*
		// * Event Pattern Operators
		// */ //OnceTerm returns expressions::Term:
		////	WhileTerm
		////	('once' {expressions::OnceTerm.term=current})?;
		//OnceTerm expressions::OnceTerm:
		//	'once' term=WhileTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//'once' term=WhileTerm
		public Group getGroup() { return cGroup; }
		
		//'once'
		public Keyword getOnceKeyword_0() { return cOnceKeyword_0; }
		
		//term=WhileTerm
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }
		
		//WhileTerm
		public RuleCall getTermWhileTermParserRuleCall_1_0() { return cTermWhileTermParserRuleCall_1_0; }
	}
	public class WhileTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.WhileTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRepetionTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cWhileTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightOrBooleanTermParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//WhileTerm expressions::Term:
		//	RepetionTerm ({expressions::WhileTerm.left=current} 'while' '(' right=OrBooleanTerm ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//RepetionTerm ({expressions::WhileTerm.left=current} 'while' '(' right=OrBooleanTerm ')')?
		public Group getGroup() { return cGroup; }
		
		//RepetionTerm
		public RuleCall getRepetionTermParserRuleCall_0() { return cRepetionTermParserRuleCall_0; }
		
		//({expressions::WhileTerm.left=current} 'while' '(' right=OrBooleanTerm ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::WhileTerm.left=current}
		public Action getWhileTermLeftAction_1_0() { return cWhileTermLeftAction_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_1_1() { return cWhileKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//right=OrBooleanTerm
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//OrBooleanTerm
		public RuleCall getRightOrBooleanTermParserRuleCall_1_3_0() { return cRightOrBooleanTermParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class RepetionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.RepetionTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSequenceTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cRepeatTermTermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cRepeatKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cNrepAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cNrepINTTerminalRuleCall_1_0_3_0 = (RuleCall)cNrepAssignment_1_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cRangeTermTermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cRangeKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cLowerBoundAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cLowerBoundINTTerminalRuleCall_1_1_3_0 = (RuleCall)cLowerBoundAssignment_1_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cUpperBoundAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final RuleCall cUpperBoundINTTerminalRuleCall_1_1_5_0 = (RuleCall)cUpperBoundAssignment_1_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		
		//RepetionTerm expressions::Term:
		//	SequenceTerm ({expressions::RepeatTerm.term=current} 'repeat' '(' nrep=INT ')' | {expressions::RangeTerm.term=current}
		//	'range' '(' lowerBound=INT ',' upperBound=INT ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceTerm ({expressions::RepeatTerm.term=current} 'repeat' '(' nrep=INT ')' | {expressions::RangeTerm.term=current}
		//'range' '(' lowerBound=INT ',' upperBound=INT ')')?
		public Group getGroup() { return cGroup; }
		
		//SequenceTerm
		public RuleCall getSequenceTermParserRuleCall_0() { return cSequenceTermParserRuleCall_0; }
		
		//({expressions::RepeatTerm.term=current} 'repeat' '(' nrep=INT ')' | {expressions::RangeTerm.term=current} 'range' '('
		//lowerBound=INT ',' upperBound=INT ')')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{expressions::RepeatTerm.term=current} 'repeat' '(' nrep=INT ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{expressions::RepeatTerm.term=current}
		public Action getRepeatTermTermAction_1_0_0() { return cRepeatTermTermAction_1_0_0; }
		
		//'repeat'
		public Keyword getRepeatKeyword_1_0_1() { return cRepeatKeyword_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_2() { return cLeftParenthesisKeyword_1_0_2; }
		
		//nrep=INT
		public Assignment getNrepAssignment_1_0_3() { return cNrepAssignment_1_0_3; }
		
		//INT
		public RuleCall getNrepINTTerminalRuleCall_1_0_3_0() { return cNrepINTTerminalRuleCall_1_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }
		
		//{expressions::RangeTerm.term=current} 'range' '(' lowerBound=INT ',' upperBound=INT ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{expressions::RangeTerm.term=current}
		public Action getRangeTermTermAction_1_1_0() { return cRangeTermTermAction_1_1_0; }
		
		//'range'
		public Keyword getRangeKeyword_1_1_1() { return cRangeKeyword_1_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_2() { return cLeftParenthesisKeyword_1_1_2; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_1_1_3() { return cLowerBoundAssignment_1_1_3; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_1_1_3_0() { return cLowerBoundINTTerminalRuleCall_1_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_4() { return cCommaKeyword_1_1_4; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_1_1_5() { return cUpperBoundAssignment_1_1_5; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_1_1_5_0() { return cUpperBoundINTTerminalRuleCall_1_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_6() { return cRightParenthesisKeyword_1_1_6; }
	}
	public class SequenceTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.SequenceTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrEventTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFollowedByTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionalTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SequenceTerm expressions::Term:
		//	OrEventTerm ({expressions::FollowedByTerm.left=current} '->'
		//	right=ConditionalTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OrEventTerm ({expressions::FollowedByTerm.left=current} '->' right=ConditionalTerm)*
		public Group getGroup() { return cGroup; }
		
		//OrEventTerm
		public RuleCall getOrEventTermParserRuleCall_0() { return cOrEventTermParserRuleCall_0; }
		
		//({expressions::FollowedByTerm.left=current} '->' right=ConditionalTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::FollowedByTerm.left=current}
		public Action getFollowedByTermLeftAction_1_0() { return cFollowedByTermLeftAction_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//right=ConditionalTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConditionalTerm
		public RuleCall getRightConditionalTermParserRuleCall_1_2_0() { return cRightConditionalTermParserRuleCall_1_2_0; }
	}
	public class OrEventTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.OrEventTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndEventTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrEventTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndEventTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrEventTerm expressions::Term:
		//	AndEventTerm ({expressions::OrEventTerm.left=current} 'or' right=AndEventTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndEventTerm ({expressions::OrEventTerm.left=current} 'or' right=AndEventTerm)*
		public Group getGroup() { return cGroup; }
		
		//AndEventTerm
		public RuleCall getAndEventTermParserRuleCall_0() { return cAndEventTermParserRuleCall_0; }
		
		//({expressions::OrEventTerm.left=current} 'or' right=AndEventTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::OrEventTerm.left=current}
		public Action getOrEventTermLeftAction_1_0() { return cOrEventTermLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=AndEventTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndEventTerm
		public RuleCall getRightAndEventTermParserRuleCall_1_2_0() { return cRightAndEventTermParserRuleCall_1_2_0; }
	}
	public class AndEventTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.AndEventTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNotEventTermParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConditionalTermParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndEventTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cRightAlternatives_1_2_0 = (Alternatives)cRightAssignment_1_2.eContents().get(0);
		private final RuleCall cRightNotEventTermParserRuleCall_1_2_0_0 = (RuleCall)cRightAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cRightConditionalTermParserRuleCall_1_2_0_1 = (RuleCall)cRightAlternatives_1_2_0.eContents().get(1);
		
		//AndEventTerm expressions::Term:
		//	(NotEventTerm | ConditionalTerm) ({expressions::AndEventTerm.left=current} 'and' right=(NotEventTerm |
		//	ConditionalTerm))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(NotEventTerm | ConditionalTerm) ({expressions::AndEventTerm.left=current} 'and' right=(NotEventTerm |
		//ConditionalTerm))*
		public Group getGroup() { return cGroup; }
		
		//NotEventTerm | ConditionalTerm
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NotEventTerm
		public RuleCall getNotEventTermParserRuleCall_0_0() { return cNotEventTermParserRuleCall_0_0; }
		
		//ConditionalTerm
		public RuleCall getConditionalTermParserRuleCall_0_1() { return cConditionalTermParserRuleCall_0_1; }
		
		//({expressions::AndEventTerm.left=current} 'and' right=(NotEventTerm | ConditionalTerm))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::AndEventTerm.left=current}
		public Action getAndEventTermLeftAction_1_0() { return cAndEventTermLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=(NotEventTerm | ConditionalTerm)
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//(NotEventTerm | ConditionalTerm)
		public Alternatives getRightAlternatives_1_2_0() { return cRightAlternatives_1_2_0; }
		
		//NotEventTerm
		public RuleCall getRightNotEventTermParserRuleCall_1_2_0_0() { return cRightNotEventTermParserRuleCall_1_2_0_0; }
		
		//ConditionalTerm
		public RuleCall getRightConditionalTermParserRuleCall_1_2_0_1() { return cRightConditionalTermParserRuleCall_1_2_0_1; }
	}
	public class NotEventTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NotEventTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotEventTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermConditionalTermParserRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		
		//NotEventTerm expressions::Term:
		//	{expressions::NotEventTerm}
		//	'not' term=ConditionalTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//{expressions::NotEventTerm} 'not' term=ConditionalTerm
		public Group getGroup() { return cGroup; }
		
		//{expressions::NotEventTerm}
		public Action getNotEventTermAction_0() { return cNotEventTermAction_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
		
		//term=ConditionalTerm
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//ConditionalTerm
		public RuleCall getTermConditionalTermParserRuleCall_2_0() { return cTermConditionalTermParserRuleCall_2_0; }
	}
	public class ConditionalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ConditionalTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrBooleanTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalTermTermsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTermsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTermsOrBooleanTermParserRuleCall_1_2_0 = (RuleCall)cTermsAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTermsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTermsConditionalTermParserRuleCall_1_4_0 = (RuleCall)cTermsAssignment_1_4.eContents().get(0);
		
		///*
		// * Conditional Operator 
		// */ ConditionalTerm expressions::Term:
		//	OrBooleanTerm ({expressions::ConditionalTerm.terms+=current} '?' terms+=OrBooleanTerm ':' terms+=ConditionalTerm)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrBooleanTerm ({expressions::ConditionalTerm.terms+=current} '?' terms+=OrBooleanTerm ':' terms+=ConditionalTerm)?
		public Group getGroup() { return cGroup; }
		
		//OrBooleanTerm
		public RuleCall getOrBooleanTermParserRuleCall_0() { return cOrBooleanTermParserRuleCall_0; }
		
		//({expressions::ConditionalTerm.terms+=current} '?' terms+=OrBooleanTerm ':' terms+=ConditionalTerm)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::ConditionalTerm.terms+=current}
		public Action getConditionalTermTermsAction_1_0() { return cConditionalTermTermsAction_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//terms+=OrBooleanTerm
		public Assignment getTermsAssignment_1_2() { return cTermsAssignment_1_2; }
		
		//OrBooleanTerm
		public RuleCall getTermsOrBooleanTermParserRuleCall_1_2_0() { return cTermsOrBooleanTermParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//terms+=ConditionalTerm
		public Assignment getTermsAssignment_1_4() { return cTermsAssignment_1_4; }
		
		//ConditionalTerm
		public RuleCall getTermsConditionalTermParserRuleCall_1_4_0() { return cTermsConditionalTermParserRuleCall_1_4_0; }
	}
	public class OrBooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.OrBooleanTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndBooleanTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrBooleanTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndBooleanTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///*
		// * Logical Terms
		// */ OrBooleanTerm expressions::Term:
		//	AndBooleanTerm ({expressions::OrBooleanTerm.left=current} '|' right=AndBooleanTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndBooleanTerm ({expressions::OrBooleanTerm.left=current} '|' right=AndBooleanTerm)*
		public Group getGroup() { return cGroup; }
		
		//AndBooleanTerm
		public RuleCall getAndBooleanTermParserRuleCall_0() { return cAndBooleanTermParserRuleCall_0; }
		
		//({expressions::OrBooleanTerm.left=current} '|' right=AndBooleanTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::OrBooleanTerm.left=current}
		public Action getOrBooleanTermLeftAction_1_0() { return cOrBooleanTermLeftAction_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=AndBooleanTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndBooleanTerm
		public RuleCall getRightAndBooleanTermParserRuleCall_1_2_0() { return cRightAndBooleanTermParserRuleCall_1_2_0; }
	}
	public class AndBooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.AndBooleanTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNotBooleanTermParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cRelationalTermParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndBooleanTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cRightAlternatives_1_2_0 = (Alternatives)cRightAssignment_1_2.eContents().get(0);
		private final RuleCall cRightNotBooleanTermParserRuleCall_1_2_0_0 = (RuleCall)cRightAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cRightRelationalTermParserRuleCall_1_2_0_1 = (RuleCall)cRightAlternatives_1_2_0.eContents().get(1);
		
		//AndBooleanTerm expressions::Term:
		//	(NotBooleanTerm | RelationalTerm) ({expressions::AndBooleanTerm.left=current} '&' right=(NotBooleanTerm |
		//	RelationalTerm))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(NotBooleanTerm | RelationalTerm) ({expressions::AndBooleanTerm.left=current} '&' right=(NotBooleanTerm |
		//RelationalTerm))*
		public Group getGroup() { return cGroup; }
		
		//NotBooleanTerm | RelationalTerm
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//NotBooleanTerm
		public RuleCall getNotBooleanTermParserRuleCall_0_0() { return cNotBooleanTermParserRuleCall_0_0; }
		
		//RelationalTerm
		public RuleCall getRelationalTermParserRuleCall_0_1() { return cRelationalTermParserRuleCall_0_1; }
		
		//({expressions::AndBooleanTerm.left=current} '&' right=(NotBooleanTerm | RelationalTerm))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::AndBooleanTerm.left=current}
		public Action getAndBooleanTermLeftAction_1_0() { return cAndBooleanTermLeftAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=(NotBooleanTerm | RelationalTerm)
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//(NotBooleanTerm | RelationalTerm)
		public Alternatives getRightAlternatives_1_2_0() { return cRightAlternatives_1_2_0; }
		
		//NotBooleanTerm
		public RuleCall getRightNotBooleanTermParserRuleCall_1_2_0_0() { return cRightNotBooleanTermParserRuleCall_1_2_0_0; }
		
		//RelationalTerm
		public RuleCall getRightRelationalTermParserRuleCall_1_2_0_1() { return cRightRelationalTermParserRuleCall_1_2_0_1; }
	}
	public class NotBooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.NotBooleanTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotBooleanTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermRelationalTermParserRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		
		//NotBooleanTerm expressions::Term:
		//	{expressions::NotBooleanTerm}
		//	'!' term=RelationalTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//{expressions::NotBooleanTerm} '!' term=RelationalTerm
		public Group getGroup() { return cGroup; }
		
		//{expressions::NotBooleanTerm}
		public Action getNotBooleanTermAction_0() { return cNotBooleanTermAction_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//term=RelationalTerm
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }
		
		//RelationalTerm
		public RuleCall getTermRelationalTermParserRuleCall_2_0() { return cTermRelationalTermParserRuleCall_2_0; }
	}
	public class RelationalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.RelationalTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualTermLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLessThanTermLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cGreaterThanTermLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cLessEqualTermLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cGreaterEqualTermLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cNotEqualTermLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		///*
		// * Relational Term
		// */ RelationalTerm expressions::Term:
		//	AdditionTerm (({expressions::EqualTerm.left=current} '='
		//	| {expressions::LessThanTerm.left=current} '<'
		//	| {expressions::GreaterThanTerm.left=current} '>'
		//	| {expressions::LessEqualTerm.left=current} '<='
		//	| {expressions::GreaterEqualTerm.left=current} '>='
		//	| {expressions::NotEqualTerm.left=current} '!=') right=AdditionTerm)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionTerm (({expressions::EqualTerm.left=current} '=' | {expressions::LessThanTerm.left=current} '<' |
		//{expressions::GreaterThanTerm.left=current} '>' | {expressions::LessEqualTerm.left=current} '<=' |
		//{expressions::GreaterEqualTerm.left=current} '>=' | {expressions::NotEqualTerm.left=current} '!=') right=AdditionTerm)?
		public Group getGroup() { return cGroup; }
		
		//AdditionTerm
		public RuleCall getAdditionTermParserRuleCall_0() { return cAdditionTermParserRuleCall_0; }
		
		//(({expressions::EqualTerm.left=current} '=' | {expressions::LessThanTerm.left=current} '<' |
		//{expressions::GreaterThanTerm.left=current} '>' | {expressions::LessEqualTerm.left=current} '<=' |
		//{expressions::GreaterEqualTerm.left=current} '>=' | {expressions::NotEqualTerm.left=current} '!=') right=AdditionTerm)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::EqualTerm.left=current} '=' | {expressions::LessThanTerm.left=current} '<' |
		//{expressions::GreaterThanTerm.left=current} '>' | {expressions::LessEqualTerm.left=current} '<=' |
		//{expressions::GreaterEqualTerm.left=current} '>=' | {expressions::NotEqualTerm.left=current} '!='
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{expressions::EqualTerm.left=current} '='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{expressions::EqualTerm.left=current}
		public Action getEqualTermLeftAction_1_0_0_0() { return cEqualTermLeftAction_1_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }
		
		//{expressions::LessThanTerm.left=current} '<'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{expressions::LessThanTerm.left=current}
		public Action getLessThanTermLeftAction_1_0_1_0() { return cLessThanTermLeftAction_1_0_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }
		
		//{expressions::GreaterThanTerm.left=current} '>'
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{expressions::GreaterThanTerm.left=current}
		public Action getGreaterThanTermLeftAction_1_0_2_0() { return cGreaterThanTermLeftAction_1_0_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_2_1() { return cGreaterThanSignKeyword_1_0_2_1; }
		
		//{expressions::LessEqualTerm.left=current} '<='
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{expressions::LessEqualTerm.left=current}
		public Action getLessEqualTermLeftAction_1_0_3_0() { return cLessEqualTermLeftAction_1_0_3_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_3_1; }
		
		//{expressions::GreaterEqualTerm.left=current} '>='
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//{expressions::GreaterEqualTerm.left=current}
		public Action getGreaterEqualTermLeftAction_1_0_4_0() { return cGreaterEqualTermLeftAction_1_0_4_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_4_1() { return cGreaterThanSignEqualsSignKeyword_1_0_4_1; }
		
		//{expressions::NotEqualTerm.left=current} '!='
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }
		
		//{expressions::NotEqualTerm.left=current}
		public Action getNotEqualTermLeftAction_1_0_5_0() { return cNotEqualTermLeftAction_1_0_5_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_5_1() { return cExclamationMarkEqualsSignKeyword_1_0_5_1; }
		
		//right=AdditionTerm
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AdditionTerm
		public RuleCall getRightAdditionTermParserRuleCall_1_1_0() { return cRightAdditionTermParserRuleCall_1_1_0; }
	}
	public class AdditionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.AdditionTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAddTermLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSubTermLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		///*
		// * Arithmetic Terms
		// */ AdditionTerm expressions::Term:
		//	MultiplicationTerm (({expressions::AddTerm.left=current} '+' | {expressions::SubTerm.left=current} '-')
		//	right=MultiplicationTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationTerm (({expressions::AddTerm.left=current} '+' | {expressions::SubTerm.left=current} '-')
		//right=MultiplicationTerm)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationTerm
		public RuleCall getMultiplicationTermParserRuleCall_0() { return cMultiplicationTermParserRuleCall_0; }
		
		//(({expressions::AddTerm.left=current} '+' | {expressions::SubTerm.left=current} '-') right=MultiplicationTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::AddTerm.left=current} '+' | {expressions::SubTerm.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{expressions::AddTerm.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{expressions::AddTerm.left=current}
		public Action getAddTermLeftAction_1_0_0_0() { return cAddTermLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{expressions::SubTerm.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{expressions::SubTerm.left=current}
		public Action getSubTermLeftAction_1_0_1_0() { return cSubTermLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MultiplicationTerm
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicationTerm
		public RuleCall getRightMultiplicationTermParserRuleCall_1_1_0() { return cRightMultiplicationTermParserRuleCall_1_1_0; }
	}
	public class MultiplicationTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.MultiplicationTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultTermLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivTermLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicationTerm expressions::Term:
		//	PrimaryTerm (({expressions::MultTerm.left=current} '*' | {expressions::DivTerm.left=current} '/') right=PrimaryTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryTerm (({expressions::MultTerm.left=current} '*' | {expressions::DivTerm.left=current} '/') right=PrimaryTerm)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryTerm
		public RuleCall getPrimaryTermParserRuleCall_0() { return cPrimaryTermParserRuleCall_0; }
		
		//(({expressions::MultTerm.left=current} '*' | {expressions::DivTerm.left=current} '/') right=PrimaryTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{expressions::MultTerm.left=current} '*' | {expressions::DivTerm.left=current} '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{expressions::MultTerm.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{expressions::MultTerm.left=current}
		public Action getMultTermLeftAction_1_0_0_0() { return cMultTermLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{expressions::DivTerm.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{expressions::DivTerm.left=current}
		public Action getDivTermLeftAction_1_0_1_0() { return cDivTermLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=PrimaryTerm
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryTerm
		public RuleCall getRightPrimaryTermParserRuleCall_1_1_0() { return cRightPrimaryTermParserRuleCall_1_1_0; }
	}
	public class PrimaryTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.PrimaryTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTermParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConstTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelfTermParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionTermParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///*
		// * Primary Terms
		// */ PrimaryTerm expressions::Term:
		//	'(' Term ')' | ConstTerm | VarTerm | SelfTerm | FunctionTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Term ')' | ConstTerm | VarTerm | SelfTerm | FunctionTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Term ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Term
		public RuleCall getTermParserRuleCall_0_1() { return cTermParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//ConstTerm
		public RuleCall getConstTermParserRuleCall_1() { return cConstTermParserRuleCall_1; }
		
		//VarTerm
		public RuleCall getVarTermParserRuleCall_2() { return cVarTermParserRuleCall_2; }
		
		//SelfTerm
		public RuleCall getSelfTermParserRuleCall_3() { return cSelfTermParserRuleCall_3; }
		
		//FunctionTerm
		public RuleCall getFunctionTermParserRuleCall_4() { return cFunctionTermParserRuleCall_4; }
	}
	public class VarTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.VarTerm");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableTypedVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableTypedVariableQualifiedNameParserRuleCall_0_1 = (RuleCall)cVariableTypedVariableCrossReference_0.eContents().get(1);
		
		//VarTerm expressions::VarTerm:
		//	variable=[datatypes::TypedVariable|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[datatypes::TypedVariable|QualifiedName]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[datatypes::TypedVariable|QualifiedName]
		public CrossReference getVariableTypedVariableCrossReference_0() { return cVariableTypedVariableCrossReference_0; }
		
		//QualifiedName
		public RuleCall getVariableTypedVariableQualifiedNameParserRuleCall_0_1() { return cVariableTypedVariableQualifiedNameParserRuleCall_0_1; }
	}
	public class ConstTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ConstTerm");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTypedValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstTerm expressions::ConstTerm:
		//	value=TypedValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=TypedValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//TypedValue
		public RuleCall getValueTypedValueParserRuleCall_0() { return cValueTypedValueParserRuleCall_0; }
	}
	public class SelfTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.SelfTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeliefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SelfTerm expressions::SelfTerm:
		//	{expressions::SelfTerm}
		//	'belief';
		@Override public ParserRule getRule() { return rule; }
		
		//{expressions::SelfTerm} 'belief'
		public Group getGroup() { return cGroup; }
		
		//{expressions::SelfTerm}
		public Action getSelfTermAction_0() { return cSelfTermAction_0; }
		
		//'belief'
		public Keyword getBeliefKeyword_1() { return cBeliefKeyword_1; }
	}
	public class FunctionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.FunctionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregationFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPatternFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCollectionFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScheduleFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* 
		// * Functions
		// */ FunctionTerm expressions::FunctionTerm:
		//	ArithFunction | AggregationFunction | PatternFunction | CollectionFunction | ScheduleFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithFunction | AggregationFunction | PatternFunction | CollectionFunction | ScheduleFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArithFunction
		public RuleCall getArithFunctionParserRuleCall_0() { return cArithFunctionParserRuleCall_0; }
		
		//AggregationFunction
		public RuleCall getAggregationFunctionParserRuleCall_1() { return cAggregationFunctionParserRuleCall_1; }
		
		//PatternFunction
		public RuleCall getPatternFunctionParserRuleCall_2() { return cPatternFunctionParserRuleCall_2; }
		
		//CollectionFunction
		public RuleCall getCollectionFunctionParserRuleCall_3() { return cCollectionFunctionParserRuleCall_3; }
		
		//ScheduleFunction
		public RuleCall getScheduleFunctionParserRuleCall_4() { return cScheduleFunctionParserRuleCall_4; }
	}
	public class ScheduleFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ScheduleFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScheduleFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScheduleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternEStringParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ScheduleFunction expressions::ScheduleFunction:
		//	{expressions::ScheduleFunction}
		//	'schedule' '(' pattern=EString ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{expressions::ScheduleFunction} 'schedule' '(' pattern=EString ')'
		public Group getGroup() { return cGroup; }
		
		//{expressions::ScheduleFunction}
		public Action getScheduleFunctionAction_0() { return cScheduleFunctionAction_0; }
		
		//'schedule'
		public Keyword getScheduleKeyword_1() { return cScheduleKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//pattern=EString
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//EString
		public RuleCall getPatternEStringParserRuleCall_3_0() { return cPatternEStringParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ArithFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ArithFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTermsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTermsAlternatives_0_0_0 = (Alternatives)cTermsAssignment_0_0.eContents().get(0);
		private final RuleCall cTermsVarTermParserRuleCall_0_0_0_0 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cTermsSelfTermParserRuleCall_0_0_0_1 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(1);
		private final Keyword cApostropheKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameArithFtnEnumEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cTermsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTermsTermParserRuleCall_2_1_0_0 = (RuleCall)cTermsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTermsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_1_1_1_0 = (RuleCall)cTermsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ArithFunction expressions::ArithFunction:
		//	(terms+=(VarTerm | SelfTerm) "'")? name=ArithFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(terms+=(VarTerm | SelfTerm) "'")? name=ArithFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//(terms+=(VarTerm | SelfTerm) "'")?
		public Group getGroup_0() { return cGroup_0; }
		
		//terms+=(VarTerm | SelfTerm)
		public Assignment getTermsAssignment_0_0() { return cTermsAssignment_0_0; }
		
		//(VarTerm | SelfTerm)
		public Alternatives getTermsAlternatives_0_0_0() { return cTermsAlternatives_0_0_0; }
		
		//VarTerm
		public RuleCall getTermsVarTermParserRuleCall_0_0_0_0() { return cTermsVarTermParserRuleCall_0_0_0_0; }
		
		//SelfTerm
		public RuleCall getTermsSelfTermParserRuleCall_0_0_0_1() { return cTermsSelfTermParserRuleCall_0_0_0_1; }
		
		//"'"
		public Keyword getApostropheKeyword_0_1() { return cApostropheKeyword_0_1; }
		
		//name=ArithFtnEnum
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ArithFtnEnum
		public RuleCall getNameArithFtnEnumEnumRuleCall_1_0() { return cNameArithFtnEnumEnumRuleCall_1_0; }
		
		//('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(terms+=Term (',' terms+=Term)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_0() { return cTermsAssignment_2_1_0; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_0_0() { return cTermsTermParserRuleCall_2_1_0_0; }
		
		//(',' terms+=Term)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_1_1() { return cTermsAssignment_2_1_1_1; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_1_1_0() { return cTermsTermParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class AggregationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.AggregationFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTermsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTermsAlternatives_0_0_0 = (Alternatives)cTermsAssignment_0_0.eContents().get(0);
		private final RuleCall cTermsVarTermParserRuleCall_0_0_0_0 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cTermsSelfTermParserRuleCall_0_0_0_1 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(1);
		private final Keyword cApostropheKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAggregationFtnEnumEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cTermsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTermsTermParserRuleCall_2_1_0_0 = (RuleCall)cTermsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTermsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_1_1_1_0 = (RuleCall)cTermsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//AggregationFunction expressions::AggregationFunction:
		//	(terms+=(VarTerm | SelfTerm) "'")? name=AggregationFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(terms+=(VarTerm | SelfTerm) "'")? name=AggregationFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//(terms+=(VarTerm | SelfTerm) "'")?
		public Group getGroup_0() { return cGroup_0; }
		
		//terms+=(VarTerm | SelfTerm)
		public Assignment getTermsAssignment_0_0() { return cTermsAssignment_0_0; }
		
		//(VarTerm | SelfTerm)
		public Alternatives getTermsAlternatives_0_0_0() { return cTermsAlternatives_0_0_0; }
		
		//VarTerm
		public RuleCall getTermsVarTermParserRuleCall_0_0_0_0() { return cTermsVarTermParserRuleCall_0_0_0_0; }
		
		//SelfTerm
		public RuleCall getTermsSelfTermParserRuleCall_0_0_0_1() { return cTermsSelfTermParserRuleCall_0_0_0_1; }
		
		//"'"
		public Keyword getApostropheKeyword_0_1() { return cApostropheKeyword_0_1; }
		
		//name=AggregationFtnEnum
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//AggregationFtnEnum
		public RuleCall getNameAggregationFtnEnumEnumRuleCall_1_0() { return cNameAggregationFtnEnumEnumRuleCall_1_0; }
		
		//('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(terms+=Term (',' terms+=Term)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_0() { return cTermsAssignment_2_1_0; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_0_0() { return cTermsTermParserRuleCall_2_1_0_0; }
		
		//(',' terms+=Term)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_1_1() { return cTermsAssignment_2_1_1_1; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_1_1_0() { return cTermsTermParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class PatternFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.PatternFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTermsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTermsAlternatives_0_0_0 = (Alternatives)cTermsAssignment_0_0.eContents().get(0);
		private final RuleCall cTermsVarTermParserRuleCall_0_0_0_0 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cTermsSelfTermParserRuleCall_0_0_0_1 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(1);
		private final Keyword cApostropheKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePatternFtnEnumEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cTermsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTermsTermParserRuleCall_2_1_0_0 = (RuleCall)cTermsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTermsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_1_1_1_0 = (RuleCall)cTermsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PatternFunction expressions::PatternFunction:
		//	(terms+=(VarTerm | SelfTerm) "'")? name=PatternFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(terms+=(VarTerm | SelfTerm) "'")? name=PatternFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//(terms+=(VarTerm | SelfTerm) "'")?
		public Group getGroup_0() { return cGroup_0; }
		
		//terms+=(VarTerm | SelfTerm)
		public Assignment getTermsAssignment_0_0() { return cTermsAssignment_0_0; }
		
		//(VarTerm | SelfTerm)
		public Alternatives getTermsAlternatives_0_0_0() { return cTermsAlternatives_0_0_0; }
		
		//VarTerm
		public RuleCall getTermsVarTermParserRuleCall_0_0_0_0() { return cTermsVarTermParserRuleCall_0_0_0_0; }
		
		//SelfTerm
		public RuleCall getTermsSelfTermParserRuleCall_0_0_0_1() { return cTermsSelfTermParserRuleCall_0_0_0_1; }
		
		//"'"
		public Keyword getApostropheKeyword_0_1() { return cApostropheKeyword_0_1; }
		
		//name=PatternFtnEnum
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PatternFtnEnum
		public RuleCall getNamePatternFtnEnumEnumRuleCall_1_0() { return cNamePatternFtnEnumEnumRuleCall_1_0; }
		
		//('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(terms+=Term (',' terms+=Term)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_0() { return cTermsAssignment_2_1_0; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_0_0() { return cTermsTermParserRuleCall_2_1_0_0; }
		
		//(',' terms+=Term)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_1_1() { return cTermsAssignment_2_1_1_1; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_1_1_0() { return cTermsTermParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class CollectionFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.CollectionFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTermsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTermsAlternatives_0_0_0 = (Alternatives)cTermsAssignment_0_0.eContents().get(0);
		private final RuleCall cTermsVarTermParserRuleCall_0_0_0_0 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cTermsSelfTermParserRuleCall_0_0_0_1 = (RuleCall)cTermsAlternatives_0_0_0.eContents().get(1);
		private final Keyword cApostropheKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCollectionFtnEnumEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cTermsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cTermsTermParserRuleCall_2_1_0_0 = (RuleCall)cTermsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cTermsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_1_1_1_0 = (RuleCall)cTermsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//CollectionFunction expressions::CollectionFunction:
		//	(terms+=(VarTerm | SelfTerm) "'")? name=CollectionFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(terms+=(VarTerm | SelfTerm) "'")? name=CollectionFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//(terms+=(VarTerm | SelfTerm) "'")?
		public Group getGroup_0() { return cGroup_0; }
		
		//terms+=(VarTerm | SelfTerm)
		public Assignment getTermsAssignment_0_0() { return cTermsAssignment_0_0; }
		
		//(VarTerm | SelfTerm)
		public Alternatives getTermsAlternatives_0_0_0() { return cTermsAlternatives_0_0_0; }
		
		//VarTerm
		public RuleCall getTermsVarTermParserRuleCall_0_0_0_0() { return cTermsVarTermParserRuleCall_0_0_0_0; }
		
		//SelfTerm
		public RuleCall getTermsSelfTermParserRuleCall_0_0_0_1() { return cTermsSelfTermParserRuleCall_0_0_0_1; }
		
		//"'"
		public Keyword getApostropheKeyword_0_1() { return cApostropheKeyword_0_1; }
		
		//name=CollectionFtnEnum
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CollectionFtnEnum
		public RuleCall getNameCollectionFtnEnumEnumRuleCall_1_0() { return cNameCollectionFtnEnumEnumRuleCall_1_0; }
		
		//('(' (terms+=Term (',' terms+=Term)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(terms+=Term (',' terms+=Term)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_0() { return cTermsAssignment_2_1_0; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_0_0() { return cTermsTermParserRuleCall_2_1_0_0; }
		
		//(',' terms+=Term)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//terms+=Term
		public Assignment getTermsAssignment_2_1_1_1() { return cTermsAssignment_2_1_1_1; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_1_1_0() { return cTermsTermParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* *********************************
		// * Auxiliary grammar
		// * *********************************/ EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class LiteralQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.LiteralQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LiteralQualifiedName:
		//	ID ('::' ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('::' ID)+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('::' ID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ElementDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ElementDescription");
		private final RuleCall cROQME_DESCRIPTIONTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementDescription:
		//	ROQME_DESCRIPTION;
		@Override public ParserRule getRule() { return rule; }
		
		//ROQME_DESCRIPTION
		public RuleCall getROQME_DESCRIPTIONTerminalRuleCall() { return cROQME_DESCRIPTIONTerminalRuleCall; }
	}
	
	public class InfluenceEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.InfluenceEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREINFORCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREINFORCEReinforcesKeyword_0_0 = (Keyword)cREINFORCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNDERMINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNDERMINEUnderminesKeyword_1_0 = (Keyword)cUNDERMINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InfluenceEnum returns kernel::InfluenceEnum:
		//	REINFORCE='reinforces' | UNDERMINE='undermines';
		public EnumRule getRule() { return rule; }
		
		//REINFORCE='reinforces' | UNDERMINE='undermines'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REINFORCE='reinforces'
		public EnumLiteralDeclaration getREINFORCEEnumLiteralDeclaration_0() { return cREINFORCEEnumLiteralDeclaration_0; }
		
		//'reinforces'
		public Keyword getREINFORCEReinforcesKeyword_0_0() { return cREINFORCEReinforcesKeyword_0_0; }
		
		//UNDERMINE='undermines'
		public EnumLiteralDeclaration getUNDERMINEEnumLiteralDeclaration_1() { return cUNDERMINEEnumLiteralDeclaration_1; }
		
		//'undermines'
		public Keyword getUNDERMINEUnderminesKeyword_1_0() { return cUNDERMINEUnderminesKeyword_1_0; }
	}
	public class StrengthEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.StrengthEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVERY_HIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVERY_HIGHVeryhighKeyword_0_0 = (Keyword)cVERY_HIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHIGHHighKeyword_1_0 = (Keyword)cHIGHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMEDIUMMEDIUMKeyword_2_0 = (Keyword)cMEDIUMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOWLowKeyword_3_0 = (Keyword)cLOWEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVERY_LOWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVERY_LOWVerylowKeyword_4_0 = (Keyword)cVERY_LOWEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum StrengthEnum returns kernel::StrengthEnum:
		//	VERY_HIGH='veryhigh' | HIGH='high' | MEDIUM | LOW='low' | VERY_LOW='verylow';
		public EnumRule getRule() { return rule; }
		
		//VERY_HIGH='veryhigh' | HIGH='high' | MEDIUM | LOW='low' | VERY_LOW='verylow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VERY_HIGH='veryhigh'
		public EnumLiteralDeclaration getVERY_HIGHEnumLiteralDeclaration_0() { return cVERY_HIGHEnumLiteralDeclaration_0; }
		
		//'veryhigh'
		public Keyword getVERY_HIGHVeryhighKeyword_0_0() { return cVERY_HIGHVeryhighKeyword_0_0; }
		
		//HIGH='high'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_1() { return cHIGHEnumLiteralDeclaration_1; }
		
		//'high'
		public Keyword getHIGHHighKeyword_1_0() { return cHIGHHighKeyword_1_0; }
		
		//MEDIUM
		public EnumLiteralDeclaration getMEDIUMEnumLiteralDeclaration_2() { return cMEDIUMEnumLiteralDeclaration_2; }
		
		//"MEDIUM"
		public Keyword getMEDIUMMEDIUMKeyword_2_0() { return cMEDIUMMEDIUMKeyword_2_0; }
		
		//LOW='low'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_3() { return cLOWEnumLiteralDeclaration_3; }
		
		//'low'
		public Keyword getLOWLowKeyword_3_0() { return cLOWLowKeyword_3_0; }
		
		//VERY_LOW='verylow'
		public EnumLiteralDeclaration getVERY_LOWEnumLiteralDeclaration_4() { return cVERY_LOWEnumLiteralDeclaration_4; }
		
		//'verylow'
		public Keyword getVERY_LOWVerylowKeyword_4_0() { return cVERY_LOWVerylowKeyword_4_0; }
	}
	public class ArithFtnEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ArithFtnEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPOWPowKeyword_0_0 = (Keyword)cPOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSQRTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSQRTSqrtKeyword_1_0 = (Keyword)cSQRTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEXPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEXPExpKeyword_2_0 = (Keyword)cEXPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cABSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cABSAbsKeyword_3_0 = (Keyword)cABSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ArithFtnEnum returns expressions::ArithFtnEnum:
		//	POW='pow' | SQRT='sqrt' | EXP='exp' | ABS='abs';
		public EnumRule getRule() { return rule; }
		
		//POW='pow' | SQRT='sqrt' | EXP='exp' | ABS='abs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//POW='pow'
		public EnumLiteralDeclaration getPOWEnumLiteralDeclaration_0() { return cPOWEnumLiteralDeclaration_0; }
		
		//'pow'
		public Keyword getPOWPowKeyword_0_0() { return cPOWPowKeyword_0_0; }
		
		//SQRT='sqrt'
		public EnumLiteralDeclaration getSQRTEnumLiteralDeclaration_1() { return cSQRTEnumLiteralDeclaration_1; }
		
		//'sqrt'
		public Keyword getSQRTSqrtKeyword_1_0() { return cSQRTSqrtKeyword_1_0; }
		
		//EXP='exp'
		public EnumLiteralDeclaration getEXPEnumLiteralDeclaration_2() { return cEXPEnumLiteralDeclaration_2; }
		
		//'exp'
		public Keyword getEXPExpKeyword_2_0() { return cEXPExpKeyword_2_0; }
		
		//ABS='abs'
		public EnumLiteralDeclaration getABSEnumLiteralDeclaration_3() { return cABSEnumLiteralDeclaration_3; }
		
		//'abs'
		public Keyword getABSAbsKeyword_3_0() { return cABSAbsKeyword_3_0; }
	}
	public class AggregationFtnEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.AggregationFtnEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAVGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAVGAvgKeyword_0_0 = (Keyword)cAVGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINMinKeyword_1_0 = (Keyword)cMINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMAXMaxKeyword_2_0 = (Keyword)cMAXEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOUNTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOUNTCountKeyword_3_0 = (Keyword)cCOUNTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSUMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSUMSumKeyword_4_0 = (Keyword)cSUMEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDECREASINGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDECREASINGDecreasingKeyword_5_0 = (Keyword)cDECREASINGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINCREASINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINCREASINGIncreasingKeyword_6_0 = (Keyword)cINCREASINGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSTABLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSTABLEStableKeyword_7_0 = (Keyword)cSTABLEEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum AggregationFtnEnum returns expressions::AggregationFtnEnum:
		//	AVG='avg' | MIN='min' | MAX='max' | COUNT='count' | SUM='sum' | DECREASING='decreasing' | INCREASING='increasing' |
		//	STABLE='stable';
		public EnumRule getRule() { return rule; }
		
		//AVG='avg' | MIN='min' | MAX='max' | COUNT='count' | SUM='sum' | DECREASING='decreasing' | INCREASING='increasing' |
		//STABLE='stable'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AVG='avg'
		public EnumLiteralDeclaration getAVGEnumLiteralDeclaration_0() { return cAVGEnumLiteralDeclaration_0; }
		
		//'avg'
		public Keyword getAVGAvgKeyword_0_0() { return cAVGAvgKeyword_0_0; }
		
		//MIN='min'
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_1() { return cMINEnumLiteralDeclaration_1; }
		
		//'min'
		public Keyword getMINMinKeyword_1_0() { return cMINMinKeyword_1_0; }
		
		//MAX='max'
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_2() { return cMAXEnumLiteralDeclaration_2; }
		
		//'max'
		public Keyword getMAXMaxKeyword_2_0() { return cMAXMaxKeyword_2_0; }
		
		//COUNT='count'
		public EnumLiteralDeclaration getCOUNTEnumLiteralDeclaration_3() { return cCOUNTEnumLiteralDeclaration_3; }
		
		//'count'
		public Keyword getCOUNTCountKeyword_3_0() { return cCOUNTCountKeyword_3_0; }
		
		//SUM='sum'
		public EnumLiteralDeclaration getSUMEnumLiteralDeclaration_4() { return cSUMEnumLiteralDeclaration_4; }
		
		//'sum'
		public Keyword getSUMSumKeyword_4_0() { return cSUMSumKeyword_4_0; }
		
		//DECREASING='decreasing'
		public EnumLiteralDeclaration getDECREASINGEnumLiteralDeclaration_5() { return cDECREASINGEnumLiteralDeclaration_5; }
		
		//'decreasing'
		public Keyword getDECREASINGDecreasingKeyword_5_0() { return cDECREASINGDecreasingKeyword_5_0; }
		
		//INCREASING='increasing'
		public EnumLiteralDeclaration getINCREASINGEnumLiteralDeclaration_6() { return cINCREASINGEnumLiteralDeclaration_6; }
		
		//'increasing'
		public Keyword getINCREASINGIncreasingKeyword_6_0() { return cINCREASINGIncreasingKeyword_6_0; }
		
		//STABLE='stable'
		public EnumLiteralDeclaration getSTABLEEnumLiteralDeclaration_7() { return cSTABLEEnumLiteralDeclaration_7; }
		
		//'stable'
		public Keyword getSTABLEStableKeyword_7_0() { return cSTABLEStableKeyword_7_0; }
	}
	public class PatternFtnEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.PatternFtnEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEVENT_WHENEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEVENT_WHENEventWhenKeyword_0_0 = (Keyword)cEVENT_WHENEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUPDATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUPDATEUpdateKeyword_1_0 = (Keyword)cUPDATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPERIODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPERIODPeriodKeyword_2_0 = (Keyword)cPERIODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PatternFtnEnum returns expressions::PatternFtnEnum:
		//	EVENT_WHEN='eventWhen' | UPDATE='update' | PERIOD='period';
		public EnumRule getRule() { return rule; }
		
		//EVENT_WHEN='eventWhen' | UPDATE='update' | PERIOD='period'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EVENT_WHEN='eventWhen'
		public EnumLiteralDeclaration getEVENT_WHENEnumLiteralDeclaration_0() { return cEVENT_WHENEnumLiteralDeclaration_0; }
		
		//'eventWhen'
		public Keyword getEVENT_WHENEventWhenKeyword_0_0() { return cEVENT_WHENEventWhenKeyword_0_0; }
		
		//UPDATE='update'
		public EnumLiteralDeclaration getUPDATEEnumLiteralDeclaration_1() { return cUPDATEEnumLiteralDeclaration_1; }
		
		//'update'
		public Keyword getUPDATEUpdateKeyword_1_0() { return cUPDATEUpdateKeyword_1_0; }
		
		//PERIOD='period'
		public EnumLiteralDeclaration getPERIODEnumLiteralDeclaration_2() { return cPERIODEnumLiteralDeclaration_2; }
		
		//'period'
		public Keyword getPERIODPeriodKeyword_2_0() { return cPERIODPeriodKeyword_2_0; }
	}
	public class CollectionFtnEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.CollectionFtnEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFIRSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFIRSTFirstKeyword_0_0 = (Keyword)cFIRSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLASTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLASTLastKeyword_1_0 = (Keyword)cLASTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cATEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cATAtKeyword_2_0 = (Keyword)cATEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSIZEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSIZESizeKeyword_3_0 = (Keyword)cSIZEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIS_EMPTYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIS_EMPTYIsEmptyKeyword_4_0 = (Keyword)cIS_EMPTYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINCLUDESEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINCLUDESIncludesKeyword_5_0 = (Keyword)cINCLUDESEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CollectionFtnEnum returns expressions::CollectionFtnEnum:
		//	FIRST='first' | LAST='last' | AT='at' | SIZE='size' | IS_EMPTY='isEmpty' | INCLUDES='includes';
		public EnumRule getRule() { return rule; }
		
		//FIRST='first' | LAST='last' | AT='at' | SIZE='size' | IS_EMPTY='isEmpty' | INCLUDES='includes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FIRST='first'
		public EnumLiteralDeclaration getFIRSTEnumLiteralDeclaration_0() { return cFIRSTEnumLiteralDeclaration_0; }
		
		//'first'
		public Keyword getFIRSTFirstKeyword_0_0() { return cFIRSTFirstKeyword_0_0; }
		
		//LAST='last'
		public EnumLiteralDeclaration getLASTEnumLiteralDeclaration_1() { return cLASTEnumLiteralDeclaration_1; }
		
		//'last'
		public Keyword getLASTLastKeyword_1_0() { return cLASTLastKeyword_1_0; }
		
		//AT='at'
		public EnumLiteralDeclaration getATEnumLiteralDeclaration_2() { return cATEnumLiteralDeclaration_2; }
		
		//'at'
		public Keyword getATAtKeyword_2_0() { return cATAtKeyword_2_0; }
		
		//SIZE='size'
		public EnumLiteralDeclaration getSIZEEnumLiteralDeclaration_3() { return cSIZEEnumLiteralDeclaration_3; }
		
		//'size'
		public Keyword getSIZESizeKeyword_3_0() { return cSIZESizeKeyword_3_0; }
		
		//IS_EMPTY='isEmpty'
		public EnumLiteralDeclaration getIS_EMPTYEnumLiteralDeclaration_4() { return cIS_EMPTYEnumLiteralDeclaration_4; }
		
		//'isEmpty'
		public Keyword getIS_EMPTYIsEmptyKeyword_4_0() { return cIS_EMPTYIsEmptyKeyword_4_0; }
		
		//INCLUDES='includes'
		public EnumLiteralDeclaration getINCLUDESEnumLiteralDeclaration_5() { return cINCLUDESEnumLiteralDeclaration_5; }
		
		//'includes'
		public Keyword getINCLUDESIncludesKeyword_5_0() { return cINCLUDESIncludesKeyword_5_0; }
	}
	
	private final RoqmeModelElements pRoqmeModel;
	private final TypedVariableElements pTypedVariable;
	private final ContextElements pContext;
	private final PrimitiveContextElements pPrimitiveContext;
	private final DerivedContextElements pDerivedContext;
	private final GeneralPurposeVariableElements pGeneralPurposeVariable;
	private final ParameterElements pParameter;
	private final TimerElements pTimer;
	private final BeliefVariableElements pBeliefVariable;
	private final BeliefVariableImplElements pBeliefVariableImpl;
	private final PropertyElements pProperty;
	private final SentenceElements pSentence;
	private final ImportElements pImport;
	private final ObservationElements pObservation;
	private final ActionElements pAction;
	private final TimerActionElements pTimerAction;
	private final SetVariableElements pSetVariable;
	private final ClearEvidenceElements pClearEvidence;
	private final SetEvidenceElements pSetEvidence;
	private final InfluenceEnumElements eInfluenceEnum;
	private final StrengthEnumElements eStrengthEnum;
	private final StartTimerElements pStartTimer;
	private final StopTimerElements pStopTimer;
	private final ResumeTimerElements pResumeTimer;
	private final DataTypeDefinitionElements pDataTypeDefinition;
	private final DataTypeElements pDataType;
	private final BooleanTypeElements pBooleanType;
	private final EnumTypeElements pEnumType;
	private final EnumLiteralElements pEnumLiteral;
	private final EventTypeElements pEventType;
	private final NumericTypeElements pNumericType;
	private final NumericTypeConstraintElements pNumericTypeConstraint;
	private final LowerBoundElements pLowerBound;
	private final UpperBoundElements pUpperBound;
	private final UnitMeasuredTypeElements pUnitMeasuredType;
	private final TimeTypeElements pTimeType;
	private final TypedValueElements pTypedValue;
	private final SingleValueElements pSingleValue;
	private final EventValueElements pEventValue;
	private final BooleanValueElements pBooleanValue;
	private final EnumValueElements pEnumValue;
	private final NumericValueElements pNumericValue;
	private final UnitMeasuredValueElements pUnitMeasuredValue;
	private final NumericValue_ImplElements pNumericValue_Impl;
	private final UnitMeasuredValue_ImplElements pUnitMeasuredValue_Impl;
	private final TimeValueElements pTimeValue;
	private final TimeUnitEnumElements pTimeUnitEnum;
	private final ArrayValueElements pArrayValue;
	private final BooleanArrayElements pBooleanArray;
	private final EnumArrayElements pEnumArray;
	private final NumericArrayElements pNumericArray;
	private final UnitMeasuredArrayElements pUnitMeasuredArray;
	private final NumericArray_ImplElements pNumericArray_Impl;
	private final UnitMeasuredArray_ImplElements pUnitMeasuredArray_Impl;
	private final TimeArrayElements pTimeArray;
	private final DataTypeDeclarationElements pDataTypeDeclaration;
	private final ContainedDeclarationElements pContainedDeclaration;
	private final InbuiltDeclarationElements pInbuiltDeclaration;
	private final ReferencedDeclarationElements pReferencedDeclaration;
	private final GeneralExpressionElements pGeneralExpression;
	private final OutputTransformationElements pOutputTransformation;
	private final ContextPatternElements pContextPattern;
	private final TermElements pTerm;
	private final OnceTermElements pOnceTerm;
	private final WhileTermElements pWhileTerm;
	private final RepetionTermElements pRepetionTerm;
	private final SequenceTermElements pSequenceTerm;
	private final OrEventTermElements pOrEventTerm;
	private final AndEventTermElements pAndEventTerm;
	private final NotEventTermElements pNotEventTerm;
	private final ConditionalTermElements pConditionalTerm;
	private final OrBooleanTermElements pOrBooleanTerm;
	private final AndBooleanTermElements pAndBooleanTerm;
	private final NotBooleanTermElements pNotBooleanTerm;
	private final RelationalTermElements pRelationalTerm;
	private final AdditionTermElements pAdditionTerm;
	private final MultiplicationTermElements pMultiplicationTerm;
	private final PrimaryTermElements pPrimaryTerm;
	private final VarTermElements pVarTerm;
	private final ConstTermElements pConstTerm;
	private final SelfTermElements pSelfTerm;
	private final FunctionTermElements pFunctionTerm;
	private final ScheduleFunctionElements pScheduleFunction;
	private final ArithFunctionElements pArithFunction;
	private final ArithFtnEnumElements eArithFtnEnum;
	private final AggregationFunctionElements pAggregationFunction;
	private final AggregationFtnEnumElements eAggregationFtnEnum;
	private final PatternFunctionElements pPatternFunction;
	private final PatternFtnEnumElements ePatternFtnEnum;
	private final CollectionFunctionElements pCollectionFunction;
	private final CollectionFtnEnumElements eCollectionFtnEnum;
	private final EStringElements pEString;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	private final QualifiedNameElements pQualifiedName;
	private final LiteralQualifiedNameElements pLiteralQualifiedName;
	private final ElementDescriptionElements pElementDescription;
	private final TerminalRule tROQME_DESCRIPTION;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RoQMEGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoqmeModel = new RoqmeModelElements();
		this.pTypedVariable = new TypedVariableElements();
		this.pContext = new ContextElements();
		this.pPrimitiveContext = new PrimitiveContextElements();
		this.pDerivedContext = new DerivedContextElements();
		this.pGeneralPurposeVariable = new GeneralPurposeVariableElements();
		this.pParameter = new ParameterElements();
		this.pTimer = new TimerElements();
		this.pBeliefVariable = new BeliefVariableElements();
		this.pBeliefVariableImpl = new BeliefVariableImplElements();
		this.pProperty = new PropertyElements();
		this.pSentence = new SentenceElements();
		this.pImport = new ImportElements();
		this.pObservation = new ObservationElements();
		this.pAction = new ActionElements();
		this.pTimerAction = new TimerActionElements();
		this.pSetVariable = new SetVariableElements();
		this.pClearEvidence = new ClearEvidenceElements();
		this.pSetEvidence = new SetEvidenceElements();
		this.eInfluenceEnum = new InfluenceEnumElements();
		this.eStrengthEnum = new StrengthEnumElements();
		this.pStartTimer = new StartTimerElements();
		this.pStopTimer = new StopTimerElements();
		this.pResumeTimer = new ResumeTimerElements();
		this.pDataTypeDefinition = new DataTypeDefinitionElements();
		this.pDataType = new DataTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pEnumType = new EnumTypeElements();
		this.pEnumLiteral = new EnumLiteralElements();
		this.pEventType = new EventTypeElements();
		this.pNumericType = new NumericTypeElements();
		this.pNumericTypeConstraint = new NumericTypeConstraintElements();
		this.pLowerBound = new LowerBoundElements();
		this.pUpperBound = new UpperBoundElements();
		this.pUnitMeasuredType = new UnitMeasuredTypeElements();
		this.pTimeType = new TimeTypeElements();
		this.pTypedValue = new TypedValueElements();
		this.pSingleValue = new SingleValueElements();
		this.pEventValue = new EventValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pEnumValue = new EnumValueElements();
		this.pNumericValue = new NumericValueElements();
		this.pUnitMeasuredValue = new UnitMeasuredValueElements();
		this.pNumericValue_Impl = new NumericValue_ImplElements();
		this.pUnitMeasuredValue_Impl = new UnitMeasuredValue_ImplElements();
		this.pTimeValue = new TimeValueElements();
		this.pTimeUnitEnum = new TimeUnitEnumElements();
		this.pArrayValue = new ArrayValueElements();
		this.pBooleanArray = new BooleanArrayElements();
		this.pEnumArray = new EnumArrayElements();
		this.pNumericArray = new NumericArrayElements();
		this.pUnitMeasuredArray = new UnitMeasuredArrayElements();
		this.pNumericArray_Impl = new NumericArray_ImplElements();
		this.pUnitMeasuredArray_Impl = new UnitMeasuredArray_ImplElements();
		this.pTimeArray = new TimeArrayElements();
		this.pDataTypeDeclaration = new DataTypeDeclarationElements();
		this.pContainedDeclaration = new ContainedDeclarationElements();
		this.pInbuiltDeclaration = new InbuiltDeclarationElements();
		this.pReferencedDeclaration = new ReferencedDeclarationElements();
		this.pGeneralExpression = new GeneralExpressionElements();
		this.pOutputTransformation = new OutputTransformationElements();
		this.pContextPattern = new ContextPatternElements();
		this.pTerm = new TermElements();
		this.pOnceTerm = new OnceTermElements();
		this.pWhileTerm = new WhileTermElements();
		this.pRepetionTerm = new RepetionTermElements();
		this.pSequenceTerm = new SequenceTermElements();
		this.pOrEventTerm = new OrEventTermElements();
		this.pAndEventTerm = new AndEventTermElements();
		this.pNotEventTerm = new NotEventTermElements();
		this.pConditionalTerm = new ConditionalTermElements();
		this.pOrBooleanTerm = new OrBooleanTermElements();
		this.pAndBooleanTerm = new AndBooleanTermElements();
		this.pNotBooleanTerm = new NotBooleanTermElements();
		this.pRelationalTerm = new RelationalTermElements();
		this.pAdditionTerm = new AdditionTermElements();
		this.pMultiplicationTerm = new MultiplicationTermElements();
		this.pPrimaryTerm = new PrimaryTermElements();
		this.pVarTerm = new VarTermElements();
		this.pConstTerm = new ConstTermElements();
		this.pSelfTerm = new SelfTermElements();
		this.pFunctionTerm = new FunctionTermElements();
		this.pScheduleFunction = new ScheduleFunctionElements();
		this.pArithFunction = new ArithFunctionElements();
		this.eArithFtnEnum = new ArithFtnEnumElements();
		this.pAggregationFunction = new AggregationFunctionElements();
		this.eAggregationFtnEnum = new AggregationFtnEnumElements();
		this.pPatternFunction = new PatternFunctionElements();
		this.ePatternFtnEnum = new PatternFtnEnumElements();
		this.pCollectionFunction = new CollectionFunctionElements();
		this.eCollectionFtnEnum = new CollectionFtnEnumElements();
		this.pEString = new EStringElements();
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pLiteralQualifiedName = new LiteralQualifiedNameElements();
		this.pElementDescription = new ElementDescriptionElements();
		this.tROQME_DESCRIPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ROQME_DESCRIPTION");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.ML_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqme.RoQME.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.roqme.RoQME".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RoqmeModel datatypes::RoqmeModel:
	//	(description=ElementDescription? 'roqme' namespace=EString)?
	//	sentences+=Import* (dataTypes+=DataTypeDefinition
	//	| variables+=TypedVariable
	//	| sentences+=Sentence)*;
	public RoqmeModelElements getRoqmeModelAccess() {
		return pRoqmeModel;
	}
	
	public ParserRule getRoqmeModelRule() {
		return getRoqmeModelAccess().getRule();
	}
	
	///* *********************************
	// * KERNEL EPACKAGE
	// * *********************************/ /*
	// * Variables
	// */ TypedVariable datatypes::TypedVariable:
	//	Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable;
	public TypedVariableElements getTypedVariableAccess() {
		return pTypedVariable;
	}
	
	public ParserRule getTypedVariableRule() {
		return getTypedVariableAccess().getRule();
	}
	
	//Context kernel::Context:
	//	DerivedContext | PrimitiveContext;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//PrimitiveContext kernel::PrimitiveContext:
	//	description=ElementDescription?
	//	'context' name=ID ':' declaration=DataTypeDeclaration;
	public PrimitiveContextElements getPrimitiveContextAccess() {
		return pPrimitiveContext;
	}
	
	public ParserRule getPrimitiveContextRule() {
		return getPrimitiveContextAccess().getRule();
	}
	
	//DerivedContext kernel::DerivedContext:
	//	description=ElementDescription?
	//	'context' name=ID ':' declaration=DataTypeDeclaration
	//	':=' definition=ContextPattern;
	public DerivedContextElements getDerivedContextAccess() {
		return pDerivedContext;
	}
	
	public ParserRule getDerivedContextRule() {
		return getDerivedContextAccess().getRule();
	}
	
	//GeneralPurposeVariable kernel::GeneralPurposeVariable:
	//	'var' name=ID ':' declaration=DataTypeDeclaration (':=' definition=GeneralExpression);
	public GeneralPurposeVariableElements getGeneralPurposeVariableAccess() {
		return pGeneralPurposeVariable;
	}
	
	public ParserRule getGeneralPurposeVariableRule() {
		return getGeneralPurposeVariableAccess().getRule();
	}
	
	//Parameter kernel::Parameter:
	//	description=ElementDescription?
	//	'param' name=ID ':' declaration=DataTypeDeclaration ('default' initializedTo=TypedValue)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Timer kernel::Timer:
	//	'timer' name=ID declaration=InbuiltDeclaration (('offset' offset=TimeValue)?
	//	& once?='onetime'?
	//	& paused?='paused'?
	//	& ':=' definition=GeneralExpression);
	public TimerElements getTimerAccess() {
		return pTimer;
	}
	
	public ParserRule getTimerRule() {
		return getTimerAccess().getRule();
	}
	
	//BeliefVariable kernel::BeliefVariable:
	//	BeliefVariableImpl | Property;
	public BeliefVariableElements getBeliefVariableAccess() {
		return pBeliefVariable;
	}
	
	public ParserRule getBeliefVariableRule() {
		return getBeliefVariableAccess().getRule();
	}
	
	//BeliefVariableImpl kernel::BeliefVariable:
	//	description=ElementDescription?
	//	'beliefvar' name=ID declaration=InbuiltDeclaration (('reference' reference=EDouble)? & ('survival'
	//	survival=TimeValue)?);
	public BeliefVariableImplElements getBeliefVariableImplAccess() {
		return pBeliefVariableImpl;
	}
	
	public ParserRule getBeliefVariableImplRule() {
		return getBeliefVariableImplAccess().getRule();
	}
	
	//Property kernel::Property:
	//	description=ElementDescription?
	//	'property' name=ID (':' declaration=DataTypeDeclaration ':=' transformation=OutputTransformation |
	//	declaration=InbuiltDeclaration) (('reference' reference=EDouble)?
	//	& ('survival' survival=TimeValue)?);
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	///*
	// * Sentencies
	// */ Sentence datatypes::Sentence:
	//	Observation;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//Import kernel::Import:
	//	'import' importURI=EString;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Observation kernel::Observation:
	//	description=ElementDescription?
	//	'observation' name=ID ':' pattern=ContextPattern (actions+=Action | '{' actions+=Action+ '}');
	public ObservationElements getObservationAccess() {
		return pObservation;
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}
	
	//Action kernel::Action:
	//	SetVariable | ClearEvidence | SetEvidence | TimerAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//TimerAction kernel::TimerAction:
	//	StartTimer | StopTimer | ResumeTimer;
	public TimerActionElements getTimerActionAccess() {
		return pTimerAction;
	}
	
	public ParserRule getTimerActionRule() {
		return getTimerActionAccess().getRule();
	}
	
	//SetVariable kernel::SetVariable:
	//	'sets' variable=[datatypes::TypedVariable|QualifiedName]
	//	':=' expression=GeneralExpression;
	public SetVariableElements getSetVariableAccess() {
		return pSetVariable;
	}
	
	public ParserRule getSetVariableRule() {
		return getSetVariableAccess().getRule();
	}
	
	//ClearEvidence kernel::ClearEvidence:
	//	'clears' target=[kernel::BeliefVariable|QualifiedName];
	public ClearEvidenceElements getClearEvidenceAccess() {
		return pClearEvidence;
	}
	
	public ParserRule getClearEvidenceRule() {
		return getClearEvidenceAccess().getRule();
	}
	
	//SetEvidence kernel::SetEvidence:
	//	influence=InfluenceEnum
	//	target=[kernel::BeliefVariable|QualifiedName] (strength=StrengthEnum? & ('survival' survival=TimeValue)?);
	public SetEvidenceElements getSetEvidenceAccess() {
		return pSetEvidence;
	}
	
	public ParserRule getSetEvidenceRule() {
		return getSetEvidenceAccess().getRule();
	}
	
	//enum InfluenceEnum returns kernel::InfluenceEnum:
	//	REINFORCE='reinforces' | UNDERMINE='undermines';
	public InfluenceEnumElements getInfluenceEnumAccess() {
		return eInfluenceEnum;
	}
	
	public EnumRule getInfluenceEnumRule() {
		return getInfluenceEnumAccess().getRule();
	}
	
	//enum StrengthEnum returns kernel::StrengthEnum:
	//	VERY_HIGH='veryhigh' | HIGH='high' | MEDIUM | LOW='low' | VERY_LOW='verylow';
	public StrengthEnumElements getStrengthEnumAccess() {
		return eStrengthEnum;
	}
	
	public EnumRule getStrengthEnumRule() {
		return getStrengthEnumAccess().getRule();
	}
	
	//StartTimer kernel::StartTimer:
	//	'starts' timer=[kernel::Timer|QualifiedName];
	public StartTimerElements getStartTimerAccess() {
		return pStartTimer;
	}
	
	public ParserRule getStartTimerRule() {
		return getStartTimerAccess().getRule();
	}
	
	//StopTimer kernel::StopTimer:
	//	'stops' timer=[kernel::Timer|QualifiedName];
	public StopTimerElements getStopTimerAccess() {
		return pStopTimer;
	}
	
	public ParserRule getStopTimerRule() {
		return getStopTimerAccess().getRule();
	}
	
	//ResumeTimer kernel::ResumeTimer:
	//	'resumes' timer=[kernel::Timer|QualifiedName];
	public ResumeTimerElements getResumeTimerAccess() {
		return pResumeTimer;
	}
	
	public ParserRule getResumeTimerRule() {
		return getResumeTimerAccess().getRule();
	}
	
	///* *********************************
	// * DATATYPE EPACKAGE
	// * *********************************
	//
	///* 
	// * Data type definitions
	// */ DataTypeDefinition datatypes::DataTypeDefinition:
	//	'type' name=EString ':' dataType=DataType;
	public DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return pDataTypeDefinition;
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}
	
	//DataType datatypes::DataType:
	//	BooleanType | EnumType | EventType | NumericType | UnitMeasuredType | TimeType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//BooleanType datatypes::BooleanType:
	//	{datatypes::BooleanType}
	//	'boolean' ('[' cardinality=INT ']')?;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//EnumType datatypes::EnumType:
	//	'enum' ('[' cardinality=INT ']')?
	//	'{'
	//	literals+=EnumLiteral (',' literals+=EnumLiteral)+
	//	'}';
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//EnumLiteral datatypes::EnumLiteral:
	//	{datatypes::EnumLiteral} name=ID;
	public EnumLiteralElements getEnumLiteralAccess() {
		return pEnumLiteral;
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}
	
	//EventType datatypes::EventType:
	//	{datatypes::EventType}
	//	'eventtype' ('[' cardinality=INT ']')?;
	public EventTypeElements getEventTypeAccess() {
		return pEventType;
	}
	
	public ParserRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}
	
	//NumericType datatypes::NumericType:
	//	{datatypes::NumericType}
	//	'number' ('[' cardinality=INT ']')?
	//	constraints+=NumericTypeConstraint*;
	public NumericTypeElements getNumericTypeAccess() {
		return pNumericType;
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}
	
	//NumericTypeConstraint datatypes::NumericTypeConstraint:
	//	LowerBound | UpperBound;
	public NumericTypeConstraintElements getNumericTypeConstraintAccess() {
		return pNumericTypeConstraint;
	}
	
	public ParserRule getNumericTypeConstraintRule() {
		return getNumericTypeConstraintAccess().getRule();
	}
	
	//LowerBound datatypes::LowerBound:
	//	'lower' value=EDouble;
	public LowerBoundElements getLowerBoundAccess() {
		return pLowerBound;
	}
	
	public ParserRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}
	
	//UpperBound datatypes::UpperBound:
	//	'upper' value=EDouble;
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//UnitMeasuredType datatypes::UnitMeasuredType:
	//	{datatypes::UnitMeasuredType}
	//	'number' ('[' cardinality=INT ']')?
	//	constraints+=NumericTypeConstraint*
	//	'unit' unit=EString
	//	constraints+=NumericTypeConstraint*;
	public UnitMeasuredTypeElements getUnitMeasuredTypeAccess() {
		return pUnitMeasuredType;
	}
	
	public ParserRule getUnitMeasuredTypeRule() {
		return getUnitMeasuredTypeAccess().getRule();
	}
	
	//TimeType datatypes::TimeType:
	//	{datatypes::TimeType}
	//	'time' ('[' cardinality=INT ']')?;
	public TimeTypeElements getTimeTypeAccess() {
		return pTimeType;
	}
	
	public ParserRule getTimeTypeRule() {
		return getTimeTypeAccess().getRule();
	}
	
	///*
	// * Typed Values
	// */ TypedValue datatypes::TypedValue:
	//	SingleValue | ArrayValue;
	public TypedValueElements getTypedValueAccess() {
		return pTypedValue;
	}
	
	public ParserRule getTypedValueRule() {
		return getTypedValueAccess().getRule();
	}
	
	//SingleValue datatypes::SingleValue:
	//	BooleanValue | EnumValue | NumericValue | EventValue;
	public SingleValueElements getSingleValueAccess() {
		return pSingleValue;
	}
	
	public ParserRule getSingleValueRule() {
		return getSingleValueAccess().getRule();
	}
	
	//EventValue datatypes::EventValue:
	//	{datatypes::EventValue}
	//	'event';
	public EventValueElements getEventValueAccess() {
		return pEventValue;
	}
	
	public ParserRule getEventValueRule() {
		return getEventValueAccess().getRule();
	}
	
	//BooleanValue datatypes::BooleanValue:
	//	{datatypes::BooleanValue} value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//EnumValue datatypes::EnumValue:
	//	{datatypes::EnumValue} value=[datatypes::EnumLiteral|LiteralQualifiedName];
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//NumericValue datatypes::NumericValue:
	//	NumericValue_Impl | UnitMeasuredValue;
	public NumericValueElements getNumericValueAccess() {
		return pNumericValue;
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//UnitMeasuredValue datatypes::UnitMeasuredValue:
	//	UnitMeasuredValue_Impl | TimeValue;
	public UnitMeasuredValueElements getUnitMeasuredValueAccess() {
		return pUnitMeasuredValue;
	}
	
	public ParserRule getUnitMeasuredValueRule() {
		return getUnitMeasuredValueAccess().getRule();
	}
	
	//NumericValue_Impl datatypes::NumericValue:
	//	{datatypes::NumericValue} value=EDouble;
	public NumericValue_ImplElements getNumericValue_ImplAccess() {
		return pNumericValue_Impl;
	}
	
	public ParserRule getNumericValue_ImplRule() {
		return getNumericValue_ImplAccess().getRule();
	}
	
	//UnitMeasuredValue_Impl datatypes::UnitMeasuredValue:
	//	{datatypes::UnitMeasuredValue} value=EDouble unit=EString;
	public UnitMeasuredValue_ImplElements getUnitMeasuredValue_ImplAccess() {
		return pUnitMeasuredValue_Impl;
	}
	
	public ParserRule getUnitMeasuredValue_ImplRule() {
		return getUnitMeasuredValue_ImplAccess().getRule();
	}
	
	//TimeValue datatypes::TimeValue:
	//	{datatypes::TimeValue} value=EDouble unit=TimeUnitEnum;
	public TimeValueElements getTimeValueAccess() {
		return pTimeValue;
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}
	
	//TimeUnitEnum:
	//	'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days'
	//	| 'millisecond' | 'second' | 'minute' | 'hour' | 'day';
	public TimeUnitEnumElements getTimeUnitEnumAccess() {
		return pTimeUnitEnum;
	}
	
	public ParserRule getTimeUnitEnumRule() {
		return getTimeUnitEnumAccess().getRule();
	}
	
	//ArrayValue datatypes::ArrayValue:
	//	NumericArray | BooleanArray | EnumArray;
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	//BooleanArray datatypes::ArrayValue:
	//	'[' values+=BooleanValue (',' values+=BooleanValue)* ']';
	public BooleanArrayElements getBooleanArrayAccess() {
		return pBooleanArray;
	}
	
	public ParserRule getBooleanArrayRule() {
		return getBooleanArrayAccess().getRule();
	}
	
	//EnumArray datatypes::ArrayValue:
	//	'[' values+=EnumValue (',' values+=EnumValue)* ']';
	public EnumArrayElements getEnumArrayAccess() {
		return pEnumArray;
	}
	
	public ParserRule getEnumArrayRule() {
		return getEnumArrayAccess().getRule();
	}
	
	//NumericArray datatypes::ArrayValue:
	//	NumericArray_Impl | UnitMeasuredArray;
	public NumericArrayElements getNumericArrayAccess() {
		return pNumericArray;
	}
	
	public ParserRule getNumericArrayRule() {
		return getNumericArrayAccess().getRule();
	}
	
	//UnitMeasuredArray datatypes::ArrayValue:
	//	UnitMeasuredArray_Impl | TimeArray;
	public UnitMeasuredArrayElements getUnitMeasuredArrayAccess() {
		return pUnitMeasuredArray;
	}
	
	public ParserRule getUnitMeasuredArrayRule() {
		return getUnitMeasuredArrayAccess().getRule();
	}
	
	//NumericArray_Impl datatypes::ArrayValue:
	//	'[' values+=NumericValue_Impl (',' values+=NumericValue_Impl)* ']';
	public NumericArray_ImplElements getNumericArray_ImplAccess() {
		return pNumericArray_Impl;
	}
	
	public ParserRule getNumericArray_ImplRule() {
		return getNumericArray_ImplAccess().getRule();
	}
	
	//UnitMeasuredArray_Impl datatypes::ArrayValue:
	//	'[' values+=UnitMeasuredValue_Impl (',' values+=UnitMeasuredValue_Impl)* ']';
	public UnitMeasuredArray_ImplElements getUnitMeasuredArray_ImplAccess() {
		return pUnitMeasuredArray_Impl;
	}
	
	public ParserRule getUnitMeasuredArray_ImplRule() {
		return getUnitMeasuredArray_ImplAccess().getRule();
	}
	
	//TimeArray datatypes::ArrayValue:
	//	'[' values+=TimeValue (',' values+=TimeValue)* ']';
	public TimeArrayElements getTimeArrayAccess() {
		return pTimeArray;
	}
	
	public ParserRule getTimeArrayRule() {
		return getTimeArrayAccess().getRule();
	}
	
	///*
	// * Typed Variables
	// */ DataTypeDeclaration datatypes::DataTypeDeclaration:
	//	InbuiltDeclaration | ReferencedDeclaration | ContainedDeclaration;
	public DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return pDataTypeDeclaration;
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}
	
	//ContainedDeclaration datatypes::ContainedDeclaration:
	//	type=DataType;
	public ContainedDeclarationElements getContainedDeclarationAccess() {
		return pContainedDeclaration;
	}
	
	public ParserRule getContainedDeclarationRule() {
		return getContainedDeclarationAccess().getRule();
	}
	
	//InbuiltDeclaration datatypes::InbuiltDeclaration:
	//	{datatypes::InbuiltDeclaration};
	public InbuiltDeclarationElements getInbuiltDeclarationAccess() {
		return pInbuiltDeclaration;
	}
	
	public ParserRule getInbuiltDeclarationRule() {
		return getInbuiltDeclarationAccess().getRule();
	}
	
	//ReferencedDeclaration datatypes::ReferencedDeclaration:
	//	type=[datatypes::DataTypeDefinition];
	public ReferencedDeclarationElements getReferencedDeclarationAccess() {
		return pReferencedDeclaration;
	}
	
	public ParserRule getReferencedDeclarationRule() {
		return getReferencedDeclarationAccess().getRule();
	}
	
	///* *********************************
	// * EXPRESSIONS EPACKAGE
	// * *********************************/ GeneralExpression expressions::GeneralExpression:
	//	term=Term;
	public GeneralExpressionElements getGeneralExpressionAccess() {
		return pGeneralExpression;
	}
	
	public ParserRule getGeneralExpressionRule() {
		return getGeneralExpressionAccess().getRule();
	}
	
	//OutputTransformation expressions::OutputTransformation:
	//	term=Term;
	public OutputTransformationElements getOutputTransformationAccess() {
		return pOutputTransformation;
	}
	
	public ParserRule getOutputTransformationRule() {
		return getOutputTransformationAccess().getRule();
	}
	
	//ContextPattern expressions::ContextPattern:
	//	term=Term;
	public ContextPatternElements getContextPatternAccess() {
		return pContextPattern;
	}
	
	public ParserRule getContextPatternRule() {
		return getContextPatternAccess().getRule();
	}
	
	//Term expressions::Term:
	//	OnceTerm | WhileTerm;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	///*
	// * Event Pattern Operators
	// */ //OnceTerm returns expressions::Term:
	////	WhileTerm
	////	('once' {expressions::OnceTerm.term=current})?;
	//OnceTerm expressions::OnceTerm:
	//	'once' term=WhileTerm;
	public OnceTermElements getOnceTermAccess() {
		return pOnceTerm;
	}
	
	public ParserRule getOnceTermRule() {
		return getOnceTermAccess().getRule();
	}
	
	//WhileTerm expressions::Term:
	//	RepetionTerm ({expressions::WhileTerm.left=current} 'while' '(' right=OrBooleanTerm ')')?;
	public WhileTermElements getWhileTermAccess() {
		return pWhileTerm;
	}
	
	public ParserRule getWhileTermRule() {
		return getWhileTermAccess().getRule();
	}
	
	//RepetionTerm expressions::Term:
	//	SequenceTerm ({expressions::RepeatTerm.term=current} 'repeat' '(' nrep=INT ')' | {expressions::RangeTerm.term=current}
	//	'range' '(' lowerBound=INT ',' upperBound=INT ')')?;
	public RepetionTermElements getRepetionTermAccess() {
		return pRepetionTerm;
	}
	
	public ParserRule getRepetionTermRule() {
		return getRepetionTermAccess().getRule();
	}
	
	//SequenceTerm expressions::Term:
	//	OrEventTerm ({expressions::FollowedByTerm.left=current} '->'
	//	right=ConditionalTerm)*;
	public SequenceTermElements getSequenceTermAccess() {
		return pSequenceTerm;
	}
	
	public ParserRule getSequenceTermRule() {
		return getSequenceTermAccess().getRule();
	}
	
	//OrEventTerm expressions::Term:
	//	AndEventTerm ({expressions::OrEventTerm.left=current} 'or' right=AndEventTerm)*;
	public OrEventTermElements getOrEventTermAccess() {
		return pOrEventTerm;
	}
	
	public ParserRule getOrEventTermRule() {
		return getOrEventTermAccess().getRule();
	}
	
	//AndEventTerm expressions::Term:
	//	(NotEventTerm | ConditionalTerm) ({expressions::AndEventTerm.left=current} 'and' right=(NotEventTerm |
	//	ConditionalTerm))*;
	public AndEventTermElements getAndEventTermAccess() {
		return pAndEventTerm;
	}
	
	public ParserRule getAndEventTermRule() {
		return getAndEventTermAccess().getRule();
	}
	
	//NotEventTerm expressions::Term:
	//	{expressions::NotEventTerm}
	//	'not' term=ConditionalTerm;
	public NotEventTermElements getNotEventTermAccess() {
		return pNotEventTerm;
	}
	
	public ParserRule getNotEventTermRule() {
		return getNotEventTermAccess().getRule();
	}
	
	///*
	// * Conditional Operator 
	// */ ConditionalTerm expressions::Term:
	//	OrBooleanTerm ({expressions::ConditionalTerm.terms+=current} '?' terms+=OrBooleanTerm ':' terms+=ConditionalTerm)?;
	public ConditionalTermElements getConditionalTermAccess() {
		return pConditionalTerm;
	}
	
	public ParserRule getConditionalTermRule() {
		return getConditionalTermAccess().getRule();
	}
	
	///*
	// * Logical Terms
	// */ OrBooleanTerm expressions::Term:
	//	AndBooleanTerm ({expressions::OrBooleanTerm.left=current} '|' right=AndBooleanTerm)*;
	public OrBooleanTermElements getOrBooleanTermAccess() {
		return pOrBooleanTerm;
	}
	
	public ParserRule getOrBooleanTermRule() {
		return getOrBooleanTermAccess().getRule();
	}
	
	//AndBooleanTerm expressions::Term:
	//	(NotBooleanTerm | RelationalTerm) ({expressions::AndBooleanTerm.left=current} '&' right=(NotBooleanTerm |
	//	RelationalTerm))*;
	public AndBooleanTermElements getAndBooleanTermAccess() {
		return pAndBooleanTerm;
	}
	
	public ParserRule getAndBooleanTermRule() {
		return getAndBooleanTermAccess().getRule();
	}
	
	//NotBooleanTerm expressions::Term:
	//	{expressions::NotBooleanTerm}
	//	'!' term=RelationalTerm;
	public NotBooleanTermElements getNotBooleanTermAccess() {
		return pNotBooleanTerm;
	}
	
	public ParserRule getNotBooleanTermRule() {
		return getNotBooleanTermAccess().getRule();
	}
	
	///*
	// * Relational Term
	// */ RelationalTerm expressions::Term:
	//	AdditionTerm (({expressions::EqualTerm.left=current} '='
	//	| {expressions::LessThanTerm.left=current} '<'
	//	| {expressions::GreaterThanTerm.left=current} '>'
	//	| {expressions::LessEqualTerm.left=current} '<='
	//	| {expressions::GreaterEqualTerm.left=current} '>='
	//	| {expressions::NotEqualTerm.left=current} '!=') right=AdditionTerm)?;
	public RelationalTermElements getRelationalTermAccess() {
		return pRelationalTerm;
	}
	
	public ParserRule getRelationalTermRule() {
		return getRelationalTermAccess().getRule();
	}
	
	///*
	// * Arithmetic Terms
	// */ AdditionTerm expressions::Term:
	//	MultiplicationTerm (({expressions::AddTerm.left=current} '+' | {expressions::SubTerm.left=current} '-')
	//	right=MultiplicationTerm)*;
	public AdditionTermElements getAdditionTermAccess() {
		return pAdditionTerm;
	}
	
	public ParserRule getAdditionTermRule() {
		return getAdditionTermAccess().getRule();
	}
	
	//MultiplicationTerm expressions::Term:
	//	PrimaryTerm (({expressions::MultTerm.left=current} '*' | {expressions::DivTerm.left=current} '/') right=PrimaryTerm)*;
	public MultiplicationTermElements getMultiplicationTermAccess() {
		return pMultiplicationTerm;
	}
	
	public ParserRule getMultiplicationTermRule() {
		return getMultiplicationTermAccess().getRule();
	}
	
	///*
	// * Primary Terms
	// */ PrimaryTerm expressions::Term:
	//	'(' Term ')' | ConstTerm | VarTerm | SelfTerm | FunctionTerm;
	public PrimaryTermElements getPrimaryTermAccess() {
		return pPrimaryTerm;
	}
	
	public ParserRule getPrimaryTermRule() {
		return getPrimaryTermAccess().getRule();
	}
	
	//VarTerm expressions::VarTerm:
	//	variable=[datatypes::TypedVariable|QualifiedName];
	public VarTermElements getVarTermAccess() {
		return pVarTerm;
	}
	
	public ParserRule getVarTermRule() {
		return getVarTermAccess().getRule();
	}
	
	//ConstTerm expressions::ConstTerm:
	//	value=TypedValue;
	public ConstTermElements getConstTermAccess() {
		return pConstTerm;
	}
	
	public ParserRule getConstTermRule() {
		return getConstTermAccess().getRule();
	}
	
	//SelfTerm expressions::SelfTerm:
	//	{expressions::SelfTerm}
	//	'belief';
	public SelfTermElements getSelfTermAccess() {
		return pSelfTerm;
	}
	
	public ParserRule getSelfTermRule() {
		return getSelfTermAccess().getRule();
	}
	
	///* 
	// * Functions
	// */ FunctionTerm expressions::FunctionTerm:
	//	ArithFunction | AggregationFunction | PatternFunction | CollectionFunction | ScheduleFunction;
	public FunctionTermElements getFunctionTermAccess() {
		return pFunctionTerm;
	}
	
	public ParserRule getFunctionTermRule() {
		return getFunctionTermAccess().getRule();
	}
	
	//ScheduleFunction expressions::ScheduleFunction:
	//	{expressions::ScheduleFunction}
	//	'schedule' '(' pattern=EString ')';
	public ScheduleFunctionElements getScheduleFunctionAccess() {
		return pScheduleFunction;
	}
	
	public ParserRule getScheduleFunctionRule() {
		return getScheduleFunctionAccess().getRule();
	}
	
	//ArithFunction expressions::ArithFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=ArithFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public ArithFunctionElements getArithFunctionAccess() {
		return pArithFunction;
	}
	
	public ParserRule getArithFunctionRule() {
		return getArithFunctionAccess().getRule();
	}
	
	//enum ArithFtnEnum returns expressions::ArithFtnEnum:
	//	POW='pow' | SQRT='sqrt' | EXP='exp' | ABS='abs';
	public ArithFtnEnumElements getArithFtnEnumAccess() {
		return eArithFtnEnum;
	}
	
	public EnumRule getArithFtnEnumRule() {
		return getArithFtnEnumAccess().getRule();
	}
	
	//AggregationFunction expressions::AggregationFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=AggregationFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public AggregationFunctionElements getAggregationFunctionAccess() {
		return pAggregationFunction;
	}
	
	public ParserRule getAggregationFunctionRule() {
		return getAggregationFunctionAccess().getRule();
	}
	
	//enum AggregationFtnEnum returns expressions::AggregationFtnEnum:
	//	AVG='avg' | MIN='min' | MAX='max' | COUNT='count' | SUM='sum' | DECREASING='decreasing' | INCREASING='increasing' |
	//	STABLE='stable';
	public AggregationFtnEnumElements getAggregationFtnEnumAccess() {
		return eAggregationFtnEnum;
	}
	
	public EnumRule getAggregationFtnEnumRule() {
		return getAggregationFtnEnumAccess().getRule();
	}
	
	//PatternFunction expressions::PatternFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=PatternFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public PatternFunctionElements getPatternFunctionAccess() {
		return pPatternFunction;
	}
	
	public ParserRule getPatternFunctionRule() {
		return getPatternFunctionAccess().getRule();
	}
	
	//enum PatternFtnEnum returns expressions::PatternFtnEnum:
	//	EVENT_WHEN='eventWhen' | UPDATE='update' | PERIOD='period';
	public PatternFtnEnumElements getPatternFtnEnumAccess() {
		return ePatternFtnEnum;
	}
	
	public EnumRule getPatternFtnEnumRule() {
		return getPatternFtnEnumAccess().getRule();
	}
	
	//CollectionFunction expressions::CollectionFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=CollectionFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public CollectionFunctionElements getCollectionFunctionAccess() {
		return pCollectionFunction;
	}
	
	public ParserRule getCollectionFunctionRule() {
		return getCollectionFunctionAccess().getRule();
	}
	
	//enum CollectionFtnEnum returns expressions::CollectionFtnEnum:
	//	FIRST='first' | LAST='last' | AT='at' | SIZE='size' | IS_EMPTY='isEmpty' | INCLUDES='includes';
	public CollectionFtnEnumElements getCollectionFtnEnumAccess() {
		return eCollectionFtnEnum;
	}
	
	public EnumRule getCollectionFtnEnumRule() {
		return getCollectionFtnEnumAccess().getRule();
	}
	
	///* *********************************
	// * Auxiliary grammar
	// * *********************************/ EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT ('.' INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	////'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//LiteralQualifiedName:
	//	ID ('::' ID)+;
	public LiteralQualifiedNameElements getLiteralQualifiedNameAccess() {
		return pLiteralQualifiedName;
	}
	
	public ParserRule getLiteralQualifiedNameRule() {
		return getLiteralQualifiedNameAccess().getRule();
	}
	
	//ElementDescription:
	//	ROQME_DESCRIPTION;
	public ElementDescriptionElements getElementDescriptionAccess() {
		return pElementDescription;
	}
	
	public ParserRule getElementDescriptionRule() {
		return getElementDescriptionAccess().getRule();
	}
	
	//terminal ROQME_DESCRIPTION:
	//	'/**'->'*/';
	public TerminalRule getROQME_DESCRIPTIONRule() {
		return tROQME_DESCRIPTION;
	}
	
	//@ Override terminal ML_COMMENT:
	//	('/*' !'*')->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
