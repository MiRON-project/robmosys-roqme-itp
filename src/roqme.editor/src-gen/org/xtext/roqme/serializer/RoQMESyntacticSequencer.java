/*
 * generated by Xtext 2.12.0
 */
package org.xtext.roqme.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.roqme.services.RoQMEGrammarAccess;

@SuppressWarnings("all")
public class RoQMESyntacticSequencer extends AbstractSyntacticSequencer {

	protected RoQMEGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AggregationFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_ArithFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_CollectionFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_PatternFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_PrimaryTerm_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_PrimaryTerm_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RoQMEGrammarAccess) access;
		match_AggregationFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAggregationFunctionAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAggregationFunctionAccess().getRightParenthesisKeyword_2_2()));
		match_ArithFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getArithFunctionAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getArithFunctionAccess().getRightParenthesisKeyword_2_2()));
		match_CollectionFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCollectionFunctionAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getCollectionFunctionAccess().getRightParenthesisKeyword_2_2()));
		match_PatternFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPatternFunctionAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getPatternFunctionAccess().getRightParenthesisKeyword_2_2()));
		match_PrimaryTerm_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryTermAccess().getLeftParenthesisKeyword_0_0());
		match_PrimaryTerm_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryTermAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AggregationFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_AggregationFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_ArithFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CollectionFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_CollectionFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PatternFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_PatternFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryTerm_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_PrimaryTerm_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryTerm_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_PrimaryTerm_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=AggregationFtnEnum (ambiguity) (rule end)
	 */
	protected void emit_AggregationFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ArithFtnEnum (ambiguity) (rule end)
	 */
	protected void emit_ArithFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=CollectionFtnEnum (ambiguity) (rule end)
	 */
	protected void emit_CollectionFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=PatternFtnEnum (ambiguity) (rule end)
	 */
	protected void emit_PatternFunction___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' term=RelationalTerm
	 *     (rule start) (ambiguity) 'belief' (rule start)
	 *     (rule start) (ambiguity) 'not' term=ConditionalTerm
	 *     (rule start) (ambiguity) 'once' term=WhileTerm
	 *     (rule start) (ambiguity) 'schedule' '(' pattern=EString
	 *     (rule start) (ambiguity) name=AggregationFtnEnum
	 *     (rule start) (ambiguity) name=ArithFtnEnum
	 *     (rule start) (ambiguity) name=CollectionFtnEnum
	 *     (rule start) (ambiguity) name=PatternFtnEnum
	 *     (rule start) (ambiguity) terms+=SelfTerm
	 *     (rule start) (ambiguity) terms+=VarTerm
	 *     (rule start) (ambiguity) value=TypedValue
	 *     (rule start) (ambiguity) variable=[TypedVariable|QualifiedName]
	 *     (rule start) (ambiguity) {AddTerm.left=}
	 *     (rule start) (ambiguity) {AndBooleanTerm.left=}
	 *     (rule start) (ambiguity) {AndEventTerm.left=}
	 *     (rule start) (ambiguity) {ConditionalTerm.terms+=}
	 *     (rule start) (ambiguity) {DivTerm.left=}
	 *     (rule start) (ambiguity) {EqualTerm.left=}
	 *     (rule start) (ambiguity) {FollowedByTerm.left=}
	 *     (rule start) (ambiguity) {GreaterEqualTerm.left=}
	 *     (rule start) (ambiguity) {GreaterThanTerm.left=}
	 *     (rule start) (ambiguity) {LessEqualTerm.left=}
	 *     (rule start) (ambiguity) {LessThanTerm.left=}
	 *     (rule start) (ambiguity) {MultTerm.left=}
	 *     (rule start) (ambiguity) {NotEqualTerm.left=}
	 *     (rule start) (ambiguity) {OrBooleanTerm.left=}
	 *     (rule start) (ambiguity) {OrEventTerm.left=}
	 *     (rule start) (ambiguity) {RangeTerm.term=}
	 *     (rule start) (ambiguity) {RepeatTerm.term=}
	 *     (rule start) (ambiguity) {SubTerm.left=}
	 *     (rule start) (ambiguity) {WhileTerm.left=}
	 */
	protected void emit_PrimaryTerm_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' term=RelationalTerm
	 *     (rule start) (ambiguity) 'not' term=ConditionalTerm
	 *     (rule start) (ambiguity) 'once' term=WhileTerm
	 *     (rule start) (ambiguity) {AddTerm.left=}
	 *     (rule start) (ambiguity) {AndBooleanTerm.left=}
	 *     (rule start) (ambiguity) {AndEventTerm.left=}
	 *     (rule start) (ambiguity) {ConditionalTerm.terms+=}
	 *     (rule start) (ambiguity) {DivTerm.left=}
	 *     (rule start) (ambiguity) {EqualTerm.left=}
	 *     (rule start) (ambiguity) {FollowedByTerm.left=}
	 *     (rule start) (ambiguity) {GreaterEqualTerm.left=}
	 *     (rule start) (ambiguity) {GreaterThanTerm.left=}
	 *     (rule start) (ambiguity) {LessEqualTerm.left=}
	 *     (rule start) (ambiguity) {LessThanTerm.left=}
	 *     (rule start) (ambiguity) {MultTerm.left=}
	 *     (rule start) (ambiguity) {NotEqualTerm.left=}
	 *     (rule start) (ambiguity) {OrBooleanTerm.left=}
	 *     (rule start) (ambiguity) {OrEventTerm.left=}
	 *     (rule start) (ambiguity) {RangeTerm.term=}
	 *     (rule start) (ambiguity) {RepeatTerm.term=}
	 *     (rule start) (ambiguity) {SubTerm.left=}
	 *     (rule start) (ambiguity) {WhileTerm.left=}
	 */
	protected void emit_PrimaryTerm_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
