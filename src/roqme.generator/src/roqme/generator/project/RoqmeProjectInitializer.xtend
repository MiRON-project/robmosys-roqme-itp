//  This file belongs to the RoQME toolchain.
//  Copyright (C) 2019  University of Extremadura, University of Málaga, Biometric Vox.
//
//  RoQME is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  any later version.
//
//  RoQME is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  GNU GPLv3 link: http://www.gnu.org/licenses/gpl-3.0.html

package roqme.generator.project

import org.eclipse.xtext.generator.IFileSystemAccess2
import java.util.List
import java.util.Map
import org.ecore.base.basicAttributes.PrimitiveType
import org.eclipse.emf.ecore.resource.Resource
import java.util.ArrayList
import org.ecore.base.basicAttributes.InlineEnumerationType
import org.ecore.service.communicationObject.Enumeration

class RoqmeProjectInitializer {

	def generateModels(String projectName, List<Map<String, Object>> contexts, IFileSystemAccess2 fsa) {	
		fsa.generateFile(projectName + '.roqme', createRoqmeModel(projectName, contexts));
		fsa.generateFile(projectName + '.roqmemap', createRoqmemapModel(projectName, contexts));
	}
	
	def createRoqmeModel(String projectName, List<Map<String, Object>> contexts) {
	
		'''
		/*
		 * RoQME Model. Generated by the RoQME Modeling Tool
		 */
		 
		roqme «projectName»
		
		«FOR ctx : contexts»	
		context «ctx.get("context")» : «
			IF ctx.get("attrType") instanceof PrimitiveType»«
				val value = ctx.get("attrType") as PrimitiveType»«
				IF value.getTypeName().toString().equalsIgnoreCase("Boolean")»boolean«
				ELSEIF value.getTypeName().toString().equalsIgnoreCase("String")»TYPE NOT SUPPORTED«
				ELSE»number«ENDIF»«
			ELSEIF ctx.get("attrType") instanceof InlineEnumerationType»«
				val value = ctx.get("attrType") as InlineEnumerationType»enum «
				FOR e : value.enums BEFORE "{" SEPARATOR ", " AFTER "}"»«
					e.getName()»«
				ENDFOR»«
			ELSEIF ctx.get("attrType") instanceof Enumeration»«
				val value = ctx.get("attrType") as Enumeration»enum «
				FOR e : value.enums BEFORE "{" SEPARATOR ", " AFTER "}"»«
					e.getName()»«
				ENDFOR»«
			ENDIF»
		«ENDFOR»	
		'''
	}

	
	def createRoqmemapModel(String projectName, List<Map<String, Object>> contexts) {
		
		var imports = new ArrayList<String>();
		var Resource res;
		for(ctx : contexts) {
			res = ctx.get("resource") as Resource;
			if(!imports.contains(res.getURI().toString())) {
				imports.add(res.getURI().toString());
			}
		}
		
		'''
		/*
		 * RoQME-to-RobMoSys mapping model. Generated by the RoQME Modeling Tool
		 */
		
		import "«projectName».roqme"
		«FOR i : imports»
		import "«i»"
		«ENDFOR»
		
		«FOR ctx : contexts»	
		context «ctx.get("context")» monitor {
			service : «ctx.get("repository")».«ctx.get("service")»
			attribute : «ctx.get("attribute")»«
			IF ctx.get("attrType") instanceof PrimitiveType»«
				val value = ctx.get("attrType") as PrimitiveType» [«value.getTypeName()»]«
			ELSEIF ctx.get("attrType") instanceof InlineEnumerationType» [Enum]«
			ELSEIF ctx.get("attrType") instanceof Enumeration» [Enum]«
			ENDIF»
		}
		«ENDFOR»	
		'''
	}
}