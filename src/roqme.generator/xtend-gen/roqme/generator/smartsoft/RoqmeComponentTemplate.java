package roqme.generator.smartsoft;

import java.util.Map;
import java.util.Vector;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.ecore.service.communicationPattern.EventPattern;
import org.ecore.service.communicationPattern.PushPattern;
import org.ecore.service.communicationPattern.QueryPattern;
import org.ecore.service.communicationPattern.SendPattern;
import roqme.metamodel.mapping.ConfigOpt;
import roqme.metamodel.mapping.MappingModel;
import roqme.metamodel.mapping.MinDiffBtwUpdates;
import roqme.metamodel.mapping.Monitor;
import roqme.metamodel.mapping.Period;

@SuppressWarnings("all")
public class RoqmeComponentTemplate {
  private String projectName;
  
  private String rootPath;
  
  public RoqmeComponentTemplate(final String projectName, final boolean createProject) {
    this.projectName = projectName;
    String _xifexpression = null;
    if (createProject) {
      _xifexpression = (projectName + "/");
    } else {
      _xifexpression = "";
    }
    this.rootPath = _xifexpression;
  }
  
  public CharSequence compile(final MappingModel mm, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    fsa.generateFile((this.rootPath + "smartsoft/CMakeLists.txt"), this.generateCMakeLists(mm));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((this.rootPath + ".classpath"), this.generateClassPath(mm));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((this.rootPath + ".cproject"), this.generateCProject(mm));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((this.rootPath + ".project"), this.generateProject(mm));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((this.rootPath + ".settings/language.settings"), this.generateLanguageSettings(mm));
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    fsa.generateFile((this.rootPath + "representations.aird"), this.generateRepresentations(mm));
    _builder.append("        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((((this.rootPath + "model/") + this.projectName) + ".component"), this.generateComponentFile(mm, fsa));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((((this.rootPath + "model/") + this.projectName) + ".componentDocumentation"), this.generateComponentDocFile(mm, fsa));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    fsa.generateFile((((this.rootPath + "model/") + this.projectName) + ".componentParameters"), this.generateComponentParamFile(mm, fsa));
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    CharSequence _generateSmartSoftSrcFolder = this.generateSmartSoftSrcFolder(mm, fsa);
    _builder.append(_generateSmartSoftSrcFolder, "        ");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateComponentFile(final MappingModel mm, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ComponentDefinition ");
    _builder.append(this.projectName);
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("{\t");
    _builder.newLine();
    {
      EList<Monitor> _monitors = mm.getMonitors();
      for(final Monitor monitor : _monitors) {
        _builder.append("\t       \t");
        String[] segments = monitor.getService().eContainer().toString().split(" ");
        _builder.newLineIfNotEmpty();
        int _length = segments.length;
        int _minus = (_length - 1);
        final String repositoryNameAux = segments[_minus];
        _builder.newLineIfNotEmpty();
        int _length_1 = repositoryNameAux.length();
        int _minus_1 = (_length_1 - 1);
        final String repositoryName = repositoryNameAux.substring(0, _minus_1);
        _builder.append(" \t\t");
        _builder.newLineIfNotEmpty();
        {
          EList<EObject> _eContents = monitor.getService().eContents();
          for(final EObject pattern : _eContents) {
            {
              if ((pattern instanceof QueryPattern)) {
                _builder.append("RequestPort ");
                String _name = monitor.getService().getName();
                _builder.append(_name);
                _builder.append("Req");
                String _firstUpper = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper);
                _builder.append(" implements ");
                _builder.append(repositoryName);
                _builder.append(".");
                String _name_1 = monitor.getService().getName();
                _builder.append(_name_1);
                _builder.append("{}");
                _builder.newLineIfNotEmpty();
                _builder.append("Activity ");
                String _name_2 = monitor.getService().getName();
                _builder.append(_name_2);
                _builder.append("ReqActivity");
                String _firstUpper_1 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_1);
                _builder.append(" {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("RequestPortLink ");
                String _name_3 = monitor.getService().getName();
                _builder.append(_name_3, "\t");
                _builder.append("Req");
                String _firstUpper_2 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_2, "\t");
                _builder.newLineIfNotEmpty();
                {
                  EList<ConfigOpt> _opts = monitor.getOpts();
                  for(final ConfigOpt options : _opts) {
                    {
                      if ((options instanceof Period)) {
                        _builder.append("\t\t\t");
                        final Period period = ((Period) options);
                        _builder.newLineIfNotEmpty();
                        _builder.append("DefaultTrigger PeriodicTimer ");
                        int _value = period.getValue();
                        _builder.append(_value);
                        _builder.append(".0 Hz\t\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              } else {
                if ((((pattern instanceof PushPattern) || (pattern instanceof SendPattern)) || (pattern instanceof EventPattern))) {
                  _builder.append("InputPort ");
                  String _name_4 = monitor.getService().getName();
                  _builder.append(_name_4);
                  _builder.append("In");
                  String _firstUpper_3 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                  _builder.append(_firstUpper_3);
                  _builder.append("  implements ");
                  _builder.append(repositoryName);
                  _builder.append(".");
                  String _name_5 = monitor.getService().getName();
                  _builder.append(_name_5);
                  _builder.append("{}");
                  _builder.newLineIfNotEmpty();
                  _builder.append("InputHandler ");
                  String _name_6 = monitor.getService().getName();
                  _builder.append(_name_6);
                  _builder.append("InHandler");
                  String _firstUpper_4 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                  _builder.append(_firstUpper_4);
                  _builder.append(" triggeredFrom ");
                  String _name_7 = monitor.getService().getName();
                  _builder.append(_name_7);
                  _builder.append("In");
                  String _firstUpper_5 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                  _builder.append(_firstUpper_5);
                  _builder.append(" {}");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("Activity EstimateActivity");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DefaultTrigger PeriodicTimer 10.0 Hz");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("OutputPort EstimateServiceOut implements CommRoqmeEstimate.EstimateService realizedBy EstimateActivity {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateComponentDocFile(final MappingModel mm, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ComponentDocumentation ");
    _builder.append(this.projectName);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateComponentParamFile(final MappingModel mm, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ComponentParameter ");
    _builder.append(this.projectName);
    _builder.append("Params component ");
    _builder.append(this.projectName);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public Map<String, Integer> getElementPatterns(final MappingModel mm) {
    Map<String, Integer> mapType = null;
    return mapType;
  }
  
  public CharSequence generateSmartSoftSrcFolder(final MappingModel mm, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Monitor> _monitors = mm.getMonitors();
      for(final Monitor monitor : _monitors) {
        String communicationType = monitor.getService().eClass().getName();
        _builder.newLineIfNotEmpty();
        {
          if ((communicationType.contains("JoiningService") || communicationType.contains("ForkingService"))) {
            String _name = monitor.getService().getName();
            String _plus = ((this.rootPath + "smartsoft/src/") + _name);
            String _plus_1 = (_plus + "InHandler");
            String _firstUpper = StringExtensions.toFirstUpper(monitor.getContext().getName());
            String _plus_2 = (_plus_1 + _firstUpper);
            String _plus_3 = (_plus_2 + ".hh");
            fsa.generateFile(_plus_3, this.generateHandlersHH(monitor));
            _builder.newLineIfNotEmpty();
            String _name_1 = monitor.getService().getName();
            String _plus_4 = ((this.rootPath + "smartsoft/src/") + _name_1);
            String _plus_5 = (_plus_4 + "InHandler");
            String _firstUpper_1 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            String _plus_6 = (_plus_5 + _firstUpper_1);
            String _plus_7 = (_plus_6 + ".cc");
            fsa.generateFile(_plus_7, this.generateHandlersCC(monitor));
            _builder.newLineIfNotEmpty();
          } else {
            boolean _contains = communicationType.contains("RequestAnswerService");
            if (_contains) {
              String _name_2 = monitor.getService().getName();
              String _plus_8 = ((this.rootPath + "smartsoft/src/") + _name_2);
              String _plus_9 = (_plus_8 + "ReqActivity");
              String _firstUpper_2 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              String _plus_10 = (_plus_9 + _firstUpper_2);
              String _plus_11 = (_plus_10 + ".hh");
              fsa.generateFile(_plus_11, this.generateActivityHH(monitor));
              _builder.newLineIfNotEmpty();
              String _name_3 = monitor.getService().getName();
              String _plus_12 = ((this.rootPath + "smartsoft/src/") + _name_3);
              String _plus_13 = (_plus_12 + "ReqActivity");
              String _firstUpper_3 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              String _plus_14 = (_plus_13 + _firstUpper_3);
              String _plus_15 = (_plus_14 + ".cc");
              fsa.generateFile(_plus_15, this.generateActivityCC(monitor));
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("       ");
    fsa.generateFile((this.rootPath + "smartsoft/src/EstimateActivity.hh"), this.generateEstimateActivityHH());
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    fsa.generateFile((this.rootPath + "smartsoft/src/EstimateActivity.cc"), this.generateEstimateActivityCC());
    _builder.newLineIfNotEmpty();
    fsa.generateFile((this.rootPath + "smartsoft/src/EstimateListener.hh"), this.generateEstimateListenerHH());
    _builder.newLineIfNotEmpty();
    _builder.append("       ");
    fsa.generateFile((this.rootPath + "smartsoft/src/EstimateListener.cc"), this.generateEstimateListenerCC());
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateHandlersHH(final Monitor monitor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" \t\t");
    String type = monitor.getSourceType();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String roqmeType = this.getType(type);
    _builder.newLineIfNotEmpty();
    _builder.append("     \t");
    String roqmetypelower = roqmeType.toLowerCase();
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    String[] segments = monitor.getService().eContainer().toString().split(" ");
    _builder.newLineIfNotEmpty();
    int _length = segments.length;
    int _minus = (_length - 1);
    final String repositoryNameAux = segments[_minus];
    _builder.newLineIfNotEmpty();
    int _length_1 = repositoryNameAux.length();
    int _minus_1 = (_length_1 - 1);
    final String repositoryName = repositoryNameAux.substring(0, _minus_1);
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("#ifndef _");
    String _upperCase = monitor.getService().getName().toUpperCase();
    _builder.append(_upperCase);
    _builder.append("INHANDLER");
    String _firstUpper = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper);
    _builder.append("_HH");
    _builder.newLineIfNotEmpty();
    _builder.append("#define _");
    String _upperCase_1 = monitor.getService().getName().toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("INHANDLER");
    String _firstUpper_1 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_1);
    _builder.append("_HH");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include \"");
    String _name = monitor.getService().getName();
    _builder.append(_name);
    _builder.append("InHandler");
    String _firstUpper_2 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_2);
    _builder.append("Core.hh\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <RoqmeWriterImpl.h>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("class ");
    String _name_1 = monitor.getService().getName();
    _builder.append(_name_1);
    _builder.append("InHandler");
    String _firstUpper_3 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_3);
    _builder.append(" : public ");
    String _name_2 = monitor.getService().getName();
    _builder.append(_name_2);
    _builder.append("InHandler");
    String _firstUpper_4 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_4);
    _builder.append("Core");
    _builder.newLineIfNotEmpty();
    _builder.append("{\t\t");
    _builder.newLine();
    _builder.append("public:");
    _builder.newLine();
    {
      EList<EObject> _eContents = monitor.getService().eContents();
      for(final EObject pattern : _eContents) {
        {
          if ((pattern instanceof PushPattern)) {
            _builder.append("\t");
            _builder.append("\t");
            PushPattern dad = ((PushPattern) pattern);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_3 = monitor.getService().getName();
            _builder.append(_name_3, "\t");
            _builder.append("InHandler");
            String _firstUpper_5 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            _builder.append(_firstUpper_5, "\t");
            _builder.append("(Smart::InputSubject<");
            _builder.append(repositoryName, "\t");
            _builder.append("::");
            String _name_4 = dad.getDataType().getName();
            _builder.append(_name_4, "\t");
            _builder.append("> *subject, const int &prescaleFactor=1);");
            _builder.newLineIfNotEmpty();
          } else {
            if ((pattern instanceof SendPattern)) {
              _builder.append("\t");
              _builder.append("\t");
              SendPattern dad_1 = ((SendPattern) pattern);
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              String _name_5 = monitor.getService().getName();
              _builder.append(_name_5, "\t");
              _builder.append("InHandler");
              String _firstUpper_6 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              _builder.append(_firstUpper_6, "\t");
              _builder.append("(Smart::InputSubject<");
              _builder.append(repositoryName, "\t");
              _builder.append("::");
              String _name_6 = dad_1.getDataType().getName();
              _builder.append(_name_6, "\t");
              _builder.append("> *subject, const int &prescaleFactor=1);");
              _builder.newLineIfNotEmpty();
            } else {
              if ((pattern instanceof EventPattern)) {
                _builder.append("\t");
                _builder.append("\t");
                EventPattern dad_2 = ((EventPattern) pattern);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _name_7 = monitor.getService().getName();
                _builder.append(_name_7, "\t");
                _builder.append("InHandler");
                String _firstUpper_7 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_7, "\t");
                _builder.append("(Smart::InputSubject<");
                _builder.append(repositoryName, "\t");
                _builder.append("::");
                String _name_8 = dad_2.getEventType().getName();
                _builder.append(_name_8, "\t");
                _builder.append("> *subject, const int &prescaleFactor=1);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("virtual ~");
    String _name_9 = monitor.getService().getName();
    _builder.append(_name_9, "\t");
    _builder.append("InHandler");
    String _firstUpper_8 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_8, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<EObject> _eContents_1 = monitor.getService().eContents();
      for(final EObject pattern_1 : _eContents_1) {
        {
          if ((pattern_1 instanceof PushPattern)) {
            _builder.append("\t");
            _builder.append("\t");
            PushPattern dad_3 = ((PushPattern) pattern_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("virtual void on_");
            String _name_10 = monitor.getService().getName();
            _builder.append(_name_10, "\t");
            _builder.append("In");
            String _firstUpper_9 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            _builder.append(_firstUpper_9, "\t");
            _builder.append("(const ");
            _builder.append(repositoryName, "\t");
            _builder.append("::");
            String _name_11 = dad_3.getDataType().getName();
            _builder.append(_name_11, "\t");
            _builder.append(" &input);");
            _builder.newLineIfNotEmpty();
          } else {
            if ((pattern_1 instanceof SendPattern)) {
              _builder.append("\t");
              _builder.append("\t");
              SendPattern dad_4 = ((SendPattern) pattern_1);
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("virtual void on_");
              String _name_12 = monitor.getService().getName();
              _builder.append(_name_12, "\t");
              _builder.append("In");
              String _firstUpper_10 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              _builder.append(_firstUpper_10, "\t");
              _builder.append("(const ");
              _builder.append(repositoryName, "\t");
              _builder.append("::");
              String _name_13 = dad_4.getDataType().getName();
              _builder.append(_name_13, "\t");
              _builder.append(" &input);");
              _builder.newLineIfNotEmpty();
            } else {
              if ((pattern_1 instanceof EventPattern)) {
                _builder.append("\t");
                _builder.append("\t");
                EventPattern dad_5 = ((EventPattern) pattern_1);
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("virtual void on_");
                String _name_14 = monitor.getService().getName();
                _builder.append(_name_14, "\t");
                _builder.append("In");
                String _firstUpper_11 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_11, "\t");
                _builder.append("(const ");
                _builder.append(repositoryName, "\t");
                _builder.append("::");
                String _name_15 = dad_5.getEventType().getName();
                _builder.append(_name_15, "\t");
                _builder.append(" &input);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("private:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Roqme::Roqme");
    _builder.append(roqmeType, "\t");
    _builder.append("Writer ");
    _builder.append(roqmetypelower, "\t");
    _builder.append("_dw;");
    _builder.newLineIfNotEmpty();
    {
      EList<ConfigOpt> _opts = monitor.getOpts();
      for(final ConfigOpt options : _opts) {
        {
          if ((options instanceof MinDiffBtwUpdates)) {
            _builder.append("\t");
            _builder.append("bool activatedFilter;\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public String getType(final String datatype) {
    String type = datatype;
    return type;
  }
  
  public String getAttribute(final String fields) {
    String res = "";
    int posicion_inicio = 0;
    boolean cond = false;
    while ((cond == false)) {
      {
        int posicion_actual = fields.indexOf(".", posicion_inicio);
        if ((posicion_actual != (-1))) {
          String field = fields.substring(posicion_inicio, posicion_actual);
          String _firstUpper = StringExtensions.toFirstUpper(field);
          String _plus = (".get" + _firstUpper);
          String _plus_1 = (_plus + "()");
          res = res.concat(_plus_1);
          posicion_inicio = (posicion_actual + 1);
        } else {
          String field_1 = fields.substring(posicion_inicio);
          String _firstUpper_1 = StringExtensions.toFirstUpper(field_1);
          String _plus_2 = (".get" + _firstUpper_1);
          String _plus_3 = (_plus_2 + "()");
          res = res.concat(_plus_3);
          cond = true;
        }
      }
    }
    return res;
  }
  
  public CharSequence generateHandlersCC(final Monitor monitor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    \t");
    final String monitorServiceName = monitor.getService().getName();
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    String source = monitor.getSource();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String type = monitor.getSourceType();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String roqmeType = this.getType(type);
    _builder.newLineIfNotEmpty();
    _builder.append("     \t");
    String roqmetypelower = roqmeType.toLowerCase();
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    String[] segments = monitor.getService().eContainer().toString().split(" ");
    _builder.newLineIfNotEmpty();
    int _length = segments.length;
    int _minus = (_length - 1);
    final String repositoryNameAux = segments[_minus];
    _builder.newLineIfNotEmpty();
    int _length_1 = repositoryNameAux.length();
    int _minus_1 = (_length_1 - 1);
    final String repositoryName = repositoryNameAux.substring(0, _minus_1);
    _builder.newLineIfNotEmpty();
    String attribute = this.getAttribute(source);
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("#include \"");
    String _name = monitor.getService().getName();
    _builder.append(_name);
    _builder.append("InHandler");
    String _firstUpper = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper);
    _builder.append(".hh\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.newLine();
    {
      EList<EObject> _eContents = monitor.getService().eContents();
      for(final EObject pattern : _eContents) {
        {
          if ((pattern instanceof PushPattern)) {
            _builder.append("\t");
            PushPattern dad = ((PushPattern) pattern);
            _builder.newLineIfNotEmpty();
            _builder.append(monitorServiceName);
            _builder.append("InHandler");
            String _firstUpper_1 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            _builder.append(_firstUpper_1);
            _builder.append("::");
            _builder.append(monitorServiceName);
            _builder.append("InHandler");
            String _firstUpper_2 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            _builder.append(_firstUpper_2);
            _builder.append("(Smart::InputSubject<");
            _builder.append(repositoryName);
            _builder.append("::");
            String _name_1 = dad.getDataType().getName();
            _builder.append(_name_1);
            _builder.append("> *subject, const int &prescaleFactor)");
            _builder.newLineIfNotEmpty();
          } else {
            if ((pattern instanceof SendPattern)) {
              _builder.append("\t");
              SendPattern dad_1 = ((SendPattern) pattern);
              _builder.newLineIfNotEmpty();
              _builder.append(monitorServiceName);
              _builder.append("InHandler");
              String _firstUpper_3 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              _builder.append(_firstUpper_3);
              _builder.append("::");
              _builder.append(monitorServiceName);
              _builder.append("InHandler");
              String _firstUpper_4 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              _builder.append(_firstUpper_4);
              _builder.append("(Smart::InputSubject<");
              _builder.append(repositoryName);
              _builder.append("::");
              String _name_2 = dad_1.getDataType().getName();
              _builder.append(_name_2);
              _builder.append("> *subject, const int &prescaleFactor)");
              _builder.newLineIfNotEmpty();
            } else {
              if ((pattern instanceof EventPattern)) {
                _builder.append("\t");
                EventPattern dad_2 = ((EventPattern) pattern);
                _builder.newLineIfNotEmpty();
                _builder.append(monitorServiceName);
                _builder.append("InHandler");
                String _firstUpper_5 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_5);
                _builder.append("::");
                _builder.append(monitorServiceName);
                _builder.append("InHandler");
                String _firstUpper_6 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_6);
                _builder.append("(Smart::InputSubject<");
                _builder.append(repositoryName);
                _builder.append("::");
                String _name_3 = dad_2.getEventType().getName();
                _builder.append(_name_3);
                _builder.append("> *subject, const int &prescaleFactor)");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append(":\t");
    _builder.append(monitorServiceName);
    _builder.append("InHandler");
    String _firstUpper_7 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_7);
    _builder.append("Core(subject, prescaleFactor)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"constructor ");
    _builder.append(monitorServiceName, "\t");
    _builder.append("InHandler\\n\";");
    _builder.newLineIfNotEmpty();
    {
      EList<ConfigOpt> _opts = monitor.getOpts();
      for(final ConfigOpt options : _opts) {
        {
          if ((options instanceof MinDiffBtwUpdates)) {
            _builder.append("\t");
            _builder.append("activatedFilter = false;\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.append(monitorServiceName);
    _builder.append("InHandler");
    String _firstUpper_8 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_8);
    _builder.append("::~");
    _builder.append(monitorServiceName);
    _builder.append("InHandler");
    String _firstUpper_9 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_9);
    _builder.append("() ");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"destructor ");
    _builder.append(monitorServiceName, "\t");
    _builder.append("InHandler");
    String _firstUpper_10 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_10, "\t");
    _builder.append("\\n\";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<EObject> _eContents_1 = monitor.getService().eContents();
      for(final EObject pattern_1 : _eContents_1) {
        {
          if ((pattern_1 instanceof PushPattern)) {
            _builder.append("\t");
            PushPattern dad_3 = ((PushPattern) pattern_1);
            _builder.newLineIfNotEmpty();
            _builder.append("void ");
            _builder.append(monitorServiceName);
            _builder.append("InHandler");
            String _firstUpper_11 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            _builder.append(_firstUpper_11);
            _builder.append("::on_");
            _builder.append(monitorServiceName);
            _builder.append("In");
            String _firstUpper_12 = StringExtensions.toFirstUpper(monitor.getContext().getName());
            _builder.append(_firstUpper_12);
            _builder.append("(const ");
            _builder.append(repositoryName);
            _builder.append("::");
            String _name_4 = dad_3.getDataType().getName();
            _builder.append(_name_4);
            _builder.append(" &input)");
            _builder.newLineIfNotEmpty();
          } else {
            if ((pattern_1 instanceof SendPattern)) {
              _builder.append("\t");
              SendPattern dad_4 = ((SendPattern) pattern_1);
              _builder.newLineIfNotEmpty();
              _builder.append("void ");
              _builder.append(monitorServiceName);
              _builder.append("InHandler");
              String _firstUpper_13 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              _builder.append(_firstUpper_13);
              _builder.append("::on_");
              _builder.append(monitorServiceName);
              _builder.append("In");
              String _firstUpper_14 = StringExtensions.toFirstUpper(monitor.getContext().getName());
              _builder.append(_firstUpper_14);
              _builder.append("(const ");
              _builder.append(repositoryName);
              _builder.append("::");
              String _name_5 = dad_4.getDataType().getName();
              _builder.append(_name_5);
              _builder.append(" &input)");
              _builder.newLineIfNotEmpty();
            } else {
              if ((pattern_1 instanceof EventPattern)) {
                _builder.append("\t");
                EventPattern dad_5 = ((EventPattern) pattern_1);
                _builder.newLineIfNotEmpty();
                _builder.append("void ");
                _builder.append(monitorServiceName);
                _builder.append("InHandler");
                String _firstUpper_15 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_15);
                _builder.append("::on_");
                _builder.append(monitorServiceName);
                _builder.append("In");
                String _firstUpper_16 = StringExtensions.toFirstUpper(monitor.getContext().getName());
                _builder.append(_firstUpper_16);
                _builder.append("(const ");
                _builder.append(repositoryName);
                _builder.append("::");
                String _name_6 = dad_5.getEventType().getName();
                _builder.append(_name_6);
                _builder.append(" &input)");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    Boolean existsMinDiffBtw = Boolean.valueOf(false);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    Double minDiffBtwValue = Double.valueOf(0.0);
    _builder.newLineIfNotEmpty();
    {
      EList<ConfigOpt> _opts_1 = monitor.getOpts();
      for(final ConfigOpt options_1 : _opts_1) {
        {
          if ((options_1 instanceof MinDiffBtwUpdates)) {
            _builder.append("\t");
            String _xblockexpression = null;
            {
              existsMinDiffBtw = Boolean.valueOf(true);
              _xblockexpression = "";
            }
            _builder.append(_xblockexpression, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            final MinDiffBtwUpdates minDiffBtw = ((MinDiffBtwUpdates) options_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _xblockexpression_1 = null;
            {
              minDiffBtwValue = Double.valueOf(minDiffBtw.getValue());
              _xblockexpression_1 = "";
            }
            _builder.append(_xblockexpression_1, "\t");
            _builder.newLineIfNotEmpty();
          } else {
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      if (((existsMinDiffBtw).booleanValue() == true)) {
        _builder.append("\t");
        _builder.append("const double minDiffBtwUpdates = ");
        _builder.append(minDiffBtwValue, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("bool manda = true;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("double current = input");
        _builder.append(attribute, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("static double prevValue;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if(activatedFilter)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if(fabs(current-prevValue) < minDiffBtwUpdates)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("manda = false;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("else");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("manda = true;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("if(manda)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("try");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("RoqmeDDSTopics::Roqme");
        _builder.append(roqmeType, "\t\t\t");
        _builder.append("Context ");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("Context;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("Context.name(\"");
        String _name_7 = monitor.getContext().getName();
        _builder.append(_name_7, "\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = roqmeType.equals("Enum");
          if (_equals) {
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append(roqmetypelower, "\t\t\t");
            _builder.append("Context.value().push_back(input");
            _builder.append(attribute, "\t\t\t");
            _builder.append(".to_string());");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append(roqmetypelower, "\t\t\t");
            _builder.append("Context.value().push_back(input");
            _builder.append(attribute, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("std::cout << \"Publishing data context\" << std::endl;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("_dw.write(");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("Context);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("activatedFilter = true;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("catch(Roqme::RoqmeDDSException& e)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("std::cerr << e.what() << std::endl;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("prevValue = current;");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("try");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("RoqmeDDSTopics::Roqme");
        _builder.append(roqmeType, "\t\t");
        _builder.append("Context ");
        _builder.append(roqmetypelower, "\t\t");
        _builder.append("Context;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append(roqmetypelower, "\t\t");
        _builder.append("Context.name(\"");
        String _name_8 = monitor.getContext().getName();
        _builder.append(_name_8, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = roqmeType.equals("Enum");
          if (_equals_1) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append(roqmetypelower, "\t\t");
            _builder.append("Context.value().push_back(input");
            _builder.append(attribute, "\t\t");
            _builder.append(".to_string());");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append(roqmetypelower, "\t\t");
            _builder.append("Context.value().push_back(input");
            _builder.append(attribute, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("std::cout << \"Publishing data context\" << std::endl;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append(roqmetypelower, "\t\t");
        _builder.append("_dw.write(");
        _builder.append(roqmetypelower, "\t\t");
        _builder.append("Context);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("catch(Roqme::RoqmeDDSException& e)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("std::cerr << e.what() << std::endl;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateActivityHH(final Monitor monitor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    \t");
    String monitorServiceName = monitor.getService().getName();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String type = monitor.getSourceType();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String roqmeType = this.getType(type);
    _builder.newLineIfNotEmpty();
    _builder.append("     \t");
    String roqmetypelower = roqmeType.toLowerCase();
    _builder.newLineIfNotEmpty();
    _builder.append("#ifndef _");
    String _upperCase = monitorServiceName.toUpperCase();
    _builder.append(_upperCase);
    _builder.append("REQACTIVITY");
    String _firstUpper = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper);
    _builder.append("_HH");
    _builder.newLineIfNotEmpty();
    _builder.append("#define _");
    String _upperCase_1 = monitorServiceName.toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("REQACTIVITY");
    String _firstUpper_1 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_1);
    _builder.append("_HH");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include \"");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_2 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_2);
    _builder.append("Core.hh\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <RoqmeWriterImpl.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_3 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_3);
    _builder.append("  : public ");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_4 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_4);
    _builder.append("Core");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("public:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(monitorServiceName, "\t");
    _builder.append("ReqActivity");
    String _firstUpper_5 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_5, "\t");
    _builder.append("(SmartACE::SmartComponent *comp);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("virtual ~");
    _builder.append(monitorServiceName, "\t");
    _builder.append("ReqActivity");
    String _firstUpper_6 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_6, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual int on_entry();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual int on_execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual int on_exit();");
    _builder.newLine();
    _builder.append("private:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Roqme::Roqme");
    _builder.append(roqmeType, "\t");
    _builder.append("Writer ");
    _builder.append(roqmetypelower, "\t");
    _builder.append("_dw;");
    _builder.newLineIfNotEmpty();
    {
      EList<ConfigOpt> _opts = monitor.getOpts();
      for(final ConfigOpt options : _opts) {
        {
          if ((options instanceof MinDiffBtwUpdates)) {
            _builder.append("\t");
            _builder.append("bool activatedFilter;\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateActivityCC(final Monitor monitor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    \t");
    String monitorServiceName = monitor.getService().getName();
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    String source = monitor.getSource();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String type = monitor.getSourceType();
    _builder.newLineIfNotEmpty();
    _builder.append(" \t\t");
    String roqmeType = this.getType(type);
    _builder.newLineIfNotEmpty();
    _builder.append("     \t");
    String roqmetypelower = roqmeType.toLowerCase();
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    String[] segments = monitor.getService().eContainer().toString().split(" ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String attribute = this.getAttribute(source);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include \"");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper);
    _builder.append(".hh\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include \"");
    _builder.append(this.projectName);
    _builder.append(".hh\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.newLine();
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_1 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_1);
    _builder.append("::");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_2 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_2);
    _builder.append("(SmartACE::SmartComponent *comp) ");
    _builder.newLineIfNotEmpty();
    _builder.append(":\t");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_3 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_3);
    _builder.append("Core(comp)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"constructor ");
    _builder.append(monitorServiceName, "\t");
    _builder.append("ReqActivity");
    String _firstUpper_4 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_4, "\t");
    _builder.append("\\n\";");
    _builder.newLineIfNotEmpty();
    {
      EList<ConfigOpt> _opts = monitor.getOpts();
      for(final ConfigOpt options : _opts) {
        {
          if ((options instanceof MinDiffBtwUpdates)) {
            _builder.append("\t");
            _builder.append("activatedFilter = false;\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_5 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_5);
    _builder.append("::~");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_6 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_6);
    _builder.append("() ");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"destructor ");
    _builder.append(monitorServiceName, "\t");
    _builder.append("ReqActivity");
    String _firstUpper_7 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_7, "\t");
    _builder.append("\\n\";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("int ");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_8 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_8);
    _builder.append("::on_entry()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// do initialization procedures here, which are called once, each time the task is started");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("int ");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_9 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_9);
    _builder.append("::on_execute()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// this method is called from an outside loop,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// hence, NEVER use an infinite loop (like \"while(1)\") here inside!!!");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// also do not use blocking calls which do not result from smartsoft kernel");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// to get the incoming data, use this methods:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Smart::StatusCode status;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<EObject> _eContents = monitor.getService().eContents();
      for(final EObject pattern : _eContents) {
        {
          if ((pattern instanceof QueryPattern)) {
            _builder.append("\t");
            String[] elements = monitor.getService().eContainer().toString().split(" ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            int _length = segments.length;
            int _minus = (_length - 1);
            final String repoQuery = elements[_minus];
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            int _length_1 = repoQuery.length();
            int _minus_1 = (_length_1 - 1);
            final String repoQueryName = repoQuery.substring(0, _minus_1);
            _builder.append(" \t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            QueryPattern dad = ((QueryPattern) pattern);
            _builder.append("\t\t\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(repoQueryName, "\t");
            _builder.append("::");
            String _name = dad.getAnswerType().getName();
            _builder.append(_name, "\t");
            _builder.append(" response;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(repoQueryName, "\t");
            _builder.append("::");
            String _name_1 = dad.getRequestType().getName();
            _builder.append(_name_1, "\t");
            _builder.append(" request;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("status = COMP->");
    String _lowerCase = monitor.getService().getName().substring(0, 1).toLowerCase();
    String _substring = monitor.getService().getName().substring(1);
    String _plus = (_lowerCase + _substring);
    _builder.append(_plus, "\t");
    _builder.append("Req");
    String _firstUpper_10 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_10, "\t");
    _builder.append("->query(request, response);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if(status!= Smart::SMART_OK)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("std::cout << \"Error sending data: \" << Smart::StatusCodeConversion(status) << std::endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    Boolean existsMinDiffBtw = Boolean.valueOf(false);
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    Double minDiffBtwValue = Double.valueOf(0.0);
    _builder.newLineIfNotEmpty();
    {
      EList<ConfigOpt> _opts_1 = monitor.getOpts();
      for(final ConfigOpt options_1 : _opts_1) {
        {
          if ((options_1 instanceof MinDiffBtwUpdates)) {
            _builder.append("\t\t");
            String _xblockexpression = null;
            {
              existsMinDiffBtw = Boolean.valueOf(true);
              _xblockexpression = "";
            }
            _builder.append(_xblockexpression, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            final MinDiffBtwUpdates minDiffBtw = ((MinDiffBtwUpdates) options_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _xblockexpression_1 = null;
            {
              minDiffBtwValue = Double.valueOf(minDiffBtw.getValue());
              _xblockexpression_1 = "";
            }
            _builder.append(_xblockexpression_1, "\t\t");
            _builder.newLineIfNotEmpty();
          } else {
          }
        }
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    {
      if (((existsMinDiffBtw).booleanValue() == true)) {
        _builder.append("\t\t");
        _builder.append("const double minDiffBtwUpdates = ");
        _builder.append(minDiffBtwValue, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("bool manda = true;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("double current = response");
        _builder.append(attribute, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("static double prevValue;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if(activatedFilter)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if(fabs(current-prevValue) < minDiffBtwUpdates)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("manda = false;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("else");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("manda = true;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if(manda)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("try");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("RoqmeDDSTopics::Roqme");
        _builder.append(roqmeType, "\t\t\t\t");
        _builder.append("Context ");
        _builder.append(roqmetypelower, "\t\t\t\t");
        _builder.append("Context;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append(roqmetypelower, "\t\t\t\t");
        _builder.append("Context.name(\"");
        String _name_2 = monitor.getContext().getName();
        _builder.append(_name_2, "\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = roqmeType.equals("Enum");
          if (_equals) {
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append(roqmetypelower, "\t\t\t\t");
            _builder.append("Context.value().push_back(response");
            _builder.append(attribute, "\t\t\t\t");
            _builder.append(".to_string());");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append(roqmetypelower, "\t\t\t\t");
            _builder.append("Context.value().push_back(response");
            _builder.append(attribute, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("std::cout << \"Publishing data context\" << std::endl;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append(roqmetypelower, "\t\t\t\t");
        _builder.append("_dw.write(");
        _builder.append(roqmetypelower, "\t\t\t\t");
        _builder.append("Context);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("catch(Roqme::RoqmeDDSException& e)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("std::cerr << e.what() << std::endl;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("prevValue = current;");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("try");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("RoqmeDDSTopics::Roqme");
        _builder.append(roqmeType, "\t\t\t");
        _builder.append("Context ");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("Context;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("Context.name(\"");
        String _name_3 = monitor.getContext().getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals_1 = roqmeType.equals("Enum");
          if (_equals_1) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append(roqmetypelower, "\t\t\t");
            _builder.append("Context.value().push_back(response");
            _builder.append(attribute, "\t\t\t");
            _builder.append(".to_string());");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append(roqmetypelower, "\t\t\t");
            _builder.append("Context.value().push_back(response");
            _builder.append(attribute, "\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("std::cout << \"Publishing data context\" << std::endl;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("_dw.write(");
        _builder.append(roqmetypelower, "\t\t\t");
        _builder.append("Context);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("catch(Roqme::RoqmeDDSException& e)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("std::cerr << e.what() << std::endl;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("int ");
    _builder.append(monitorServiceName);
    _builder.append("ReqActivity");
    String _firstUpper_11 = StringExtensions.toFirstUpper(monitor.getContext().getName());
    _builder.append(_firstUpper_11);
    _builder.append("::on_exit()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCMakeLists(final MappingModel mm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#--------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("# Code generated by the SmartSoft MDSD Toolchain");
    _builder.newLine();
    _builder.append("# The SmartSoft Toolchain has been developed by:");
    _builder.newLine();
    _builder.append("#  ");
    _builder.newLine();
    _builder.append("# Service Robotics Research Center");
    _builder.newLine();
    _builder.append("# University of Applied Sciences Ulm");
    _builder.newLine();
    _builder.append("# Prittwitzstr. 10");
    _builder.newLine();
    _builder.append("# 89075 Ulm (Germany)");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# Information about the SmartSoft MDSD Toolchain is available at:");
    _builder.newLine();
    _builder.append("# www.servicerobotik-ulm.de");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# This file is generated once. Modify this file to your needs. ");
    _builder.newLine();
    _builder.append("# If you want the toolchain to re-generate this file, please ");
    _builder.newLine();
    _builder.append("# delete it before running the code generator.");
    _builder.newLine();
    _builder.append("#--------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("CMAKE_MINIMUM_REQUIRED(VERSION 3.0)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# find the SmartSoft CMake Macros (version 2 that uses CMake v3)");
    _builder.newLine();
    _builder.append("FIND_FILE(SMART_MACROS SmartMacros2.cmake PATHS $ENV{SMART_ROOT_ACE}/CMakeMacros /opt/smartSoftAce/CMakeMacros/)");
    _builder.newLine();
    _builder.append("INCLUDE(${SMART_MACROS})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Create and configure a CMake project for a CommunicationObject");
    _builder.newLine();
    _builder.append("SMART_COMPONENT_PROJECT()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# find SmartSoft package");
    _builder.newLine();
    _builder.append("#FIND_SMARTSOFT(3.0)");
    _builder.newLine();
    _builder.append("#FIXME: generalize this");
    _builder.newLine();
    _builder.append("FIND_PACKAGE(AceSmartSoft PATHS $ENV{SMART_ROOT_ACE}/build)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# generte doxygen documentation");
    _builder.newLine();
    _builder.append("SMART_COMPONENT_GENERATE_DOC()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# automatically build CommunicationObject dependencies");
    _builder.newLine();
    _builder.append("SMART_COMPONENT_AUTOBUILD_DEPENDENCIES()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#################################################################################");
    _builder.newLine();
    _builder.append("## here you can put all your project-specific compiler configurations          ##");
    _builder.newLine();
    _builder.append("## using regular CMake commands (like FIND_PACKAGE, INCLUDE_DIRECTORIES, etc.) ##");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# you can add additional external libraries using regular CMake commands, e.g.:");
    _builder.newLine();
    _builder.append("#FIND_PACKAGE(<SomePackageName>)");
    _builder.newLine();
    _builder.append("FIND_PACKAGE(open62541 QUIET PATHS /usr/local/lib/cmake)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# these are the regular includes (add your own includes, if needed)");
    _builder.newLine();
    _builder.append("INCLUDE_DIRECTORIES(");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${CMAKE_CURRENT_LIST_DIR}/src");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${CMAKE_CURRENT_LIST_DIR}/src-gen");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${CMAKE_CURRENT_LIST_DIR}/src-gen/params");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${ROQME_ROOT}/roqme_git/cpp/roqmeDDS/include");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${ROQME_ROOT}/roqme_git/cpp/roqmeDDS/idl");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${OSPL_HOME}/include/dcps/C++/isocpp2");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${OSPL_HOME}/include/sys");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${OSPL_HOME}/include");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${OSPL_HOME}/include/dcps/C++/SACPP");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("LINK_DIRECTORIES($ENV{OSPL_HOME}/lib)");
    _builder.newLine();
    _builder.append("LINK_DIRECTORIES($ENV{ROQME_ROOT}/roqme_git/cpp/roqmeDDS/lib)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# collect the toolchain-generated source-files");
    _builder.newLine();
    _builder.append("FILE(GLOB_RECURSE SRC ${CMAKE_CURRENT_LIST_DIR}/src/*.cc)");
    _builder.newLine();
    _builder.append("FILE(GLOB_RECURSE SRC_GEN ${CMAKE_CURRENT_LIST_DIR}/src-gen/*.cc)");
    _builder.newLine();
    _builder.append("FILE(GLOB_RECURSE SRC_GEN_PARAMS ${CMAKE_CURRENT_LIST_DIR}/src-gen/params/*.cc)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# collect your own (local) source-files here (if needed)");
    _builder.newLine();
    _builder.append("#FILE(GLOB_RECURSE USER_SRC ${CMAKE_CURRENT_LIST_DIR}/src/<your-sources>)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# create the executable using collected source-files");
    _builder.newLine();
    _builder.append("ADD_EXECUTABLE(${PROJECT_NAME} ${SRC} ${SRC_GEN} ${SRC_GEN_PARAMS}) # add ${USER_SRC} (if needed)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# link your external libraries here (if there are any)");
    _builder.newLine();
    _builder.append("TARGET_LINK_LIBRARIES(${PROJECT_NAME} dcpssacpp dcpsgapi ddsdatabase ddsos ddskernel dcpsisocpp2 roqmedds)");
    _builder.newLine();
    _builder.append("IF(open62541_FOUND)");
    _builder.newLine();
    _builder.append("TARGET_LINK_LIBRARIES(${PROJECT_NAME} open62541)");
    _builder.newLine();
    _builder.append("ENDIF(open62541_FOUND)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#INSTALL(FILES ${PROJECT_SOURCE_DIR}/src-gen/${PROJECT_NAME}.ini.template DESTINATION etc)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("## end user-code                                                               ##");
    _builder.newLine();
    _builder.append("#################################################################################");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# SmartSoftKernel is one of the default dependencies for each component");
    _builder.newLine();
    _builder.append("TARGET_LINK_LIBRARIES(${PROJECT_NAME} AceSmartSoftKernel)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# automatically link to all dependent CommunicationObjects");
    _builder.newLine();
    _builder.append("SMART_COMPONENT_AUTOLINK_DEPENDENCIES()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# automatically install the component target");
    _builder.newLine();
    _builder.append("SMART_COMPONENT_AUTOINSTALL()");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateLanguageSettings(final MappingModel mm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
    _builder.newLine();
    _builder.append("<project>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<configuration id=\"cdt.managedbuild.config.gnu.exe.release.1094538128\" name=\"Release\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<extension point=\"org.eclipse.cdt.core.LanguageSettingsProvider\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider copy-of=\"extension\" id=\"org.eclipse.cdt.ui.UserLanguageSettingsProvider\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider-reference id=\"org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider\" ref=\"shared-provider\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider-reference id=\"org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider\" ref=\"shared-provider\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider class=\"org.eclipse.cdt.managedbuilder.language.settings.providers.GCCBuiltinSpecsDetector\" console=\"false\" env-hash=\"805257480388894640\" id=\"org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetector\" keep-relative-paths=\"false\" name=\"CDT GCC Built-in Compiler Settings\" parameter=\"${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;\" prefer-non-shared=\"true\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<language-scope id=\"org.eclipse.cdt.core.gcc\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<language-scope id=\"org.eclipse.cdt.core.g++\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</provider>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<configuration id=\"cdt.managedbuild.config.gnu.exe.debug.1430384519\" name=\"Debug\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<extension point=\"org.eclipse.cdt.core.LanguageSettingsProvider\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider copy-of=\"extension\" id=\"org.eclipse.cdt.ui.UserLanguageSettingsProvider\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider-reference id=\"org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider\" ref=\"shared-provider\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider-reference id=\"org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider\" ref=\"shared-provider\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<provider class=\"org.eclipse.cdt.managedbuilder.language.settings.providers.GCCBuiltinSpecsDetector\" console=\"false\" env-hash=\"805257480388894640\" id=\"org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetector\" keep-relative-paths=\"false\" name=\"CDT GCC Built-in Compiler Settings\" parameter=\"${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;\" prefer-non-shared=\"true\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<language-scope id=\"org.eclipse.cdt.core.gcc\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<language-scope id=\"org.eclipse.cdt.core.g++\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</provider>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</extension>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  public Vector<String> getRepositories(final MappingModel mm) {
    Vector<String> vres = new Vector<String>();
    EList<Monitor> _monitors = mm.getMonitors();
    for (final Monitor monitor : _monitors) {
      {
        String[] segments = monitor.getService().eContainer().toString().split(" ");
        int _length = segments.length;
        int _minus = (_length - 1);
        final String repositoryNameAux = segments[_minus];
        int _length_1 = repositoryNameAux.length();
        int _minus_1 = (_length_1 - 1);
        final String repositoryName = repositoryNameAux.substring(0, _minus_1);
        boolean _contains = vres.contains(repositoryName);
        boolean _not = (!_contains);
        if (_not) {
          vres.add(repositoryName);
        }
      }
    }
    return vres;
  }
  
  public CharSequence generateClassPath(final MappingModel mm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t \t");
    final Vector<String> repository_vector = this.getRepositories(mm);
    _builder.newLineIfNotEmpty();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<classpath>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"src\" path=\"model\"/>");
    _builder.newLine();
    {
      for(final String repo_name : repository_vector) {
        _builder.append("\t\t");
        _builder.append("<classpathentry kind=\"src\" path=\"/");
        _builder.append(repo_name, "\t\t");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("<classpathentry kind=\"src\" path=\"/CommRoqmeEstimate\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"output\" path=\"bin\"/>");
    _builder.newLine();
    _builder.append("</classpath>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCProject(final MappingModel mm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
    _builder.newLine();
    _builder.append("<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<storageModule moduleId=\"org.eclipse.cdt.core.settings\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<cconfiguration id=\"cdt.managedbuild.config.gnu.exe.release.1094538128\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.config.gnu.exe.release.1094538128\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<externalSettings/>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<extensions>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GNU_ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</extensions>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<configuration artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release\" cleanCommand=\"rm -rf\" description=\"\" id=\"cdt.managedbuild.config.gnu.exe.release.1094538128\" name=\"Release\" parent=\"cdt.managedbuild.config.gnu.exe.release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<folderInfo id=\"cdt.managedbuild.config.gnu.exe.release.1094538128.\" name=\"/\" resourcePath=\"\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<toolChain id=\"cdt.managedbuild.toolchain.gnu.exe.release.1992305411\" name=\"Linux GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.exe.release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<targetPlatform id=\"cdt.managedbuild.target.gnu.platform.exe.release.2119336264\" name=\"Debug Platform\" superClass=\"cdt.managedbuild.target.gnu.platform.exe.release\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<builder buildPath=\"${workspace_loc:/");
    _builder.append(this.projectName, "\t\t\t\t\t\t\t");
    _builder.append("}/Release\" id=\"cdt.managedbuild.target.gnu.builder.exe.release.1291724581\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"true\" name=\"Gnu Make Builder\" superClass=\"cdt.managedbuild.target.gnu.builder.exe.release\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.archiver.base.70362669\" name=\"GCC Archiver\" superClass=\"cdt.managedbuild.tool.gnu.archiver.base\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.1640960755\" name=\"GCC C++ Compiler\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.cpp.compiler.exe.release.option.optimization.level.1938861351\" name=\"Optimization Level\" superClass=\"gnu.cpp.compiler.exe.release.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"gnu.cpp.compiler.optimization.level.most\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.cpp.compiler.exe.release.option.debugging.level.1868181196\" name=\"Debug Level\" superClass=\"gnu.cpp.compiler.exe.release.option.debugging.level\" useByScannerDiscovery=\"false\" value=\"gnu.cpp.compiler.debugging.level.none\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.cpp.compiler.option.include.paths.106306000\" superClass=\"gnu.cpp.compiler.option.include.paths\" valueType=\"includePath\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"/usr/include/boost\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"../\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${ACE_ROOT}&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${SMART_ROOT_ACE}/include&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${SMART_ROOT_ACE}/include/SmartSoft_CD_API&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${SMART_ROOT_ACE}/include/AceSmartSoftKernel&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${workspace_loc:/");
    _builder.append(this.projectName, "\t\t\t\t\t\t\t\t\t");
    _builder.append("/smartsoft/src}&quot;\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${workspace_loc:/");
    _builder.append(this.projectName, "\t\t\t\t\t\t\t\t\t");
    _builder.append("/smartsoft/src-gen}&quot;\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("</option>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.cpp.compiler.input.1688958472\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.input\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.c.compiler.exe.release.1848381550\" name=\"GCC C Compiler\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.exe.release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option defaultValue=\"gnu.c.optimization.level.most\" id=\"gnu.c.compiler.exe.release.option.optimization.level.1081798197\" name=\"Optimization Level\" superClass=\"gnu.c.compiler.exe.release.option.optimization.level\" useByScannerDiscovery=\"false\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.c.compiler.exe.release.option.debugging.level.1279508392\" name=\"Debug Level\" superClass=\"gnu.c.compiler.exe.release.option.debugging.level\" useByScannerDiscovery=\"false\" value=\"gnu.c.debugging.level.none\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.c.compiler.input.1604501524\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.input\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.c.linker.exe.release.1287198104\" name=\"GCC C Linker\" superClass=\"cdt.managedbuild.tool.gnu.c.linker.exe.release\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.release.802849387\" name=\"GCC C++ Linker\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.cpp.linker.input.48664972\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.input\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("</inputType>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.assembler.exe.release.1675494146\" name=\"GCC Assembler\" superClass=\"cdt.managedbuild.tool.gnu.assembler.exe.release\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.assembler.input.1353898168\" superClass=\"cdt.managedbuild.tool.gnu.assembler.input\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</toolChain>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</folderInfo>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</cconfiguration>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<cconfiguration id=\"cdt.managedbuild.config.gnu.exe.debug.1430384519\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.config.gnu.exe.debug.1430384519\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<externalSettings/>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<extensions>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GNU_ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</extensions>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<configuration artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug\" cleanCommand=\"rm -rf\" description=\"\" id=\"cdt.managedbuild.config.gnu.exe.debug.1430384519\" name=\"Debug\" parent=\"cdt.managedbuild.config.gnu.exe.debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<folderInfo id=\"cdt.managedbuild.config.gnu.exe.debug.1430384519.\" name=\"/\" resourcePath=\"\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("<toolChain id=\"cdt.managedbuild.toolchain.gnu.exe.debug.994599997\" name=\"Linux GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.exe.debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<targetPlatform id=\"cdt.managedbuild.target.gnu.platform.exe.debug.1647703317\" name=\"Debug Platform\" superClass=\"cdt.managedbuild.target.gnu.platform.exe.debug\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<builder buildPath=\"${workspace_loc:/");
    _builder.append(this.projectName, "\t\t\t\t\t\t\t");
    _builder.append("}/Debug\" id=\"cdt.managedbuild.target.gnu.builder.exe.debug.160397755\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"true\" name=\"Gnu Make Builder\" superClass=\"cdt.managedbuild.target.gnu.builder.exe.debug\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.archiver.base.802945952\" name=\"GCC Archiver\" superClass=\"cdt.managedbuild.tool.gnu.archiver.base\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.903444635\" name=\"GCC C++ Compiler\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.cpp.compiler.exe.debug.option.optimization.level.1395411718\" name=\"Optimization Level\" superClass=\"gnu.cpp.compiler.exe.debug.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"gnu.cpp.compiler.optimization.level.none\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.cpp.compiler.exe.debug.option.debugging.level.2061785009\" name=\"Debug Level\" superClass=\"gnu.cpp.compiler.exe.debug.option.debugging.level\" useByScannerDiscovery=\"false\" value=\"gnu.cpp.compiler.debugging.level.max\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.cpp.compiler.option.include.paths.11777158\" superClass=\"gnu.cpp.compiler.option.include.paths\" valueType=\"includePath\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"../\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${ACE_ROOT}&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${SMART_ROOT_ACE}/include&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${SMART_ROOT_ACE}/include/SmartSoft_CD_API&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${SMART_ROOT_ACE}/include/AceSmartSoftKernel&quot;\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${workspace_loc:/");
    _builder.append(this.projectName, "\t\t\t\t\t\t\t\t\t");
    _builder.append("/smartsoft/src}&quot;\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<listOptionValue builtIn=\"false\" value=\"&quot;${workspace_loc:/");
    _builder.append(this.projectName, "\t\t\t\t\t\t\t\t\t");
    _builder.append("/smartsoft/src-gen}&quot;\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("</option>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.cpp.compiler.input.176282506\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.input\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.c.compiler.exe.debug.197126114\" name=\"GCC C Compiler\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.exe.debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option defaultValue=\"gnu.c.optimization.level.none\" id=\"gnu.c.compiler.exe.debug.option.optimization.level.1134663659\" name=\"Optimization Level\" superClass=\"gnu.c.compiler.exe.debug.option.optimization.level\" useByScannerDiscovery=\"false\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<option id=\"gnu.c.compiler.exe.debug.option.debugging.level.440703353\" name=\"Debug Level\" superClass=\"gnu.c.compiler.exe.debug.option.debugging.level\" useByScannerDiscovery=\"false\" value=\"gnu.c.debugging.level.max\" valueType=\"enumerated\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.c.compiler.input.1399782395\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.input\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.c.linker.exe.debug.651359436\" name=\"GCC C Linker\" superClass=\"cdt.managedbuild.tool.gnu.c.linker.exe.debug\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.debug.547714321\" name=\"GCC C++ Linker\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.cpp.linker.input.2099844027\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.input\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("</inputType>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("<tool id=\"cdt.managedbuild.tool.gnu.assembler.exe.debug.389163518\" name=\"GCC Assembler\" superClass=\"cdt.managedbuild.tool.gnu.assembler.exe.debug\">");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("<inputType id=\"cdt.managedbuild.tool.gnu.assembler.input.982210319\" superClass=\"cdt.managedbuild.tool.gnu.assembler.input\"/>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("</tool>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("</toolChain>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("</folderInfo>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</configuration>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</cconfiguration>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<project id=\"");
    _builder.append(this.projectName, "\t\t");
    _builder.append(".cdt.managedbuild.target.gnu.exe.370733719\" name=\"Executable\" projectType=\"cdt.managedbuild.target.gnu.exe\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<storageModule moduleId=\"scannerConfiguration\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.release.1094538128;cdt.managedbuild.config.gnu.exe.release.1094538128.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.1640960755;cdt.managedbuild.tool.gnu.cpp.compiler.input.1688958472\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</scannerConfigBuildInfo>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.debug.1430384519;cdt.managedbuild.config.gnu.exe.debug.1430384519.;cdt.managedbuild.tool.gnu.c.compiler.exe.debug.197126114;cdt.managedbuild.tool.gnu.c.compiler.input.1399782395\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</scannerConfigBuildInfo>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.debug.1430384519;cdt.managedbuild.config.gnu.exe.debug.1430384519.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.903444635;cdt.managedbuild.tool.gnu.cpp.compiler.input.176282506\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</scannerConfigBuildInfo>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.release.1094538128;cdt.managedbuild.config.gnu.exe.release.1094538128.;cdt.managedbuild.tool.gnu.c.compiler.exe.release.1848381550;cdt.managedbuild.tool.gnu.c.compiler.input.1604501524\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</scannerConfigBuildInfo>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</storageModule>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"/>");
    _builder.newLine();
    _builder.append("</cproject>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateProject(final MappingModel mm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<projectDescription>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<name>");
    _builder.append(this.projectName, "\t");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<comment></comment>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<projects>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</projects>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<buildSpec>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<buildCommand>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<triggers>clean,full,incremental,</triggers>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<arguments>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</arguments>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</buildCommand>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<buildCommand>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<name>org.eclipse.jdt.core.javabuilder</name>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<arguments>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</arguments>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</buildCommand>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<buildCommand>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<name>org.eclipse.xtext.ui.shared.xtextBuilder</name>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<arguments>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</arguments>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</buildCommand>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<buildCommand>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<triggers>full,incremental,</triggers>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<arguments>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</arguments>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</buildCommand>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</buildSpec>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<natures>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.sirius.nature.modelingproject</nature>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.xtext.ui.shared.xtextNature</nature>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.jdt.core.javanature</nature>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.cdt.core.cnature</nature>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.cdt.core.ccnature</nature>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</natures>");
    _builder.newLine();
    _builder.append("</projectDescription>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateRepresentations(final MappingModel mm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" \t\t");
    final Vector<String> repository_vector = this.getRepositories(mm);
    _builder.newLineIfNotEmpty();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ComponentDefinition=\"http://www.ecore.org/component/ComponentDefinition\" xmlns:description=\"http://www.eclipse.org/sirius/description/1.1.0\" xmlns:description_1=\"http://www.eclipse.org/sirius/diagram/description/1.1.0\" xmlns:diagram=\"http://www.eclipse.org/sirius/diagram/1.1.0\" xmlns:notation=\"http://www.eclipse.org/gmf/runtime/1.0.2/notation\" xmlns:style=\"http://www.eclipse.org/sirius/diagram/description/style/1.1.0\" xmlns:viewpoint=\"http://www.eclipse.org/sirius/1.1.0\" xsi:schemaLocation=\"http://www.eclipse.org/sirius/description/1.1.0 http://www.eclipse.org/sirius/1.1.0#//description http://www.eclipse.org/sirius/diagram/description/1.1.0 http://www.eclipse.org/sirius/diagram/1.1.0#//description http://www.eclipse.org/sirius/diagram/description/style/1.1.0 http://www.eclipse.org/sirius/diagram/1.1.0#//description/style\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<viewpoint:DAnalysis xmi:id=\"_u7Y4cMZDEeimeMmQD7-mxQ\" selectedViews=\"_vCPHUMZDEeimeMmQD7-mxQ\" version=\"12.1.0.201708031200\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<semanticResources>model/");
    _builder.append(this.projectName, "    ");
    _builder.append(".component</semanticResources>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<semanticResources>model/");
    _builder.append(this.projectName, "    ");
    _builder.append(".componentDocumentation</semanticResources>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<semanticResources>model/");
    _builder.append(this.projectName, "    ");
    _builder.append(".componentParameters</semanticResources>");
    _builder.newLineIfNotEmpty();
    {
      for(final String repo_name : repository_vector) {
        _builder.append("    ");
        _builder.append("<semanticResources>platform:/resource/");
        _builder.append(repo_name, "    ");
        _builder.append("/model/");
        _builder.append(repo_name, "    ");
        _builder.append(".services</semanticResources>");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("<semanticResources>platform:/resource/");
        _builder.append(repo_name, "    ");
        _builder.append("/model/");
        _builder.append(repo_name, "    ");
        _builder.append(".types</semanticResources>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("<ownedViews xmi:type=\"viewpoint:DView\" xmi:id=\"_vCPHUMZDEeimeMmQD7-mxQ\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<viewpoint xmi:type=\"description:Viewpoint\" href=\"platform:/plugin/org.sirius.component.design/description/component.odesign#//@ownedViewpoints[name=\'ComponentDefinitionViewpoint\']\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<ownedRepresentationDescriptors xmi:type=\"viewpoint:DRepresentationDescriptor\" xmi:id=\"_vCzvEMZDEeimeMmQD7-mxQ\" name=\"");
    _builder.append(this.projectName, "      ");
    _builder.append("\" repPath=\"#_vCg0IMZDEeimeMmQD7-mxQ\">");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("<description xmi:type=\"description_1:DiagramDescription\" href=\"platform:/plugin/org.sirius.component.design/description/component.odesign#//@ownedViewpoints[name=\'ComponentDefinitionViewpoint\']/@ownedRepresentations[name=\'ComponentDefinitionDiagram\']\"/>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<target xmi:type=\"ComponentDefinition:ComponentDefModel\" href=\"model/");
    _builder.append(this.projectName, "        ");
    _builder.append(".component#/\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("</ownedRepresentationDescriptors>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</ownedViews>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</viewpoint:DAnalysis>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<diagram:DSemanticDiagram xmi:id=\"_vCwrwMZDEeimeMmQD7-mxQ\" name=\"");
    _builder.append(this.projectName, "  ");
    _builder.append("\" uid=\"_vCg0IMZDEeimeMmQD7-mxQ\">");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<ownedAnnotationEntries xmi:type=\"description:AnnotationEntry\" xmi:id=\"_vCwrwcZDEeimeMmQD7-mxQ\" source=\"DANNOTATION_CUSTOMIZATION_KEY\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<data xmi:type=\"diagram:ComputedStyleDescriptionRegistry\" xmi:id=\"_vCwrwsZDEeimeMmQD7-mxQ\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</ownedAnnotationEntries>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<ownedAnnotationEntries xmi:type=\"description:AnnotationEntry\" xmi:id=\"_vDIfMMZDEeimeMmQD7-mxQ\" source=\"GMF_DIAGRAMS\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<data xmi:type=\"notation:Diagram\" xmi:id=\"_vDIfMcZDEeimeMmQD7-mxQ\" type=\"Sirius\" element=\"_vCwrwMZDEeimeMmQD7-mxQ\" measurementUnit=\"Pixel\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<children xmi:type=\"notation:Node\" xmi:id=\"_vDPM4MZDEeimeMmQD7-mxQ\" type=\"2002\" element=\"_vCwrxMZDEeimeMmQD7-mxQ\">");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<children xmi:type=\"notation:Node\" xmi:id=\"_vDTeUMZDEeimeMmQD7-mxQ\" type=\"5006\"/>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<children xmi:type=\"notation:Node\" xmi:id=\"_vDUFYMZDEeimeMmQD7-mxQ\" type=\"7001\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<styles xmi:type=\"notation:SortingStyle\" xmi:id=\"_vDUFYcZDEeimeMmQD7-mxQ\"/>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<styles xmi:type=\"notation:FilteringStyle\" xmi:id=\"_vDUFYsZDEeimeMmQD7-mxQ\"/>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("</children>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<styles xmi:type=\"notation:ShapeStyle\" xmi:id=\"_vDPM4cZDEeimeMmQD7-mxQ\" fontName=\"Ubuntu\" fontHeight=\"10\" bold=\"true\"/>");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("<layoutConstraint xmi:type=\"notation:Bounds\" xmi:id=\"_vDPM4sZDEeimeMmQD7-mxQ\"/>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</children>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<styles xmi:type=\"notation:DiagramStyle\" xmi:id=\"_vDIfMsZDEeimeMmQD7-mxQ\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</data>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</ownedAnnotationEntries>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<ownedDiagramElements xmi:type=\"diagram:DNodeContainer\" xmi:id=\"_vCwrxMZDEeimeMmQD7-mxQ\" name=\"");
    _builder.append(this.projectName, "    ");
    _builder.append("\" tooltipText=\"ComponentDefinition\">");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("<target xmi:type=\"ComponentDefinition:ComponentDefinition\" href=\"model/");
    _builder.append(this.projectName, "      ");
    _builder.append(".component#//@component\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("<semanticElements xmi:type=\"ComponentDefinition:ComponentDefinition\" href=\"model/");
    _builder.append(this.projectName, "      ");
    _builder.append(".component#//@component\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("<ownedStyle xmi:type=\"diagram:FlatContainerStyle\" xmi:id=\"_vCwrxcZDEeimeMmQD7-mxQ\" labelSize=\"10\" borderSize=\"1\" borderSizeComputationExpression=\"1\" foregroundColor=\"255,245,181\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<labelFormat>bold</labelFormat>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<description xmi:type=\"style:FlatContainerStyleDescription\" href=\"platform:/plugin/org.sirius.component.design/description/component.odesign#//@ownedViewpoints[name=\'ComponentDefinitionViewpoint\']/@ownedRepresentations[name=\'ComponentDefinitionDiagram\']/@defaultLayer/@containerMappings[name=\'ComponentContainer\']/@style\"/>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("</ownedStyle>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<actualMapping xmi:type=\"description_1:ContainerMapping\" href=\"platform:/plugin/org.sirius.component.design/description/component.odesign#//@ownedViewpoints[name=\'ComponentDefinitionViewpoint\']/@ownedRepresentations[name=\'ComponentDefinitionDiagram\']/@defaultLayer/@containerMappings[name=\'ComponentContainer\']\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</ownedDiagramElements>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<description xmi:type=\"description_1:DiagramDescription\" href=\"platform:/plugin/org.sirius.component.design/description/component.odesign#//@ownedViewpoints[name=\'ComponentDefinitionViewpoint\']/@ownedRepresentations[name=\'ComponentDefinitionDiagram\']\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<filterVariableHistory xmi:type=\"diagram:FilterVariableHistory\" xmi:id=\"_vCwrxsZDEeimeMmQD7-mxQ\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<activatedLayers xmi:type=\"description_1:Layer\" href=\"platform:/plugin/org.sirius.component.design/description/component.odesign#//@ownedViewpoints[name=\'ComponentDefinitionViewpoint\']/@ownedRepresentations[name=\'ComponentDefinitionDiagram\']/@defaultLayer\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<target xmi:type=\"ComponentDefinition:ComponentDefModel\" href=\"model/");
    _builder.append(this.projectName, "    ");
    _builder.append(".component#/\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("</diagram:DSemanticDiagram>");
    _builder.newLine();
    _builder.append("</xmi:XMI>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEstimateActivityHH() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//--------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("// Code generated by the SmartSoft MDSD Toolchain");
    _builder.newLine();
    _builder.append("// The SmartSoft Toolchain has been developed by:");
    _builder.newLine();
    _builder.append("//  ");
    _builder.newLine();
    _builder.append("// Service Robotics Research Center");
    _builder.newLine();
    _builder.append("// University of Applied Sciences Ulm");
    _builder.newLine();
    _builder.append("// Prittwitzstr. 10");
    _builder.newLine();
    _builder.append("// 89075 Ulm (Germany)");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// Information about the SmartSoft MDSD Toolchain is available at:");
    _builder.newLine();
    _builder.append("// www.servicerobotik-ulm.de");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// This file is generated once. Modify this file to your needs. ");
    _builder.newLine();
    _builder.append("// If you want the toolchain to re-generate this file, please ");
    _builder.newLine();
    _builder.append("// delete it before running the code generator.");
    _builder.newLine();
    _builder.append("//--------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("#ifndef _ESTIMATEACTIVITY_HH");
    _builder.newLine();
    _builder.append("#define _ESTIMATEACTIVITY_HH");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"EstimateActivityCore.hh\"");
    _builder.newLine();
    _builder.append("#include \"EstimateListener.hh\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class EstimateActivity  : public EstimateActivityCore");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("private:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Roqme::RoqmeEstimateReader *estimateReader;");
    _builder.newLine();
    _builder.append("public:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EstimateActivity(SmartACE::SmartComponent *comp);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual ~EstimateActivity();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual int on_entry();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual int on_execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual int on_exit();");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEstimateActivityCC() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//--------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("// Code generated by the SmartSoft MDSD Toolchain");
    _builder.newLine();
    _builder.append("// The SmartSoft Toolchain has been developed by:");
    _builder.newLine();
    _builder.append("//  ");
    _builder.newLine();
    _builder.append("// Service Robotics Research Center");
    _builder.newLine();
    _builder.append("// University of Applied Sciences Ulm");
    _builder.newLine();
    _builder.append("// Prittwitzstr. 10");
    _builder.newLine();
    _builder.append("// 89075 Ulm (Germany)");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// Information about the SmartSoft MDSD Toolchain is available at:");
    _builder.newLine();
    _builder.append("// www.servicerobotik-ulm.de");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// This file is generated once. Modify this file to your needs. ");
    _builder.newLine();
    _builder.append("// If you want the toolchain to re-generate this file, please ");
    _builder.newLine();
    _builder.append("// delete it before running the code generator.");
    _builder.newLine();
    _builder.append("//--------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("#include \"EstimateActivity.hh\"");
    _builder.newLine();
    _builder.append("#include \"");
    _builder.append(this.projectName);
    _builder.append(".hh\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("EstimateActivity::EstimateActivity(SmartACE::SmartComponent *comp) ");
    _builder.newLine();
    _builder.append(":\tEstimateActivityCore(comp)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("estimateReader = new Roqme::RoqmeEstimateReader(new EstimateListener(this));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("EstimateActivity::~EstimateActivity() ");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("delete estimateReader;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("int EstimateActivity::on_entry()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// do initialization procedures here, which are called once, each time the task is started");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int EstimateActivity::on_execute()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// this method is called from an outside loop,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// hence, NEVER use an infinite loop (like \"while(1)\") here inside!!!");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// also do not use blocking calls which do not result from smartsoft kernel");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("int EstimateActivity::on_exit()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEstimateListenerHH() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("#ifndef _ROQMEESTIMATELISTENER_HH");
    _builder.newLine();
    _builder.append("#define _ROQMEESTIMATELISTENER_HH");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include <RoqmeReaderImpl.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class EstimateActivity;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class EstimateListener: public Roqme::RoqmeDDSListener<RoqmeDDSTopics::RoqmeEstimate>");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("public:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EstimateListener(EstimateActivity* activity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void dataAvailable(const RoqmeDDSTopics::RoqmeEstimate& data, const dds::sub::SampleInfo& sampleInfo);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("private:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EstimateActivity* activity;");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEstimateListenerCC() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include \"EstimateListener.hh\"");
    _builder.newLine();
    _builder.append("#include \"");
    _builder.append(this.projectName);
    _builder.append(".hh\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include \"EstimateActivity.hh\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("EstimateListener::EstimateListener(EstimateActivity* activity)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this->activity = activity;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void EstimateListener::dataAvailable(const RoqmeDDSTopics::RoqmeEstimate& data, const dds::sub::SampleInfo& sampleInfo)");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"ESTIMATE sample available:\" << std::endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"\\t name: \" << data.name() << std::endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"\\t value: \" << data.value() << std::endl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("CommRoqmeEstimate::RoqmeEstimate estimate;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("estimate.setName(data.name());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("estimate.setValue(data.value());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"Publishing data\" << std::endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Smart::StatusCode status = COMP->estimateServiceOut->put(estimate);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(status!= Smart::SMART_OK)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("std::cout << \"Error pushing estimate data: \" << Smart::StatusCodeConversion(status) << std::endl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
