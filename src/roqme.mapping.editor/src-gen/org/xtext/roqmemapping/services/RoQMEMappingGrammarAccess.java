/*
 * generated by Xtext 2.12.0
 */
package org.xtext.roqmemapping.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RoQMEMappingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MappingModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.MappingModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cMonitorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMonitorsMonitorParserRuleCall_1_0 = (RuleCall)cMonitorsAssignment_1.eContents().get(0);
		
		//MappingModel mapping::MappingModel:
		//	imports+=Import*
		//	monitors+=Monitor*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* monitors+=Monitor*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//monitors+=Monitor*
		public Assignment getMonitorsAssignment_1() { return cMonitorsAssignment_1; }
		
		//Monitor
		public RuleCall getMonitorsMonitorParserRuleCall_1_0() { return cMonitorsMonitorParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import mapping::Import:
		//	'import' importURI=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=EString
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }
	}
	public class MonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.Monitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextContextCrossReference_1_0 = (CrossReference)cContextAssignment_1.eContents().get(0);
		private final RuleCall cContextContextQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cContextContextCrossReference_1_0.eContents().get(1);
		private final Keyword cMonitorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cAttributeKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cColonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cSourceAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cSourceQualifiedNameParserRuleCall_4_0_2_0 = (RuleCall)cSourceAssignment_4_0_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Assignment cSourceTypeAssignment_4_0_4 = (Assignment)cGroup_4_0.eContents().get(4);
		private final RuleCall cSourceTypeEStringParserRuleCall_4_0_4_0 = (RuleCall)cSourceTypeAssignment_4_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_0_5 = (Keyword)cGroup_4_0.eContents().get(5);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cServiceKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cColonKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cServiceAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final CrossReference cServiceCommunicationServiceDefinitionCrossReference_4_1_2_0 = (CrossReference)cServiceAssignment_4_1_2.eContents().get(0);
		private final RuleCall cServiceCommunicationServiceDefinitionQualifiedNameParserRuleCall_4_1_2_0_1 = (RuleCall)cServiceCommunicationServiceDefinitionCrossReference_4_1_2_0.eContents().get(1);
		private final Assignment cOptsAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cOptsPeriodParserRuleCall_4_2_0 = (RuleCall)cOptsAssignment_4_2.eContents().get(0);
		private final Assignment cOptsAssignment_4_3 = (Assignment)cUnorderedGroup_4.eContents().get(3);
		private final RuleCall cOptsMinTimeBtwUpdatesParserRuleCall_4_3_0 = (RuleCall)cOptsAssignment_4_3.eContents().get(0);
		private final Assignment cOptsAssignment_4_4 = (Assignment)cUnorderedGroup_4.eContents().get(4);
		private final RuleCall cOptsMinDiffBtwUpdatesParserRuleCall_4_4_0 = (RuleCall)cOptsAssignment_4_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Monitor mapping::Monitor:
		//	'context' context=[kernel::Context|QualifiedName] 'monitor'
		//	'{' ('attribute' ':' source=QualifiedName '[' sourceType=EString ']' & 'service' ':'
		//	service=[serviceDefinition::CommunicationServiceDefinition|QualifiedName] & opts+=Period? & opts+=MinTimeBtwUpdates? &
		//	opts+=MinDiffBtwUpdates?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' context=[kernel::Context|QualifiedName] 'monitor' '{' ('attribute' ':' source=QualifiedName '['
		//sourceType=EString ']' & 'service' ':' service=[serviceDefinition::CommunicationServiceDefinition|QualifiedName] &
		//opts+=Period? & opts+=MinTimeBtwUpdates? & opts+=MinDiffBtwUpdates?) '}'
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//context=[kernel::Context|QualifiedName]
		public Assignment getContextAssignment_1() { return cContextAssignment_1; }
		
		//[kernel::Context|QualifiedName]
		public CrossReference getContextContextCrossReference_1_0() { return cContextContextCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getContextContextQualifiedNameParserRuleCall_1_0_1() { return cContextContextQualifiedNameParserRuleCall_1_0_1; }
		
		//'monitor'
		public Keyword getMonitorKeyword_2() { return cMonitorKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'attribute' ':' source=QualifiedName '[' sourceType=EString ']' & 'service' ':'
		//service=[serviceDefinition::CommunicationServiceDefinition|QualifiedName] & opts+=Period? & opts+=MinTimeBtwUpdates? &
		//opts+=MinDiffBtwUpdates?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//'attribute' ':' source=QualifiedName '[' sourceType=EString ']'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_4_0_0() { return cAttributeKeyword_4_0_0; }
		
		//':'
		public Keyword getColonKeyword_4_0_1() { return cColonKeyword_4_0_1; }
		
		//source=QualifiedName
		public Assignment getSourceAssignment_4_0_2() { return cSourceAssignment_4_0_2; }
		
		//QualifiedName
		public RuleCall getSourceQualifiedNameParserRuleCall_4_0_2_0() { return cSourceQualifiedNameParserRuleCall_4_0_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0_3() { return cLeftSquareBracketKeyword_4_0_3; }
		
		//sourceType=EString
		public Assignment getSourceTypeAssignment_4_0_4() { return cSourceTypeAssignment_4_0_4; }
		
		//EString
		public RuleCall getSourceTypeEStringParserRuleCall_4_0_4_0() { return cSourceTypeEStringParserRuleCall_4_0_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_0_5() { return cRightSquareBracketKeyword_4_0_5; }
		
		//'service' ':' service=[serviceDefinition::CommunicationServiceDefinition|QualifiedName]
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'service'
		public Keyword getServiceKeyword_4_1_0() { return cServiceKeyword_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_4_1_1() { return cColonKeyword_4_1_1; }
		
		//service=[serviceDefinition::CommunicationServiceDefinition|QualifiedName]
		public Assignment getServiceAssignment_4_1_2() { return cServiceAssignment_4_1_2; }
		
		//[serviceDefinition::CommunicationServiceDefinition|QualifiedName]
		public CrossReference getServiceCommunicationServiceDefinitionCrossReference_4_1_2_0() { return cServiceCommunicationServiceDefinitionCrossReference_4_1_2_0; }
		
		//QualifiedName
		public RuleCall getServiceCommunicationServiceDefinitionQualifiedNameParserRuleCall_4_1_2_0_1() { return cServiceCommunicationServiceDefinitionQualifiedNameParserRuleCall_4_1_2_0_1; }
		
		//opts+=Period?
		public Assignment getOptsAssignment_4_2() { return cOptsAssignment_4_2; }
		
		//Period
		public RuleCall getOptsPeriodParserRuleCall_4_2_0() { return cOptsPeriodParserRuleCall_4_2_0; }
		
		//opts+=MinTimeBtwUpdates?
		public Assignment getOptsAssignment_4_3() { return cOptsAssignment_4_3; }
		
		//MinTimeBtwUpdates
		public RuleCall getOptsMinTimeBtwUpdatesParserRuleCall_4_3_0() { return cOptsMinTimeBtwUpdatesParserRuleCall_4_3_0; }
		
		//opts+=MinDiffBtwUpdates?
		public Assignment getOptsAssignment_4_4() { return cOptsAssignment_4_4; }
		
		//MinDiffBtwUpdates
		public RuleCall getOptsMinDiffBtwUpdatesParserRuleCall_4_4_0() { return cOptsMinDiffBtwUpdatesParserRuleCall_4_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PeriodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.Period");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeriodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cUnitAlternatives_3_0 = (Alternatives)cUnitAssignment_3.eContents().get(0);
		private final Keyword cUnitMsKeyword_3_0_0 = (Keyword)cUnitAlternatives_3_0.eContents().get(0);
		private final Keyword cUnitSKeyword_3_0_1 = (Keyword)cUnitAlternatives_3_0.eContents().get(1);
		private final Keyword cUnitMinKeyword_3_0_2 = (Keyword)cUnitAlternatives_3_0.eContents().get(2);
		private final Keyword cUnitHKeyword_3_0_3 = (Keyword)cUnitAlternatives_3_0.eContents().get(3);
		
		//Period mapping::Period:
		//	'period' ':' value=INT unit=('ms' | 's' | 'min' | 'h');
		@Override public ParserRule getRule() { return rule; }
		
		//'period' ':' value=INT unit=('ms' | 's' | 'min' | 'h')
		public Group getGroup() { return cGroup; }
		
		//'period'
		public Keyword getPeriodKeyword_0() { return cPeriodKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//unit=('ms' | 's' | 'min' | 'h')
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }
		
		//('ms' | 's' | 'min' | 'h')
		public Alternatives getUnitAlternatives_3_0() { return cUnitAlternatives_3_0; }
		
		//'ms'
		public Keyword getUnitMsKeyword_3_0_0() { return cUnitMsKeyword_3_0_0; }
		
		//'s'
		public Keyword getUnitSKeyword_3_0_1() { return cUnitSKeyword_3_0_1; }
		
		//'min'
		public Keyword getUnitMinKeyword_3_0_2() { return cUnitMinKeyword_3_0_2; }
		
		//'h'
		public Keyword getUnitHKeyword_3_0_3() { return cUnitHKeyword_3_0_3; }
	}
	public class MinTimeBtwUpdatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.MinTimeBtwUpdates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinTimeBtwUpdatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cUnitAlternatives_3_0 = (Alternatives)cUnitAssignment_3.eContents().get(0);
		private final Keyword cUnitMsKeyword_3_0_0 = (Keyword)cUnitAlternatives_3_0.eContents().get(0);
		private final Keyword cUnitSKeyword_3_0_1 = (Keyword)cUnitAlternatives_3_0.eContents().get(1);
		private final Keyword cUnitMinKeyword_3_0_2 = (Keyword)cUnitAlternatives_3_0.eContents().get(2);
		private final Keyword cUnitHKeyword_3_0_3 = (Keyword)cUnitAlternatives_3_0.eContents().get(3);
		
		//MinTimeBtwUpdates mapping::MinTimeBtwUpdates:
		//	'minTimeBtwUpdates' ':' value=INT unit=('ms' | 's' | 'min' | 'h');
		@Override public ParserRule getRule() { return rule; }
		
		//'minTimeBtwUpdates' ':' value=INT unit=('ms' | 's' | 'min' | 'h')
		public Group getGroup() { return cGroup; }
		
		//'minTimeBtwUpdates'
		public Keyword getMinTimeBtwUpdatesKeyword_0() { return cMinTimeBtwUpdatesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//unit=('ms' | 's' | 'min' | 'h')
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }
		
		//('ms' | 's' | 'min' | 'h')
		public Alternatives getUnitAlternatives_3_0() { return cUnitAlternatives_3_0; }
		
		//'ms'
		public Keyword getUnitMsKeyword_3_0_0() { return cUnitMsKeyword_3_0_0; }
		
		//'s'
		public Keyword getUnitSKeyword_3_0_1() { return cUnitSKeyword_3_0_1; }
		
		//'min'
		public Keyword getUnitMinKeyword_3_0_2() { return cUnitMinKeyword_3_0_2; }
		
		//'h'
		public Keyword getUnitHKeyword_3_0_3() { return cUnitHKeyword_3_0_3; }
	}
	public class MinDiffBtwUpdatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.MinDiffBtwUpdates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinDiffBtwUpdatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEDoubleParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MinDiffBtwUpdates mapping::MinDiffBtwUpdates:
		//	'minDiffBtwUpdates' ':' value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//'minDiffBtwUpdates' ':' value=EDouble
		public Group getGroup() { return cGroup; }
		
		//'minDiffBtwUpdates'
		public Keyword getMinDiffBtwUpdatesKeyword_0() { return cMinDiffBtwUpdatesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=EDouble
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_2_0() { return cValueEDoubleParserRuleCall_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	'-'? INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.roqmemapping.RoQMEMapping.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final MappingModelElements pMappingModel;
	private final ImportElements pImport;
	private final MonitorElements pMonitor;
	private final PeriodElements pPeriod;
	private final MinTimeBtwUpdatesElements pMinTimeBtwUpdates;
	private final MinDiffBtwUpdatesElements pMinDiffBtwUpdates;
	private final EStringElements pEString;
	private final EDoubleElements pEDouble;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RoQMEMappingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMappingModel = new MappingModelElements();
		this.pImport = new ImportElements();
		this.pMonitor = new MonitorElements();
		this.pPeriod = new PeriodElements();
		this.pMinTimeBtwUpdates = new MinTimeBtwUpdatesElements();
		this.pMinDiffBtwUpdates = new MinDiffBtwUpdatesElements();
		this.pEString = new EStringElements();
		this.pEDouble = new EDoubleElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.roqmemapping.RoQMEMapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MappingModel mapping::MappingModel:
	//	imports+=Import*
	//	monitors+=Monitor*;
	public MappingModelElements getMappingModelAccess() {
		return pMappingModel;
	}
	
	public ParserRule getMappingModelRule() {
		return getMappingModelAccess().getRule();
	}
	
	//Import mapping::Import:
	//	'import' importURI=EString;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Monitor mapping::Monitor:
	//	'context' context=[kernel::Context|QualifiedName] 'monitor'
	//	'{' ('attribute' ':' source=QualifiedName '[' sourceType=EString ']' & 'service' ':'
	//	service=[serviceDefinition::CommunicationServiceDefinition|QualifiedName] & opts+=Period? & opts+=MinTimeBtwUpdates? &
	//	opts+=MinDiffBtwUpdates?)
	//	'}';
	public MonitorElements getMonitorAccess() {
		return pMonitor;
	}
	
	public ParserRule getMonitorRule() {
		return getMonitorAccess().getRule();
	}
	
	//Period mapping::Period:
	//	'period' ':' value=INT unit=('ms' | 's' | 'min' | 'h');
	public PeriodElements getPeriodAccess() {
		return pPeriod;
	}
	
	public ParserRule getPeriodRule() {
		return getPeriodAccess().getRule();
	}
	
	//MinTimeBtwUpdates mapping::MinTimeBtwUpdates:
	//	'minTimeBtwUpdates' ':' value=INT unit=('ms' | 's' | 'min' | 'h');
	public MinTimeBtwUpdatesElements getMinTimeBtwUpdatesAccess() {
		return pMinTimeBtwUpdates;
	}
	
	public ParserRule getMinTimeBtwUpdatesRule() {
		return getMinTimeBtwUpdatesAccess().getRule();
	}
	
	//MinDiffBtwUpdates mapping::MinDiffBtwUpdates:
	//	'minDiffBtwUpdates' ':' value=EDouble;
	public MinDiffBtwUpdatesElements getMinDiffBtwUpdatesAccess() {
		return pMinDiffBtwUpdates;
	}
	
	public ParserRule getMinDiffBtwUpdatesRule() {
		return getMinDiffBtwUpdatesAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT ('.' INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
