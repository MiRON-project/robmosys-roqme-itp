/*
 * generated by Xtext 2.12.0
 */
package org.xtext.roqmemapping.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.roqmemapping.services.RoQMEMappingGrammarAccess;
import roqme.metamodel.mapping.Import;
import roqme.metamodel.mapping.MappingModel;
import roqme.metamodel.mapping.MappingPackage;
import roqme.metamodel.mapping.MinDiffBtwUpdates;
import roqme.metamodel.mapping.MinTimeBtwUpdates;
import roqme.metamodel.mapping.Monitor;
import roqme.metamodel.mapping.Period;

@SuppressWarnings("all")
public class RoQMEMappingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RoQMEMappingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MappingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MappingPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case MappingPackage.MAPPING_MODEL:
				sequence_MappingModel(context, (MappingModel) semanticObject); 
				return; 
			case MappingPackage.MIN_DIFF_BTW_UPDATES:
				sequence_MinDiffBtwUpdates(context, (MinDiffBtwUpdates) semanticObject); 
				return; 
			case MappingPackage.MIN_TIME_BTW_UPDATES:
				sequence_MinTimeBtwUpdates(context, (MinTimeBtwUpdates) semanticObject); 
				return; 
			case MappingPackage.MONITOR:
				sequence_Monitor(context, (Monitor) semanticObject); 
				return; 
			case MappingPackage.PERIOD:
				sequence_Period(context, (Period) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importURI=EString
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.IMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.IMPORT__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportURIEStringParserRuleCall_1_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappingModel returns MappingModel
	 *
	 * Constraint:
	 *     ((imports+=Import+ monitors+=Monitor+) | monitors+=Monitor+)?
	 */
	protected void sequence_MappingModel(ISerializationContext context, MappingModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MinDiffBtwUpdates returns MinDiffBtwUpdates
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_MinDiffBtwUpdates(ISerializationContext context, MinDiffBtwUpdates semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingPackage.Literals.MIN_DIFF_BTW_UPDATES__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingPackage.Literals.MIN_DIFF_BTW_UPDATES__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinDiffBtwUpdatesAccess().getValueEDoubleParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MinTimeBtwUpdates returns MinTimeBtwUpdates
	 *
	 * Constraint:
	 *     (value=INT (unit='ms' | unit='s' | unit='min' | unit='h'))
	 */
	protected void sequence_MinTimeBtwUpdates(ISerializationContext context, MinTimeBtwUpdates semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Monitor returns Monitor
	 *
	 * Constraint:
	 *     (
	 *         context=[Context|QualifiedName] 
	 *         (
	 *             (service=[CommunicationServiceDefinition|QualifiedName] | opts+=Period | opts+=MinTimeBtwUpdates | opts+=MinDiffBtwUpdates)? 
	 *             (source=QualifiedName sourceType=EString)?
	 *         )+
	 *     )
	 */
	protected void sequence_Monitor(ISerializationContext context, Monitor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Period returns Period
	 *
	 * Constraint:
	 *     (value=INT (unit='ms' | unit='s' | unit='min' | unit='h'))
	 */
	protected void sequence_Period(ISerializationContext context, Period semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
