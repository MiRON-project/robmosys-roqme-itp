/**
 * generated by Xtext 2.12.0
 */
package org.xtext.roqmemapping.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.roqmemapping.services.RoQMEMappingGrammarAccess;
import roqme.metamodel.mapping.ConfigOpt;
import roqme.metamodel.mapping.Import;
import roqme.metamodel.mapping.MappingModel;
import roqme.metamodel.mapping.Monitor;

@SuppressWarnings("all")
public class RoQMEMappingFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RoQMEMappingGrammarAccess _roQMEMappingGrammarAccess;
  
  protected void _format(final MappingModel mappingModel, @Extension final IFormattableDocument document) {
    EList<Import> _imports = mappingModel.getImports();
    for (final Import _import : _imports) {
      document.<Import>format(_import);
    }
    EList<Monitor> _monitors = mappingModel.getMonitors();
    for (final Monitor monitor : _monitors) {
      document.<Monitor>format(monitor);
    }
  }
  
  protected void _format(final Monitor monitor, @Extension final IFormattableDocument document) {
    EList<ConfigOpt> _opts = monitor.getOpts();
    for (final ConfigOpt configOpt : _opts) {
      document.<ConfigOpt>format(configOpt);
    }
  }
  
  public void format(final Object mappingModel, final IFormattableDocument document) {
    if (mappingModel instanceof XtextResource) {
      _format((XtextResource)mappingModel, document);
      return;
    } else if (mappingModel instanceof MappingModel) {
      _format((MappingModel)mappingModel, document);
      return;
    } else if (mappingModel instanceof Monitor) {
      _format((Monitor)mappingModel, document);
      return;
    } else if (mappingModel instanceof EObject) {
      _format((EObject)mappingModel, document);
      return;
    } else if (mappingModel == null) {
      _format((Void)null, document);
      return;
    } else if (mappingModel != null) {
      _format(mappingModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(mappingModel, document).toString());
    }
  }
}
